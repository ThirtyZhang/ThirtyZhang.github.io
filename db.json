{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/1.jpg","path":"medias/music/avatars/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/11.jpg","path":"medias/music/avatars/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/2.jpg","path":"medias/music/avatars/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/7.jpg","path":"medias/music/avatars/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/10.jpg","path":"medias/music/avatars/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/12.jpg","path":"medias/music/avatars/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/3.jpg","path":"medias/music/avatars/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/4.jpg","path":"medias/music/avatars/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/8.jpg","path":"medias/music/avatars/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/9.jpg","path":"medias/music/avatars/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/6.jpg","path":"medias/music/avatars/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/5.jpg","path":"medias/music/avatars/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/1.m4a","path":"medias/music/1.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/11.m4a","path":"medias/music/11.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/起床进行曲.m4a","path":"medias/music/起床进行曲.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/10.mp3","path":"medias/music/10.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/Turnin.m4a","path":"medias/music/Turnin.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/Still.m4a","path":"medias/music/Still.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/12.m4a","path":"medias/music/12.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/CountingStars.m4a","path":"medias/music/CountingStars.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/夜空中最亮的星.m4a","path":"medias/music/夜空中最亮的星.m4a","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/daoxiang.mp3","path":"medias/music/daoxiang.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/zuimeideqidai.flac","path":"medias/music/zuimeideqidai.flac","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/xiangyu.flac","path":"medias/music/xiangyu.flac","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1579462260303},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1579462260316},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1579462260316},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1579462260317},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1579462260317},{"_id":"themes/matery/_config.yml","hash":"ab22e483de843b258a79b513de0350fcdfe0a3dc","modified":1579689248077},{"_id":"source/_data/friends.json","hash":"97cd698d18127d70a00e33b76e66d74f04100c0b","modified":1579462260304},{"_id":"source/_data/musics.json","hash":"cb299438f47432219e26653c275271cf2b591796","modified":1586961158501},{"_id":"source/about/index.md","hash":"26ebe6aa4a0da580e7bbd47830015144806862e3","modified":1579594436821},{"_id":"source/_posts/2017-conclusion.md","hash":"49577c14655cf0f977ffc5db237ec6e2fd8fb570","modified":1586961189792},{"_id":"source/_posts/Github国内访问加速.md","hash":"abc6af279ebae35fea8d566c11a51d20cfd567a5","modified":1581322306027},{"_id":"source/_posts/Hexo搭建个人博客.md","hash":"5166e604421b4c7e2645ad0380beb122e109136f","modified":1582995960858},{"_id":"source/_posts/JavaScript-正则表达式.md","hash":"401e943528aca63715dddfd8a1c977848e821a37","modified":1582040910112},{"_id":"source/_posts/JavaScript-预编译.md","hash":"2a88bac9f0cb2636c59e21501135eca8e3c5cd82","modified":1582312392160},{"_id":"source/_posts/JavaScript同步和异步.md","hash":"2f5e5c8a6625cf54478c3793d6304dd5a89494ae","modified":1580448566097},{"_id":"source/_posts/JavaScript定时器.md","hash":"5232ff313723c6c2ae86e7097fe25f156b9291f2","modified":1581581068858},{"_id":"source/_posts/JavaScript模式.md","hash":"ae6d6beb3498c2284f190fffc252383979fe94aa","modified":1580915795547},{"_id":"source/_posts/Markdown语法.md","hash":"e8dd97278b5ef16986e27b1bee203cfdaa719f32","modified":1582995643564},{"_id":"source/_posts/VueRouter-路由.md","hash":"e748a0b5a7699f9fc04d3bb7776a3548f7ac7ea3","modified":1586454989698},{"_id":"source/_posts/Vuex.md","hash":"a13d2d1ed92b2a871ebf9478aef757d5562747d0","modified":1586454894776},{"_id":"source/_posts/Vue文档风格的Typora主题.md","hash":"35378d1f947777052f789ca4836ba36c8fdfe8da","modified":1582995811754},{"_id":"source/_posts/git快速上手.md","hash":"d024334f8d64fc9685966bcba6cee648420e65c7","modified":1579616206531},{"_id":"source/_posts/vscode-效率提升.md","hash":"61daf005d352756c4c5e112677f5de8e27f13b46","modified":1584455245541},{"_id":"source/_posts/vue相关疑难.md","hash":"abbd91d6b39157500851e5332b8aba941eb7cc38","modified":1586454965067},{"_id":"source/_posts/音乐插件.md","hash":"dbc3cd11a87277c43c6b0881e1722e43bd15caa6","modified":1582995723463},{"_id":"source/_posts/预习路线.md","hash":"c39a8da3f756b9fa8962a50358a60822af580371","modified":1579551678900},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1579462260313},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1579462260313},{"_id":"source/contact/index.md","hash":"0a7580ccdd8a4fba925e9aedcb8fb35c8abb1954","modified":1579471735066},{"_id":"source/friends/index.md","hash":"2fad15eac8c62070f1520034c6d23773225d8ef6","modified":1579471872654},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1579462260315},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1579462260319},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1579462260321},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1579462260321},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1579462260341},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1579462260342},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1579462260342},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1579462260343},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1579462260344},{"_id":"themes/matery/layout/friends.ejs","hash":"b9b75ff45324da5b4ddbb6e16ea1ecd239dbc310","modified":1579462260344},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1579462260345},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1579462260345},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1579462260345},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1579462260346},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1579462260346},{"_id":"themes/matery/source/favicon.png","hash":"78b5cb22e23cfb4dba919986421e7f4ed8ca363c","modified":1579498878456},{"_id":"source/_posts/Hexo搭建个人博客/1579706750493.png","hash":"d4d0bece1a608ed8441aaac52fadc707b0598822","modified":1579708348385},{"_id":"source/_posts/JavaScript同步和异步/1579733173618.png","hash":"9afaf2a1292722466dee81d3255bb2df5dd9b5a2","modified":1579733182655},{"_id":"source/_posts/Markdown语法/2.png","hash":"c8e2daac3f4ba2f978ceca97bf65b8ed17877b92","modified":1579708348410},{"_id":"source/_posts/Markdown语法/3.png","hash":"4875cc6ff92fbf8fcde003fddf9b6c672bf192ba","modified":1579708348435},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1579462260321},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1579462260323},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1579462260323},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1579462260323},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"b2312f832e582f0c7bfbbfd847c9af926bc2fcd5","modified":1579661440327},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1579462260324},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1579462260325},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1579462260325},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1579462260326},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"764d20ae433f558e81249ff0c8105ac53e6d3f59","modified":1579524721046},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1579462260327},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1579462260327},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1579462260328},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1579462260328},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1579462260328},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1579462260329},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1579462260329},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1579462260330},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1579462260330},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1579462260330},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1579462260331},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1579462260332},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"91409118815b13e455ff0f190669eec8f26bbf6f","modified":1580567963100},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1579462260332},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1579462260333},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"55272fab7a3303e94f1839ebd7ca6cf9965fb328","modified":1579462260333},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1579462260334},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1579462260334},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1579462260335},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1579462260335},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1579462260336},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1579462260336},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1579462260337},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1579462260337},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1579462260338},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1579462260339},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1579462260339},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1579462260340},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1579462260340},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1579462260341},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1579462260347},{"_id":"themes/matery/source/css/matery.css","hash":"cc377faeb8c5115e062baaab23e50ba16c0e4b66","modified":1579667799653},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1579462260348},{"_id":"themes/matery/source/css/my.css","hash":"8d4c33ca5558abee59a80c15fdf38f852f551d8a","modified":1580450787404},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1579462260351},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1579462260351},{"_id":"source/_posts/预习路线/1.png","hash":"ae38c9bf5e234880b55bbed71cb8d85f00dbc68e","modified":1579708348482},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1579462260353},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1579462260354},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1579462260355},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1579462260355},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1579462260391},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1579462260392},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1579462260410},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1579462260413},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1579462260415},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1579462260416},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1579462260427},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1579462260432},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1579462260435},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1579462260435},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1579462260437},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1579462260438},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1579462260438},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1579462260439},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1579462260445},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1579462260446},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"6272a627a6aedc67c80b5d4a3a1fb2dcd3089445","modified":1579469735777},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1579462260459},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1579462260460},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1579462260463},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1579462260467},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1579462260468},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1579462260469},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1579462260469},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1579462260476},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1579462260477},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1579462260482},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1579462260498},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1579462260506},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1579462260507},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1579462260508},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1579462260513},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1579462260514},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1579462260515},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1579462260516},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1579462260527},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"5565b7f501c9a03e631663443bb5da14af3c6b48","modified":1579508733896},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"c84eade01bef2d245ce3574718ce39d01ae95c6b","modified":1579508746531},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1579593594820},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1579593594821},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1579593594828},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"dcca8b48521cfbe4c366791f2d59bb36199b7cb4","modified":1579508645506},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"a23197c81c65cc764e665ce6c64628721d219f7a","modified":1579508689674},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1579593594822},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"27625628ca96f6f38815af6dffe2e50c1912da96","modified":1579508652886},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1579593594833},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"82187ffc1516664263cb6f6a4585a53d038dd36b","modified":1579476296771},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1579462260393},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1579462260414},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1579462260418},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1579462260448},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1579462260457},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1579462260462},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1579462260465},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1579462260478},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1579462260480},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"3d195b63c6c22395befc64d003d4486d5f46f4ee","modified":1579508682264},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1579462260505},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1579462260509},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1579462260520},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1579462260522},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1579462260529},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1579593594806},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1579593594808},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1579593594823},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"95929134fa807eb3d946e3f89a462a50b39cc18e","modified":1579535132649},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1579593594819},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"ac9a6666a38a8584750b0342b0bbbfb54991eeb8","modified":1579533785466},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1579593594823},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1579593594824},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"f1218f4268ce4db7637589eaea5e28fe752d7145","modified":1579533817182},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"3d195b63c6c22395befc64d003d4486d5f46f4ee","modified":1579508682264},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1579593594816},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1579593594817},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"c217bb9db5686f0aa6abae6d59e78e23bc5b8ea2","modified":1579508659957},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1579593594832},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"5a879d3ac71a18e57a4d8099fe75119597f24593","modified":1579508718329},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1579593594835},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9f3a02bcc3c3dc825458bb8734783aeb17bbb018","modified":1579610602155},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1579462260358},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1579462260359},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1579462260412},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1579462260420},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1579462260423},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1579462260424},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1579462260424},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1579462260425},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1579462260421},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1579462260422},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1579462260422},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1579462260423},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1579462260426},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1579462260429},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1579462260432},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1579462260440},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1579462260440},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1579462260441},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1579462260442},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1579462260442},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1579462260443},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1579462260444},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1579462260452},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1579462260456},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1579462260511},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1579593594809},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1579593594813},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1579593594807},{"_id":"themes/matery/source/medias/music/avatars/1.jpg","hash":"2d74cafc53285739f5817f83a0c0b6851ce8cd0f","modified":1579508637051},{"_id":"themes/matery/source/medias/music/avatars/11.jpg","hash":"c84eade01bef2d245ce3574718ce39d01ae95c6b","modified":1579508746531},{"_id":"themes/matery/source/medias/music/avatars/2.jpg","hash":"dcca8b48521cfbe4c366791f2d59bb36199b7cb4","modified":1579508645506},{"_id":"themes/matery/source/medias/music/avatars/7.jpg","hash":"a23197c81c65cc764e665ce6c64628721d219f7a","modified":1579508689674},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579462260388},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579462260389},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1579462260491},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1579462260492},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1579462260497},{"_id":"themes/matery/source/medias/music/avatars/10.jpg","hash":"5565b7f501c9a03e631663443bb5da14af3c6b48","modified":1579508733896},{"_id":"themes/matery/source/medias/music/avatars/12.jpg","hash":"6e147dcd42483de8067dae83ddeabd941d0d2d83","modified":1579511159750},{"_id":"themes/matery/source/medias/music/avatars/3.jpg","hash":"27625628ca96f6f38815af6dffe2e50c1912da96","modified":1579508652886},{"_id":"themes/matery/source/medias/music/avatars/4.jpg","hash":"c217bb9db5686f0aa6abae6d59e78e23bc5b8ea2","modified":1579508659957},{"_id":"themes/matery/source/medias/music/avatars/8.jpg","hash":"5a879d3ac71a18e57a4d8099fe75119597f24593","modified":1579508718329},{"_id":"themes/matery/source/medias/music/avatars/9.jpg","hash":"0019aa5093b6f4ca9a2a161341500dd4f71ad390","modified":1579508726390},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1579462260381},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1579462260475},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"3f0a7c1d28a91738d721e3c149ae906f6ada9717","modified":1579508673906},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1579462260525},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"120cd12374d9ad1cd12f0968ebb31e836cab8032","modified":1579533765947},{"_id":"themes/matery/source/medias/music/avatars/6.jpg","hash":"3d195b63c6c22395befc64d003d4486d5f46f4ee","modified":1579508682264},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1579462260363},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579462260370},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1579462260473},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"120cd12374d9ad1cd12f0968ebb31e836cab8032","modified":1579533765947},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"dc42862eb5635f259dc16e26a62d9fce833c6b39","modified":1579533804239},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1579593594812},{"_id":"themes/matery/source/medias/music/avatars/5.jpg","hash":"3f0a7c1d28a91738d721e3c149ae906f6ada9717","modified":1579508673906},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1579462260376},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1579462260541},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1579462260408},{"_id":"themes/matery/source/medias/music/1.m4a","hash":"ebf03b4ca80b8efdaee97f41cd6977b4ceacf47f","modified":1579664161867},{"_id":"source/_posts/Hexo搭建个人博客/1579682303863.png","hash":"4b1bb033437f7d3758a882d6b9674502c505b59b","modified":1579708348351},{"_id":"themes/matery/source/medias/music/11.m4a","hash":"2f7acc8f3be2ad14ac2e47e02e33f6533e0c488d","modified":1579509602733},{"_id":"themes/matery/source/medias/music/起床进行曲.m4a","hash":"8b15243f117773801dff5f68895706911aeddf52","modified":1579511816274},{"_id":"themes/matery/source/medias/logo.png","hash":"7a46116a294e7fa2a1b902b41956106cd06bbedd","modified":1579539610383},{"_id":"themes/matery/source/medias/music/10.mp3","hash":"150aee2eea25995fbb25a2a0ed7fca35b8579c26","modified":1579510612753},{"_id":"themes/matery/source/medias/music/Turnin.m4a","hash":"09d95465ef707d12fd82ed7f032fecfff79597cd","modified":1579506464138},{"_id":"themes/matery/source/medias/music/Still.m4a","hash":"1c38e4595c476873cd84933f25b49573e99f585d","modified":1579509272040},{"_id":"themes/matery/source/medias/music/12.m4a","hash":"5012556b2f1e9efc72b9bad64585ca15f1f83941","modified":1579512162677},{"_id":"themes/matery/source/medias/music/CountingStars.m4a","hash":"6cad0b47e75fa060ab8b59b84f8bdcebc1bfba83","modified":1579511933533},{"_id":"themes/matery/source/medias/music/夜空中最亮的星.m4a","hash":"08654e188dbf49f80a4cce891a8270a62747d0fd","modified":1579506265175},{"_id":"themes/matery/source/medias/music/daoxiang.mp3","hash":"72c46ee085f15dc72603b0ba154409879cbeb15e","modified":1579474236252},{"_id":"themes/matery/source/medias/music/zuimeideqidai.flac","hash":"56bb8363511d35bdd7151623e7fbfb25fe1f2c5c","modified":1579474566909},{"_id":"themes/matery/source/medias/music/xiangyu.flac","hash":"b636d8dfa835468ffbc401df7a08d55f02840913","modified":1579475260943}],"Category":[{"name":"随笔","_id":"ck91frkdn0005wcq4r3d5rhlo"},{"name":"效率","_id":"ck91frke2000cwcq4i60y2i3u"},{"name":"前端","_id":"ck91frkee000nwcq46l7uf0um"},{"name":"学习","_id":"ck91frkf5001owcq4s2lw3zfx"},{"name":"音乐","_id":"ck91frkf7001uwcq488lloplv"}],"Data":[{"_id":"friends","data":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]},{"_id":"musics","data":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2020-01-19T19:31:00.303Z","path":"404.html","comments":1,"_id":"ck91frkb90000wcq4yz6o2tkb","content":"","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 联系方式\n* **E-mail** : zhanglei.e@outlook.com/zl130031@gmail.com\n* **Address** : 北京\n* **WeChat/Mobile/QQ :** 13032030031\n\n  ","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 联系方式\n* **E-mail** : zhanglei.e@outlook.com/zl130031@gmail.com\n* **Address** : 北京\n* **WeChat/Mobile/QQ :** 13032030031\n\n  ","updated":"2020-01-21T08:13:56.821Z","path":"about/index.html","comments":1,"_id":"ck91frkdj0002wcq4o393wfdf","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><strong>E-mail</strong> : <a href=\"mailto:zhanglei.e@outlook.com\" target=\"_blank\" rel=\"noopener\">zhanglei.e@outlook.com</a>/zl130031@gmail.com</li>\n<li><strong>Address</strong> : 北京</li>\n<li><strong>WeChat/Mobile/QQ :</strong> 13032030031</li>\n</ul>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><strong>E-mail</strong> : <a href=\"mailto:zhanglei.e@outlook.com\" target=\"_blank\" rel=\"noopener\">zhanglei.e@outlook.com</a>/zl130031@gmail.com</li>\n<li><strong>Address</strong> : 北京</li>\n<li><strong>WeChat/Mobile/QQ :</strong> 13032030031</li>\n</ul>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-01-19T19:31:00.313Z","path":"archives/index.html","comments":1,"_id":"ck91frkdm0004wcq49fms2wwv","content":"","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-01-19T19:31:00.313Z","path":"categories/index.html","comments":1,"_id":"ck91frkdv0008wcq411rj4omx","content":"","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**948030054**\n* 微信：**13032030031**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ThirtyZhang\n* **地址：**<https://thirtyzhang.github.io/> \n* **简介：**ECNU NLPer\n* **头像：**<https://thirtyzhang.github.io/public/favicon.png>","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**948030054**\n* 微信：**13032030031**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ThirtyZhang\n* **地址：**<https://thirtyzhang.github.io/> \n* **简介：**ECNU NLPer\n* **头像：**<https://thirtyzhang.github.io/public/favicon.png>","updated":"2020-01-19T22:08:55.066Z","path":"contact/index.html","comments":1,"_id":"ck91frkdy000awcq4kx9ndo5y","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>948030054</strong></li>\n<li>微信：<strong>13032030031</strong></li>\n</ul>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ThirtyZhang</li>\n<li><strong>地址：</strong><a href=\"https://thirtyzhang.github.io/\">https://thirtyzhang.github.io/</a> </li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n<li><strong>头像：</strong><a href=\"https://thirtyzhang.github.io/public/favicon.png\">https://thirtyzhang.github.io/public/favicon.png</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>948030054</strong></li>\n<li>微信：<strong>13032030031</strong></li>\n</ul>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ThirtyZhang</li>\n<li><strong>地址：</strong><a href=\"https://thirtyzhang.github.io/\">https://thirtyzhang.github.io/</a> </li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n<li><strong>头像：</strong><a href=\"https://thirtyzhang.github.io/public/favicon.png\">https://thirtyzhang.github.io/public/favicon.png</a></li>\n</ul>\n"},{"title":"friends","date":"2020-01-19T21:50:10.000Z","type":"friends","layout":"friends","_content":"\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n> \n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ThirtyZhang\n* **地址：**https://thirtyzhang.github.io\n* **简介：**ECNU NLPer\n* **头像：**https://thirtyzhang.github.io/public/favicon.png\n\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-01-20 05:50:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n> \n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ThirtyZhang\n* **地址：**https://thirtyzhang.github.io\n* **简介：**ECNU NLPer\n* **头像：**https://thirtyzhang.github.io/public/favicon.png\n\n","updated":"2020-01-19T22:11:12.654Z","path":"friends/index.html","comments":1,"_id":"ck91frkga0026wcq4hycsudtm","content":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<blockquote>\n</blockquote>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ThirtyZhang</li>\n<li><strong>地址：</strong><a href=\"https://thirtyzhang.github.io\">https://thirtyzhang.github.io</a></li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n<li><strong>头像：</strong><a href=\"https://thirtyzhang.github.io/public/favicon.png\">https://thirtyzhang.github.io/public/favicon.png</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<blockquote>\n</blockquote>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ThirtyZhang</li>\n<li><strong>地址：</strong><a href=\"https://thirtyzhang.github.io\">https://thirtyzhang.github.io</a></li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n<li><strong>头像：</strong><a href=\"https://thirtyzhang.github.io/public/favicon.png\">https://thirtyzhang.github.io/public/favicon.png</a></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-01-19T19:31:00.315Z","path":"tags/index.html","comments":1,"_id":"ck91frkge0027wcq4jimxgkdk","content":"","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"标题","date":"2018-01-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"副标题。","_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n,\n\t{\n\t\t\"name\": \"稻香\",\n\t\t\"artist\": \"周杰伦\",\n\t\t\"url\": \"/medias/music/daoxiang.mp3\",\n\t\t\"cover\": \"/medias/music/avatars/1.jpg\"\n\t},{\n\t\t\"name\": \"最美的期待\",\n\t\t\"artist\": \"周笔畅\",\n\t\t\"url\": \"/medias/music/zuimeideqidai.flac\",\n\t\t\"cover\": \"/medias/music/avatars/2.jpg\"\n\t},{\n\t\t\"name\": \"起床进行曲\",\n\t\t\"artist\": \"钱晨航\",\n\t\t\"url\": \"/medias/music/起床进行曲.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/3.jpg\"\n\t},{\n\t\t\"name\": \"像鱼\",\n\t\t\"artist\": \"王贰浪\",\n\t\t\"url\": \"/medias/music/xiangyu.flac\",\n\t\t\"cover\": \"/medias/music/avatars/4.jpg\"\n\t},{\n\t\t\"name\": \"Turnin\",\n\t\t\"artist\": \"Young Rising Sons\",\n\t\t\"url\": \"/medias/music/Turnin.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/5.jpg\"\n\t},{\n\t\t\"name\": \"夜空中最亮的星\",\n\t\t\"artist\": \"小果酱\",\n\t\t\"url\": \"/medias/music/夜空中最亮的星.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/6.jpg\"\n\t}\n\t,{\n\t\t\"name\": \"CountingStars\",\n\t\t\"artist\": \"OneRepublic\",\n\t\t\"url\": \"/medias/music/CountingStars.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/8.jpg\"\n\t},{\n\t\t\"name\": \"Still\",\n\t\t\"artist\": \"Timirage\",\n\t\t\"url\": \"/medias/music/Still.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/9.jpg\"\n\t},{\n\t\t\"name\": \"Canon(Cover Johann Pachelbel)\",\n\t\t\"artist\": \"向晚丶\",\n\t\t\"url\": \"/medias/music/10.mp3\",\n\t\t\"cover\": \"/medias/music/avatars/10.jpg\"\n\t},{\n\t\t\"name\": \"#Lov3 #Ngẫu HứngCanon\",\n\t\t\"artist\": \"Hoaprox\",\n\t\t\"url\": \"/medias/music/11.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/11.jpg\"\n\t},{\n\t\t\"name\": \"Beautiful In White (Demo)\",\n\t\t\"artist\": \"Shane Filan\",\n\t\t\"url\": \"/medias/music/12.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/12.jpg\"\n\t}","source":"_posts/2017-conclusion.md","raw":"---\ntitle: 标题\ndate: 2018-01-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 副标题。\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n,\n\t{\n\t\t\"name\": \"稻香\",\n\t\t\"artist\": \"周杰伦\",\n\t\t\"url\": \"/medias/music/daoxiang.mp3\",\n\t\t\"cover\": \"/medias/music/avatars/1.jpg\"\n\t},{\n\t\t\"name\": \"最美的期待\",\n\t\t\"artist\": \"周笔畅\",\n\t\t\"url\": \"/medias/music/zuimeideqidai.flac\",\n\t\t\"cover\": \"/medias/music/avatars/2.jpg\"\n\t},{\n\t\t\"name\": \"起床进行曲\",\n\t\t\"artist\": \"钱晨航\",\n\t\t\"url\": \"/medias/music/起床进行曲.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/3.jpg\"\n\t},{\n\t\t\"name\": \"像鱼\",\n\t\t\"artist\": \"王贰浪\",\n\t\t\"url\": \"/medias/music/xiangyu.flac\",\n\t\t\"cover\": \"/medias/music/avatars/4.jpg\"\n\t},{\n\t\t\"name\": \"Turnin\",\n\t\t\"artist\": \"Young Rising Sons\",\n\t\t\"url\": \"/medias/music/Turnin.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/5.jpg\"\n\t},{\n\t\t\"name\": \"夜空中最亮的星\",\n\t\t\"artist\": \"小果酱\",\n\t\t\"url\": \"/medias/music/夜空中最亮的星.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/6.jpg\"\n\t}\n\t,{\n\t\t\"name\": \"CountingStars\",\n\t\t\"artist\": \"OneRepublic\",\n\t\t\"url\": \"/medias/music/CountingStars.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/8.jpg\"\n\t},{\n\t\t\"name\": \"Still\",\n\t\t\"artist\": \"Timirage\",\n\t\t\"url\": \"/medias/music/Still.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/9.jpg\"\n\t},{\n\t\t\"name\": \"Canon(Cover Johann Pachelbel)\",\n\t\t\"artist\": \"向晚丶\",\n\t\t\"url\": \"/medias/music/10.mp3\",\n\t\t\"cover\": \"/medias/music/avatars/10.jpg\"\n\t},{\n\t\t\"name\": \"#Lov3 #Ngẫu HứngCanon\",\n\t\t\"artist\": \"Hoaprox\",\n\t\t\"url\": \"/medias/music/11.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/11.jpg\"\n\t},{\n\t\t\"name\": \"Beautiful In White (Demo)\",\n\t\t\"artist\": \"Shane Filan\",\n\t\t\"url\": \"/medias/music/12.m4a\",\n\t\t\"cover\": \"/medias/music/avatars/12.jpg\"\n\t}","slug":"2017-conclusion","published":1,"updated":"2020-04-15T14:33:09.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkdc0001wcq4o2uz0k7s","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n<p>,<br>    {<br>        “name”: “稻香”,<br>        “artist”: “周杰伦”,<br>        “url”: “/medias/music/daoxiang.mp3”,<br>        “cover”: “/medias/music/avatars/1.jpg”<br>    },{<br>        “name”: “最美的期待”,<br>        “artist”: “周笔畅”,<br>        “url”: “/medias/music/zuimeideqidai.flac”,<br>        “cover”: “/medias/music/avatars/2.jpg”<br>    },{<br>        “name”: “起床进行曲”,<br>        “artist”: “钱晨航”,<br>        “url”: “/medias/music/起床进行曲.m4a”,<br>        “cover”: “/medias/music/avatars/3.jpg”<br>    },{<br>        “name”: “像鱼”,<br>        “artist”: “王贰浪”,<br>        “url”: “/medias/music/xiangyu.flac”,<br>        “cover”: “/medias/music/avatars/4.jpg”<br>    },{<br>        “name”: “Turnin”,<br>        “artist”: “Young Rising Sons”,<br>        “url”: “/medias/music/Turnin.m4a”,<br>        “cover”: “/medias/music/avatars/5.jpg”<br>    },{<br>        “name”: “夜空中最亮的星”,<br>        “artist”: “小果酱”,<br>        “url”: “/medias/music/夜空中最亮的星.m4a”,<br>        “cover”: “/medias/music/avatars/6.jpg”<br>    }<br>    ,{<br>        “name”: “CountingStars”,<br>        “artist”: “OneRepublic”,<br>        “url”: “/medias/music/CountingStars.m4a”,<br>        “cover”: “/medias/music/avatars/8.jpg”<br>    },{<br>        “name”: “Still”,<br>        “artist”: “Timirage”,<br>        “url”: “/medias/music/Still.m4a”,<br>        “cover”: “/medias/music/avatars/9.jpg”<br>    },{<br>        “name”: “Canon(Cover Johann Pachelbel)”,<br>        “artist”: “向晚丶”,<br>        “url”: “/medias/music/10.mp3”,<br>        “cover”: “/medias/music/avatars/10.jpg”<br>    },{<br>        “name”: “#Lov3 #Ngẫu HứngCanon”,<br>        “artist”: “Hoaprox”,<br>        “url”: “/medias/music/11.m4a”,<br>        “cover”: “/medias/music/avatars/11.jpg”<br>    },{<br>        “name”: “Beautiful In White (Demo)”,<br>        “artist”: “Shane Filan”,<br>        “url”: “/medias/music/12.m4a”,<br>        “cover”: “/medias/music/avatars/12.jpg”<br>    }</p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n<p>,<br>    {<br>        “name”: “稻香”,<br>        “artist”: “周杰伦”,<br>        “url”: “/medias/music/daoxiang.mp3”,<br>        “cover”: “/medias/music/avatars/1.jpg”<br>    },{<br>        “name”: “最美的期待”,<br>        “artist”: “周笔畅”,<br>        “url”: “/medias/music/zuimeideqidai.flac”,<br>        “cover”: “/medias/music/avatars/2.jpg”<br>    },{<br>        “name”: “起床进行曲”,<br>        “artist”: “钱晨航”,<br>        “url”: “/medias/music/起床进行曲.m4a”,<br>        “cover”: “/medias/music/avatars/3.jpg”<br>    },{<br>        “name”: “像鱼”,<br>        “artist”: “王贰浪”,<br>        “url”: “/medias/music/xiangyu.flac”,<br>        “cover”: “/medias/music/avatars/4.jpg”<br>    },{<br>        “name”: “Turnin”,<br>        “artist”: “Young Rising Sons”,<br>        “url”: “/medias/music/Turnin.m4a”,<br>        “cover”: “/medias/music/avatars/5.jpg”<br>    },{<br>        “name”: “夜空中最亮的星”,<br>        “artist”: “小果酱”,<br>        “url”: “/medias/music/夜空中最亮的星.m4a”,<br>        “cover”: “/medias/music/avatars/6.jpg”<br>    }<br>    ,{<br>        “name”: “CountingStars”,<br>        “artist”: “OneRepublic”,<br>        “url”: “/medias/music/CountingStars.m4a”,<br>        “cover”: “/medias/music/avatars/8.jpg”<br>    },{<br>        “name”: “Still”,<br>        “artist”: “Timirage”,<br>        “url”: “/medias/music/Still.m4a”,<br>        “cover”: “/medias/music/avatars/9.jpg”<br>    },{<br>        “name”: “Canon(Cover Johann Pachelbel)”,<br>        “artist”: “向晚丶”,<br>        “url”: “/medias/music/10.mp3”,<br>        “cover”: “/medias/music/avatars/10.jpg”<br>    },{<br>        “name”: “#Lov3 #Ngẫu HứngCanon”,<br>        “artist”: “Hoaprox”,<br>        “url”: “/medias/music/11.m4a”,<br>        “cover”: “/medias/music/avatars/11.jpg”<br>    },{<br>        “name”: “Beautiful In White (Demo)”,<br>        “artist”: “Shane Filan”,<br>        “url”: “/medias/music/12.m4a”,<br>        “cover”: “/medias/music/avatars/12.jpg”<br>    }</p>\n"},{"title":"GitHub国内访问加速","top":false,"cover":true,"toc":true,"mathjax":true,"date":"2020-01-21T02:46:53.000Z","password":null,"summary":"解决GitHub有时会连接超时,或者下载速度慢","_content":"\n# Github加速\n\n## 原理\n\n修改系统hosts文件的办法，绕过国内dns解析，直接访问GitHub的CDN节点\n\n访问网址时先搜索hosts文件，如果由网址对应的ip则不需要dns域名解析，因此可以将网址的ip配成静态ip，减少解析过程，提高访问速度。 \n\n## 操作\n\n**修改hosts**\n\n> hosts文件最下面增加（win10的位置为C:\\Windows\\System32\\drivers\\etc，先拷到其他地方修改后再覆盖该文件夹hosts文件）：\n\n```powershell\n# Github加速\n192.30.253.113     github.com\n185.199.108.153    github.github.io\n151.101.72.133     assets-cdn.github.com\n151.101.185.194    github.global.ssl.fastly.net\n203.98.7.65 gist.github.com \n13.229.189.0 codeload.github.com \n185.199.109.153 desktop.github.com \n185.199.108.153 guides.github.com \n185.199.108.153 blog.github.com \n18.204.240.114 status.github.com \n185.199.108.153 developer.github.com \n185.199.108.153 services.github.com \n192.30.253.175 enterprise.github.com \n34.195.49.195 education.github.com \n185.199.108.153 pages.github.com \n34.196.237.103 classroom.github.com\n# Github加速结束\n```\n\n**刷新系统DNS缓存** \n\n> 打开`cmd console:`\n>\n> > `Windows+X` 打开系统命令行（管理员身份）或 PowerShell \n\n> 执行：`ipconfig /flushdns`\n\n到这里就完成了,下面介绍下获取最新地址方法\n\n##  获取GitHub官方CDN地址 \n\n**打开:**[<https://www.ipaddress.com/> ](https://www.ipaddress.com/)\n\n```powershell\n# Github加速\n192.30.253.113     github.com\n185.199.108.153    github.github.io\n151.101.72.133     assets-cdn.github.com\n151.101.185.194    github.global.ssl.fastly.net\n# Github加速结束\n```\n\n查询上述IP后面的网址,更新前面的IP地址,并重新修改`hosts`文件","source":"_posts/Github国内访问加速.md","raw":"---\ntitle: GitHub国内访问加速\ntop: false\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-01-21 10:46:53\npassword:\nsummary: 解决GitHub有时会连接超时,或者下载速度慢\ntags:\n- 工具\ncategories:\n- 效率\n---\n\n# Github加速\n\n## 原理\n\n修改系统hosts文件的办法，绕过国内dns解析，直接访问GitHub的CDN节点\n\n访问网址时先搜索hosts文件，如果由网址对应的ip则不需要dns域名解析，因此可以将网址的ip配成静态ip，减少解析过程，提高访问速度。 \n\n## 操作\n\n**修改hosts**\n\n> hosts文件最下面增加（win10的位置为C:\\Windows\\System32\\drivers\\etc，先拷到其他地方修改后再覆盖该文件夹hosts文件）：\n\n```powershell\n# Github加速\n192.30.253.113     github.com\n185.199.108.153    github.github.io\n151.101.72.133     assets-cdn.github.com\n151.101.185.194    github.global.ssl.fastly.net\n203.98.7.65 gist.github.com \n13.229.189.0 codeload.github.com \n185.199.109.153 desktop.github.com \n185.199.108.153 guides.github.com \n185.199.108.153 blog.github.com \n18.204.240.114 status.github.com \n185.199.108.153 developer.github.com \n185.199.108.153 services.github.com \n192.30.253.175 enterprise.github.com \n34.195.49.195 education.github.com \n185.199.108.153 pages.github.com \n34.196.237.103 classroom.github.com\n# Github加速结束\n```\n\n**刷新系统DNS缓存** \n\n> 打开`cmd console:`\n>\n> > `Windows+X` 打开系统命令行（管理员身份）或 PowerShell \n\n> 执行：`ipconfig /flushdns`\n\n到这里就完成了,下面介绍下获取最新地址方法\n\n##  获取GitHub官方CDN地址 \n\n**打开:**[<https://www.ipaddress.com/> ](https://www.ipaddress.com/)\n\n```powershell\n# Github加速\n192.30.253.113     github.com\n185.199.108.153    github.github.io\n151.101.72.133     assets-cdn.github.com\n151.101.185.194    github.global.ssl.fastly.net\n# Github加速结束\n```\n\n查询上述IP后面的网址,更新前面的IP地址,并重新修改`hosts`文件","slug":"Github国内访问加速","published":1,"updated":"2020-02-10T08:11:46.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkdk0003wcq42w22ebjd","content":"<h1 id=\"Github加速\"><a href=\"#Github加速\" class=\"headerlink\" title=\"Github加速\"></a>Github加速</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>修改系统hosts文件的办法，绕过国内dns解析，直接访问GitHub的CDN节点</p>\n<p>访问网址时先搜索hosts文件，如果由网址对应的ip则不需要dns域名解析，因此可以将网址的ip配成静态ip，减少解析过程，提高访问速度。 </p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p><strong>修改hosts</strong></p>\n<blockquote>\n<p>hosts文件最下面增加（win10的位置为C:\\Windows\\System32\\drivers\\etc，先拷到其他地方修改后再覆盖该文件夹hosts文件）：</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\" spellcheck=\"true\"># Github加速</span>\n192<span class=\"token punctuation\">.</span>30<span class=\"token punctuation\">.</span>253<span class=\"token punctuation\">.</span>113     github<span class=\"token punctuation\">.</span>com\n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153    github<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io\n151<span class=\"token punctuation\">.</span>101<span class=\"token punctuation\">.</span>72<span class=\"token punctuation\">.</span>133     assets<span class=\"token operator\">-</span>cdn<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com\n151<span class=\"token punctuation\">.</span>101<span class=\"token punctuation\">.</span>185<span class=\"token punctuation\">.</span>194    github<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span>fastly<span class=\"token punctuation\">.</span>net\n203<span class=\"token punctuation\">.</span>98<span class=\"token punctuation\">.</span>7<span class=\"token punctuation\">.</span>65 gist<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n13<span class=\"token punctuation\">.</span>229<span class=\"token punctuation\">.</span>189<span class=\"token punctuation\">.</span>0 codeload<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>109<span class=\"token punctuation\">.</span>153 desktop<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153 guides<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153 blog<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n18<span class=\"token punctuation\">.</span>204<span class=\"token punctuation\">.</span>240<span class=\"token punctuation\">.</span>114 status<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153 developer<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153 services<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n192<span class=\"token punctuation\">.</span>30<span class=\"token punctuation\">.</span>253<span class=\"token punctuation\">.</span>175 enterprise<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n34<span class=\"token punctuation\">.</span>195<span class=\"token punctuation\">.</span>49<span class=\"token punctuation\">.</span>195 education<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153 pages<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com \n34<span class=\"token punctuation\">.</span>196<span class=\"token punctuation\">.</span>237<span class=\"token punctuation\">.</span>103 classroom<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com\n<span class=\"token comment\" spellcheck=\"true\"># Github加速结束</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>刷新系统DNS缓存</strong> </p>\n<blockquote>\n<p>打开<code>cmd console:</code></p>\n<blockquote>\n<p><code>Windows+X</code> 打开系统命令行（管理员身份）或 PowerShell </p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>执行：<code>ipconfig /flushdns</code></p>\n</blockquote>\n<p>到这里就完成了,下面介绍下获取最新地址方法</p>\n<h2 id=\"获取GitHub官方CDN地址\"><a href=\"#获取GitHub官方CDN地址\" class=\"headerlink\" title=\"获取GitHub官方CDN地址\"></a>获取GitHub官方CDN地址</h2><p><strong>打开:</strong><a href=\"https://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\"><a href=\"https://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com/</a> </a></p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\" spellcheck=\"true\"># Github加速</span>\n192<span class=\"token punctuation\">.</span>30<span class=\"token punctuation\">.</span>253<span class=\"token punctuation\">.</span>113     github<span class=\"token punctuation\">.</span>com\n185<span class=\"token punctuation\">.</span>199<span class=\"token punctuation\">.</span>108<span class=\"token punctuation\">.</span>153    github<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io\n151<span class=\"token punctuation\">.</span>101<span class=\"token punctuation\">.</span>72<span class=\"token punctuation\">.</span>133     assets<span class=\"token operator\">-</span>cdn<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com\n151<span class=\"token punctuation\">.</span>101<span class=\"token punctuation\">.</span>185<span class=\"token punctuation\">.</span>194    github<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span>fastly<span class=\"token punctuation\">.</span>net\n<span class=\"token comment\" spellcheck=\"true\"># Github加速结束</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询上述IP后面的网址,更新前面的IP地址,并重新修改<code>hosts</code>文件</p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"Github加速\"><a href=\"#Github加速\" class=\"headerlink\" title=\"Github加速\"></a>Github加速</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>修改系统hosts文件的办法，绕过国内dns解析，直接访问GitHub的CDN节点</p>\n<p>访问网址时先搜索hosts文件，如果由网址对应的ip则不需要dns域名解析，因此可以将网址的ip配成静态ip，减少解析过程，提高访问速度。 </p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p><strong>修改hosts</strong></p>\n<blockquote>\n<p>hosts文件最下面增加（win10的位置为C:\\Windows\\System32\\drivers\\etc，先拷到其他地方修改后再覆盖该文件夹hosts文件）：</p>\n</blockquote>\n<pre><code class=\"powershell\"># Github加速\n192.30.253.113     github.com\n185.199.108.153    github.github.io\n151.101.72.133     assets-cdn.github.com\n151.101.185.194    github.global.ssl.fastly.net\n203.98.7.65 gist.github.com \n13.229.189.0 codeload.github.com \n185.199.109.153 desktop.github.com \n185.199.108.153 guides.github.com \n185.199.108.153 blog.github.com \n18.204.240.114 status.github.com \n185.199.108.153 developer.github.com \n185.199.108.153 services.github.com \n192.30.253.175 enterprise.github.com \n34.195.49.195 education.github.com \n185.199.108.153 pages.github.com \n34.196.237.103 classroom.github.com\n# Github加速结束</code></pre>\n<p><strong>刷新系统DNS缓存</strong> </p>\n<blockquote>\n<p>打开<code>cmd console:</code></p>\n<blockquote>\n<p><code>Windows+X</code> 打开系统命令行（管理员身份）或 PowerShell </p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>执行：<code>ipconfig /flushdns</code></p>\n</blockquote>\n<p>到这里就完成了,下面介绍下获取最新地址方法</p>\n<h2 id=\"获取GitHub官方CDN地址\"><a href=\"#获取GitHub官方CDN地址\" class=\"headerlink\" title=\"获取GitHub官方CDN地址\"></a>获取GitHub官方CDN地址</h2><p><strong>打开:</strong><a href=\"https://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\"><a href=\"https://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com/</a> </a></p>\n<pre><code class=\"powershell\"># Github加速\n192.30.253.113     github.com\n185.199.108.153    github.github.io\n151.101.72.133     assets-cdn.github.com\n151.101.185.194    github.global.ssl.fastly.net\n# Github加速结束</code></pre>\n<p>查询上述IP后面的网址,更新前面的IP地址,并重新修改<code>hosts</code>文件</p>\n"},{"title":"Hexo搭建个人博客","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2020-01-21T08:58:04.000Z","password":null,"summary":"Hexo 是一个快速、简洁且高效的博客框架","_content":"\n\n\n<div  align = \"center\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=864622002&auto=1&height=66\"></iframe></div>\n\n# 安装\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速,不使用的话可能会有下载过慢或下载失败的问题\n\n```powershell\n$ npm config set registry https://registry.npm.taobao.org\n```\n\n## 认识 Hexo\n\n> Hexo 是一个快速、简洁且高效的博客框架，可以让你快速建立一个博客。\n\n> Hexo 使用 Node.js 编写。得益于 Node.js，使得 Hexo 生成上百个页面游刃有余。\n\n> Hexo 支持 GFM (GitHub Flavored Markdown) 的大部分功能。如果你不喜欢 Markdown ，你还可以换一个 Hexo 渲染插件。\n\n> Hexo 有许多插件，可以进行各种操作。\n\n## 学习 Hexo 之前，你需要有：\n\n- Node.js 基本知识\n- Git 基本知识\n- Markdown 基本知识\n- Html、css、JavaScript 基本知识\n- ······\n\n当然了，你可别被吓跑了。除了 Markdown ，其他都不用熟练掌握（事实上如果你不注意排版连 Markdown 都不用掌握，但最好还是学学吧 : **[Markdown语法 ](https://thirtyzhang.github.io/2020/01/21/markdown-yu-fa/)**）。如果你完全不会以上划线部分的知识，也没关系。只是简单地建个可以发文章的博客就好了。如果你要更上一层楼，那么以上被划掉的知识就是必备的啦~\n\n## 安装 Hexo\n\n在安装 Hexo 之前，你需要安装以下两个工具：\n\n- **[Git](https://git-scm.com/)**\n- **[Node.js](https://nodejs.org/)**\n\n## 安装 Git\n\n- Windows：下载并安装 [git](https://git-scm.com/download/win).\n- Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/) ：`brew install git`;或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装。\n- Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n- Linux (Arch 系列)：`sudo pacman -S git`\n\n提醒\n\n由于墙的原因，从上面的链接下载 git for windows 最好挂上一个代理，否则下载速度十分缓慢。也可以参考[这个页面](https://github.com/waylau/git-for-win)，收录了存储于百度云的下载地址。\n\n提醒\n\n如果你是 CentOS 服务器上的，可以直接使用 [HexoOneClickInstallation](https://github.com/PasserByJia/HexoOneClickInstallation) 这个脚本快速安装 Hexo。\n\n## 安装 Node.js\n\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。\n\ncURL:\n\n```powershell\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\nWget:\n\n```powershell\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\n```powershell\n$ nvm install stable\n```\n\n或者您也可以下载 [安装程序](http://nodejs.org/) 来安装。\n\n## 安装 Hexo\n\n安装好后，即可使用 npm 完成 Hexo 的安装。\n\n```powershell\n# 下面这两个命令好像是一样的效果,任选一个就可以了\n$ npm install -g hexo-cli\n$ npm install hexo-cli -g\n```\n输入`npm install`安装必备的组件 \n\n# 配置\n\n## 建立网站\n\n安装好 Hexo 后即可建立你的网站。\n\n首先建立一个文件夹。\n\n```powershell\nmkdir <your_blog_name>  # 建立你的网站根目录，名字可以自己修改\n```\n\n然后往这个文件夹里安装 Hexo。\n\n```powershell\nhexo init <your_blog_name>\n```\n\n再执行\n\n```powershell\nhexo s\n```\n\n浏览器输入\n\n```powershell\nhttp://localhost:4000/\n```\n\n就可以本地访问了\n\n这样就建立好网站了！\n\n**网站建立好后还需要做一些个性化配置,如:修改网站默认内容改为自己的内容**\n\n此部分内容可能过期，请见 [Hexo 官方文档](https://hexo.io/zh-cn/docs/configuration)。\n\n在 Hexo 根目录 `_config.yml` 这个文件里配置！\n\n警告\n\n在 YAML 语法中，冒号后面必须要有一个空格才能继续写下去。\n\n### 网站\n\n```\n# Site\ntitle:            \nsubtitle: \ndescription: \nkeywords:\nauthor: \nlanguage: \ntimezone: \n```\n\n| 参数          | 描述                                                         |\n| ------------- | ------------------------------------------------------------ |\n| `title`       | 网站标题                                                     |\n| `subtitle`    | 网站副标题                                                   |\n| `description` | 网站描述                                                     |\n| `keywords`    | 网站关键词                                                   |\n| `author`      | 作者名字                                                     |\n| `language`    | 网站使用的语言                                               |\n| `timezone`    | 网站时区：详见[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) |\n\n### URL\n\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: \nroot: \npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailiing_index: true\n```\n\n| 参数                         | 描述                                                    |\n| ---------------------------- | ------------------------------------------------------- |\n| `url`                        | 网址                                                    |\n| `root`                       | 网站根目录                                              |\n| `permalink`                  | 文章的永久链接格式                                      |\n| `permalink_defaults`         | 永久链接中各部分的默认值                                |\n| `pretty_urls`                | 改写 `permalink` 的值来美化 URL                         |\n| `pretty_urls.trailing_index` | 是否在永久链接中保留尾部的 `index.html`，`false` 时去除 |\n\n提醒\n\n如果你的网站在子目录中，如：`https://yoursite.com/blog` ，就把你的 `url` 设为 `http://yoursite.com/blog` 并把 `root` 设为 `/blog/`。\n\n例如：\n\n```\n# 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html\npretty_urls:\n  trailing_index: false\n# 此时页面的永久链接会变为 http://example.com/foo/bar/\n```\n\n### 目录\n\n```\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render: README.md\n```\n\n| 参数           | 描述                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `source_dir`   | 资源文件夹                                                   |\n| `public_dir`   | 公共文件夹                                                   |\n| `tag_dir`      | 标签文件夹                                                   |\n| `archive_dir`  | 归档文件夹                                                   |\n| `category_dir` | 分类文件夹                                                   |\n| `code_dir`     | Include code 文件夹                                          |\n| `i18n_dir`     | 国际化文件夹                                                 |\n| `skip_render`  | 跳过文件的渲染。匹配到的文件将直接复制到 `public` 目录中。您可使用 [glob](https://github.com/micromatch/micromatch#extended-globbing) 表达式来匹配路径。 |\n\n提醒\n\n一般情况下，这部分是不需要修改的。\n\n例如：\n\n```\nskip_render: \"mypage/**/*\"\n# 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 'public' 目录\n# 你也可以用这种方法来跳过对指定文章文件的渲染\nskip_render: \"_posts/test-post.md\"\n# 这将会忽略对 'test-post.md' 的渲染\n```\n\n### 文章\n\n```\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\n  enable: true\n  field: site\n  exclude: []\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n```\n\n| 参数                    | 描述                                                         |\n| ----------------------- | ------------------------------------------------------------ |\n| `new_post_name`         | 新文章的文件名称                                             |\n| `default_layout`        | 预设布局                                                     |\n| `auto_spacing`          | 在中文和英文之间加入空格                                     |\n| `titlecase`             | 把标题转换为 title case                                      |\n| `external_link`         | 在新标签中打开链接                                           |\n| `external_link.enable`  | 在新标签中打开链接                                           |\n| `external_link.field`   | 适用于整个网站或仅文章                                       |\n| `external_link.exclude` | 排除主机名。在适用时指定子域，包括 `www`                     |\n| `filename_case`         | 把文件名称转换为 (1) 小写或 (2) 大写                         |\n| `render_drafts`         | 显示草稿                                                     |\n| `post_asset_folder`     | 启动 [Asset 文件夹](https://hexo.io/zh-cn/docs/asset-folders) |\n| `relative_link`         | 把链接改为与根目录的相对位址                                 |\n| `future`                | 显示未来的文章                                               |\n| `highlight`             | 代码块的设置                                                 |\n| `highlight.enable`      | 开启语法高亮                                                 |\n| `highlight.auto_detect` | 如果未指定语言，则启用自动检测                               |\n| `highlight.line_number` | 显示行数                                                     |\n| `highlight.tab_replace` | 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs            |\n\n### 分类 & 标签\n\n```\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n```\n\n| 参数               | 描述     |\n| ------------------ | -------- |\n| `default_category` | 默认分类 |\n| `category_map`     | 分类别名 |\n| `tag_map`          | 标签别名 |\n\n### 日期 / 时间格式\n\n```\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\nuse_date_for_updated: true\n```\n\n| 参数                   | 描述                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| `date_format`          | 日期格式                                                     |\n| `time_format`          | 时间格式                                                     |\n| `use_date_for_updated` | 如果前面没有提供更新日期，则使用 `post.updated` 中的发布日期。通常与 Git 工作流一起使用。 |\n\n提醒\n\nHexo 使用 [Moment.js](http://momentjs.com/) 来解析和显示时间。\n\n## 分页\n\n```\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n```\n\n| 参数             | 描述                                |\n| ---------------- | ----------------------------------- |\n| `per_page`       | 每页显示的文章量 (0 = 关闭分页功能) |\n| `pagination_dir` | 分页目录                            |\n\n## 扩展\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: \ntheme_config: \ndeploy:\nmeta_generator:\n```\n\n| 参数             | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `theme`          | 当前主题名称。值为 `false` 时禁用主题                        |\n| `theme_config`   | 主题的配置文件。在这里放置的配置会覆盖主题目录下的 `_config.yml` 中的配置。 |\n| `deploy`         | 部署的设置                                                   |\n| `meta_generator` | [Meta generator](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7) 标签。 值为 `false` 时 Hexo 不会在头部插入该标签。 |\n\n提醒\n\n下一篇文章将会提到 部署。\n\n\n\n# Hexo 命令详解\n\n下面介绍一些 Hexo 的基本命令。\n\n### `hexo init [folder]`\n\n这个命令是 Hexo 初始化命令。`[folder]` 表示你要初始化的文件夹。如果你要初始化本地，直接 `hexo init .` 。\n\n### `hexo new [layout] <title>`\n\n这个命令是新建文章或页面用的命令。其中 `[layout]` 表示他的模板（即页面或者文章），`<title>` 表示标题。\n\n用法：\n\n1. `hexo new post 001` ，表示新建了一个标题为 `001` 的文章。\n2. `hexo new page 001` ，表示新建了一个标题为 `001` 的页面。\n\n如果你不想在终端中新建文章或页面，可以直接在 `博客根目录/source/_post/` 目录下创建 Markdown 文件写**文章**。或者在 `博客根目录/source/` 目录下创建一个文件夹，然后在新文件夹里创建 `index.md` 写**页面**即可。\n\n提醒\n\n当你新建页面后，页面的链接就是你页面所在的文件夹的名字。\n\n例如：我在 `博客根目录/source/` 下新建了一个名为 `test` 的文件夹，然后在 `test` 文件夹下写 Markdown 文件，那么这个页面的链接就是 `网址/test`。\n\n### `hexo server`\n\n当你要在本地查看网站的时候，就可以用这个命令。\n\n默认在 `http://localhost:8080/` 这里，可能会不同，注意提示信息即可。\n\n提醒\n\n如果你想要换端口号（上面的 `8080` 就是端口号），可以在终端里输入 `hexo s -p 端口号`。\n\n### `hexo generate`\n\n这个命令是生成网站静态文件的时候用的，生成后网页将会放在根目录下面的 `public` 文件夹里。\n\n### `hexo deploy`\n\n这个命令用来部署网站，使用此命令将会把生成好的页面（即 `public` 文件夹里的内容）部署到指定的地方上。\n\n### `hexo clean`\n\n这个命令用来清空 `public` 文件夹。\n\n### `hexo version`\n\n这个命令用来输出你所使用的 Hexo 目前的版本号\n\n# 部署到 GitHub\n\n### 准备工作\n\n1. 如果没有账号，请点此前往 [GitHub](https://github.com/) 注册一个 GitHub 账号。\n2. 新建一个公开仓库，仓库名格式为 `your_username.github.io` 例如你的 GitHub 用户名是 `easyhexo`，那么你的仓库地址名称就应该是 `easyhexo.github.io`\n3. 创建完成后记下该仓库的 HTTPS/SSH 地址 一般格式为 `https://github.com/your_username/your_reponame.git` 在下一步会用到。\n\n### 安装[部署插件](https://github.com/hexojs/hexo-deployer-git)\n\n```\n$ npm install hexo-deployer-git --save\n$ npm install hexo-server --save\n```\n\n### 配置 Git\n\n如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。\n\n```\n$ git config --global user.name \"Your_user_name\"\n$ git config --global user.email \"Your_email@example.com\"\n```\n\n提醒\n\n每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的~\n\n用户名和邮箱根据你注册github的信息自行修改。\n\n### 然后生成密钥SSH key：\n\n```\nssh-keygen -t rsa -C \"Your_email@example.com\"\n```\n\n打开[github](https://github.com/)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash中输入\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，出现你的用户名，那就成功了。\n\n\n\n### 配置站点 `_config.yml` 文件\n\n```\ndeploy:\n  type: git   # 类型填git\n  repo: <repository url> # 你的Github仓库地址\n  branch: master  # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。\n  message:  # 提交信息可以自定义，不填的则默认为提交时间\n```\n\n```\ndeploy:\n  type: git\n  repository: git@github.com:ThirtyZhang/ThirtyZhang.github.io.git\n  branch: master\n```\n\nrepository修改为你自己的github项目地址。**(最好使用SSH的地址,因为使用Http更换电脑后可能找不到该git地址)**\n\n### 发布到 GitHub\n\n在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。\n\n```\n$ hexo clean && hexo d -g\n```\n\n# 写文章、发布文章\n\n首先在博客根目录下右键打开git bash\n\n输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`博客根目录\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦\n\n## 创建文章命令详细介绍\n\n> `hexo new [layout]`\n>\n> 这个命令是新建文章或页面用的命令。其中 `[layout]` 表示他的模板（即页面或者文章），`<title>` 表示标题。\n>\n> 用法：\n>\n> 1. `hexo new post 001` ，表示新建了一个标题为 `001` 的文章。\n> 2. `hexo new page 001` ，表示新建了一个标题为 `001` 的页面。\n>\n> 如果你不想在终端中新建文章或页面，可以直接在 `博客根目录/source/_post/` 目录下创建 Markdown 文件写**文章**。或者在 `博客根目录/source/` 目录下创建一个文件夹，然后在新文件夹里创建 `index.md` 写**页面**即可。\n>\n> 提醒\n>\n> 当你新建页面后，页面的链接就是你页面所在的文件夹的名字。\n>\n> 例如：我在 `博客根目录/source/` 下新建了一个名为 `test` 的文件夹，然后在 `test` 文件夹下写 Markdown 文件，那么这个页面的链接就是 `网址/test`。\n\n\n\n# 推荐使用的主题链接\n\n推荐一个好用的主题地址\n\n[自己克隆的](https://github.com/ThirtyZhang/hexo-theme-matery)\n\n[原版的](https://github.com/blinkfox/hexo-theme-matery )\n\n下载后将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可\n\n然后参照其中的`DEADME-CN.md`文件进行配置\n\n# 最后我搭建好的成品效果图\n\n我个人的博客地址 : [点击访问](https://thirtyzhang.github.io/)\n\n![MyBlog](1579682303863.png)\n\n# 收藏博客\n\n**[milyyy](https://milyyy.github.io/)**\n\n[闪烁之狐](https://blinkfox.github.io/)\n\n[韦阳的博客](https://godweiyang.com/)\n\n# 备份博客源文件\n\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n\n首先在github博客仓库下新建一个分支`hexo`，然后`git clone`到本地，把`.git`文件夹拿出来，放在博客根目录下。\n\n然后`git checkout hexo`切换到`hexo`分支，然后`git add .`，然后\n\n，最后`git push origin hexo`提交就行了。\n\n# 推荐另一个教程作参考\n\n## Hexo+Github博客搭建 完整小白教程\n\n<https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10> \n\n\n\n**更多细节可查看官方文档** : [hexo](https://hexo.io/zh-cn/docs/configuration)\n\n\n\n# 遇到的问题解决办法\n\n## 端口占用\n\n- 提示“FATAL Port 4000 has been used. Try other port instead.”\n   在使用了$ hexo s命令预览博客效果后使用Control+C关闭\n   解决办法：\n\n还不行就重新手动制定端口号\n\n```\n$ hexo s -p 5000\n```\n\n##   未安装git部署插件\n\n- 提示“ERROR Deployer not found: git”\n  解决办法：\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n \n\n##  每次hexo d 提交到GitHub 都会发送警告邮件\n\n**Page build warning：Cannot use CNAMEs ending with github.io or github.com**\n\n总结写在前面,如果你没有绑定域名,而是克隆的别人的文件,直接删除掉就可以了\n\n路径 : `博客根目录/source`\n\n![CNAME](1579706750493.png)\n\n然后重新依次执行:\n\n```powershell\nhexo clean\nhexo g\nhexo d\n```\n\n就不会受到警告邮件了.\n\n\n\n​       在设计自己blog的时候，大家都会先借鉴一下[jkell模板](http://jekyllthemes.org/)吧。我的这个blog也先clone了别人的架构，接下来慢慢修改填充自己的想法。\n\n​       在我每次向github的远程仓库提交更新的时候，总会收到一封邮件：\n\n>  The page build completed successfully, but returned the following warning for the `master` branch:You cannot use CNAMEs ending with github.io or github.com. Instead, create a repository named ThirtyZhang.github.io. See https://help.github.com/articles/setting-up-your-pages-site-repository/\n>\n>  For information on troubleshooting Jekyll see:\n>\n>  https://help.github.com/articles/troubleshooting-jekyll-builds\n>\n>  If you have any questions you can contact us by replying to this email.\n\n大概就是表示您不能使用以`github.io` 或者 `github.com` 结尾的CNAMEs文件 ,创建一个名为ThirtyZhang.github.io的存储库代替\n\n刚接触[jekyll](http://jekyll.bootcss.com/)不久，对它的构建结构和语法都不是特别熟悉。访问了邮件中的链接，我发现这并不能解决我的问题。虽然有warning但是无伤大雅，毕竟程序员不怎么care warning。But 每次更新代码，都要收到github的邮件，我是不能忍受的！！！(*>﹏<*)\n\n​       于是乎好好研究了下jekyll的目录结构以及CNAME，原来CNAME是用来绑定域名的。\n\n**绑定到一级域名**\n\n1. 首先在项目根目录下创建一个叫CNAME文件，里面写上自己的以及一级域名(www.youdomain.com)\n2. 在你的域名管理页或者是DNS解析的地方，增加一个记录，记录类别为CNAME(Alias)类型。i.e.在DNS中为自己的域名增加一条A记录，指向207.97.227.245（github服务器）。\n3. 将项目提交到github上, wait a minute\n4. baseurl应该为”/”\n5. 访问自己的域名,check一下\n\n**绑定到二级域名**\n\n​       需要额外在DNS中增加一条CNAME，指向(github用户名).github.io，然后再CNAME文件中修改为自己的二级域名即可\n\n​       有关这个问题的[github官方帮助文档](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)\n\n​       之前clone jekyll模板的时候在项目中有个CNAME文件，刚开始不知道它的而作用就保留了。我还没有申请域名，现在看来这个文件不仅unnecessary而且是trouble maker。删除这个文件就没有警告了。O(∩_∩)O\n\n## python3安装PIL失败\n\nPIL其实只是python2的专利，它并没有跟随python的进化而进化。有大师为此，专门写了一个针对python3的pillow模块。\n\n所以，如果需要安装python3对应的PIL，应该选择安装`pillow`。\n\n---\n\n**如果文章对您有帮助,希望可以点击下方的打`赏`.**","source":"_posts/Hexo搭建个人博客.md","raw":"---\ntitle: Hexo搭建个人博客\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-01-21 16:58:04\npassword:\nsummary: Hexo 是一个快速、简洁且高效的博客框架\ntags: \n- 框架\ncategories:\n- 效率\n---\n\n\n\n<div  align = \"center\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=864622002&auto=1&height=66\"></iframe></div>\n\n# 安装\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速,不使用的话可能会有下载过慢或下载失败的问题\n\n```powershell\n$ npm config set registry https://registry.npm.taobao.org\n```\n\n## 认识 Hexo\n\n> Hexo 是一个快速、简洁且高效的博客框架，可以让你快速建立一个博客。\n\n> Hexo 使用 Node.js 编写。得益于 Node.js，使得 Hexo 生成上百个页面游刃有余。\n\n> Hexo 支持 GFM (GitHub Flavored Markdown) 的大部分功能。如果你不喜欢 Markdown ，你还可以换一个 Hexo 渲染插件。\n\n> Hexo 有许多插件，可以进行各种操作。\n\n## 学习 Hexo 之前，你需要有：\n\n- Node.js 基本知识\n- Git 基本知识\n- Markdown 基本知识\n- Html、css、JavaScript 基本知识\n- ······\n\n当然了，你可别被吓跑了。除了 Markdown ，其他都不用熟练掌握（事实上如果你不注意排版连 Markdown 都不用掌握，但最好还是学学吧 : **[Markdown语法 ](https://thirtyzhang.github.io/2020/01/21/markdown-yu-fa/)**）。如果你完全不会以上划线部分的知识，也没关系。只是简单地建个可以发文章的博客就好了。如果你要更上一层楼，那么以上被划掉的知识就是必备的啦~\n\n## 安装 Hexo\n\n在安装 Hexo 之前，你需要安装以下两个工具：\n\n- **[Git](https://git-scm.com/)**\n- **[Node.js](https://nodejs.org/)**\n\n## 安装 Git\n\n- Windows：下载并安装 [git](https://git-scm.com/download/win).\n- Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/) ：`brew install git`;或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装。\n- Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n- Linux (Arch 系列)：`sudo pacman -S git`\n\n提醒\n\n由于墙的原因，从上面的链接下载 git for windows 最好挂上一个代理，否则下载速度十分缓慢。也可以参考[这个页面](https://github.com/waylau/git-for-win)，收录了存储于百度云的下载地址。\n\n提醒\n\n如果你是 CentOS 服务器上的，可以直接使用 [HexoOneClickInstallation](https://github.com/PasserByJia/HexoOneClickInstallation) 这个脚本快速安装 Hexo。\n\n## 安装 Node.js\n\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。\n\ncURL:\n\n```powershell\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\nWget:\n\n```powershell\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\n```powershell\n$ nvm install stable\n```\n\n或者您也可以下载 [安装程序](http://nodejs.org/) 来安装。\n\n## 安装 Hexo\n\n安装好后，即可使用 npm 完成 Hexo 的安装。\n\n```powershell\n# 下面这两个命令好像是一样的效果,任选一个就可以了\n$ npm install -g hexo-cli\n$ npm install hexo-cli -g\n```\n输入`npm install`安装必备的组件 \n\n# 配置\n\n## 建立网站\n\n安装好 Hexo 后即可建立你的网站。\n\n首先建立一个文件夹。\n\n```powershell\nmkdir <your_blog_name>  # 建立你的网站根目录，名字可以自己修改\n```\n\n然后往这个文件夹里安装 Hexo。\n\n```powershell\nhexo init <your_blog_name>\n```\n\n再执行\n\n```powershell\nhexo s\n```\n\n浏览器输入\n\n```powershell\nhttp://localhost:4000/\n```\n\n就可以本地访问了\n\n这样就建立好网站了！\n\n**网站建立好后还需要做一些个性化配置,如:修改网站默认内容改为自己的内容**\n\n此部分内容可能过期，请见 [Hexo 官方文档](https://hexo.io/zh-cn/docs/configuration)。\n\n在 Hexo 根目录 `_config.yml` 这个文件里配置！\n\n警告\n\n在 YAML 语法中，冒号后面必须要有一个空格才能继续写下去。\n\n### 网站\n\n```\n# Site\ntitle:            \nsubtitle: \ndescription: \nkeywords:\nauthor: \nlanguage: \ntimezone: \n```\n\n| 参数          | 描述                                                         |\n| ------------- | ------------------------------------------------------------ |\n| `title`       | 网站标题                                                     |\n| `subtitle`    | 网站副标题                                                   |\n| `description` | 网站描述                                                     |\n| `keywords`    | 网站关键词                                                   |\n| `author`      | 作者名字                                                     |\n| `language`    | 网站使用的语言                                               |\n| `timezone`    | 网站时区：详见[时区列表](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) |\n\n### URL\n\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: \nroot: \npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailiing_index: true\n```\n\n| 参数                         | 描述                                                    |\n| ---------------------------- | ------------------------------------------------------- |\n| `url`                        | 网址                                                    |\n| `root`                       | 网站根目录                                              |\n| `permalink`                  | 文章的永久链接格式                                      |\n| `permalink_defaults`         | 永久链接中各部分的默认值                                |\n| `pretty_urls`                | 改写 `permalink` 的值来美化 URL                         |\n| `pretty_urls.trailing_index` | 是否在永久链接中保留尾部的 `index.html`，`false` 时去除 |\n\n提醒\n\n如果你的网站在子目录中，如：`https://yoursite.com/blog` ，就把你的 `url` 设为 `http://yoursite.com/blog` 并把 `root` 设为 `/blog/`。\n\n例如：\n\n```\n# 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html\npretty_urls:\n  trailing_index: false\n# 此时页面的永久链接会变为 http://example.com/foo/bar/\n```\n\n### 目录\n\n```\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render: README.md\n```\n\n| 参数           | 描述                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `source_dir`   | 资源文件夹                                                   |\n| `public_dir`   | 公共文件夹                                                   |\n| `tag_dir`      | 标签文件夹                                                   |\n| `archive_dir`  | 归档文件夹                                                   |\n| `category_dir` | 分类文件夹                                                   |\n| `code_dir`     | Include code 文件夹                                          |\n| `i18n_dir`     | 国际化文件夹                                                 |\n| `skip_render`  | 跳过文件的渲染。匹配到的文件将直接复制到 `public` 目录中。您可使用 [glob](https://github.com/micromatch/micromatch#extended-globbing) 表达式来匹配路径。 |\n\n提醒\n\n一般情况下，这部分是不需要修改的。\n\n例如：\n\n```\nskip_render: \"mypage/**/*\"\n# 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 'public' 目录\n# 你也可以用这种方法来跳过对指定文章文件的渲染\nskip_render: \"_posts/test-post.md\"\n# 这将会忽略对 'test-post.md' 的渲染\n```\n\n### 文章\n\n```\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\n  enable: true\n  field: site\n  exclude: []\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n```\n\n| 参数                    | 描述                                                         |\n| ----------------------- | ------------------------------------------------------------ |\n| `new_post_name`         | 新文章的文件名称                                             |\n| `default_layout`        | 预设布局                                                     |\n| `auto_spacing`          | 在中文和英文之间加入空格                                     |\n| `titlecase`             | 把标题转换为 title case                                      |\n| `external_link`         | 在新标签中打开链接                                           |\n| `external_link.enable`  | 在新标签中打开链接                                           |\n| `external_link.field`   | 适用于整个网站或仅文章                                       |\n| `external_link.exclude` | 排除主机名。在适用时指定子域，包括 `www`                     |\n| `filename_case`         | 把文件名称转换为 (1) 小写或 (2) 大写                         |\n| `render_drafts`         | 显示草稿                                                     |\n| `post_asset_folder`     | 启动 [Asset 文件夹](https://hexo.io/zh-cn/docs/asset-folders) |\n| `relative_link`         | 把链接改为与根目录的相对位址                                 |\n| `future`                | 显示未来的文章                                               |\n| `highlight`             | 代码块的设置                                                 |\n| `highlight.enable`      | 开启语法高亮                                                 |\n| `highlight.auto_detect` | 如果未指定语言，则启用自动检测                               |\n| `highlight.line_number` | 显示行数                                                     |\n| `highlight.tab_replace` | 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs            |\n\n### 分类 & 标签\n\n```\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n```\n\n| 参数               | 描述     |\n| ------------------ | -------- |\n| `default_category` | 默认分类 |\n| `category_map`     | 分类别名 |\n| `tag_map`          | 标签别名 |\n\n### 日期 / 时间格式\n\n```\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\nuse_date_for_updated: true\n```\n\n| 参数                   | 描述                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| `date_format`          | 日期格式                                                     |\n| `time_format`          | 时间格式                                                     |\n| `use_date_for_updated` | 如果前面没有提供更新日期，则使用 `post.updated` 中的发布日期。通常与 Git 工作流一起使用。 |\n\n提醒\n\nHexo 使用 [Moment.js](http://momentjs.com/) 来解析和显示时间。\n\n## 分页\n\n```\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n```\n\n| 参数             | 描述                                |\n| ---------------- | ----------------------------------- |\n| `per_page`       | 每页显示的文章量 (0 = 关闭分页功能) |\n| `pagination_dir` | 分页目录                            |\n\n## 扩展\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: \ntheme_config: \ndeploy:\nmeta_generator:\n```\n\n| 参数             | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `theme`          | 当前主题名称。值为 `false` 时禁用主题                        |\n| `theme_config`   | 主题的配置文件。在这里放置的配置会覆盖主题目录下的 `_config.yml` 中的配置。 |\n| `deploy`         | 部署的设置                                                   |\n| `meta_generator` | [Meta generator](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7) 标签。 值为 `false` 时 Hexo 不会在头部插入该标签。 |\n\n提醒\n\n下一篇文章将会提到 部署。\n\n\n\n# Hexo 命令详解\n\n下面介绍一些 Hexo 的基本命令。\n\n### `hexo init [folder]`\n\n这个命令是 Hexo 初始化命令。`[folder]` 表示你要初始化的文件夹。如果你要初始化本地，直接 `hexo init .` 。\n\n### `hexo new [layout] <title>`\n\n这个命令是新建文章或页面用的命令。其中 `[layout]` 表示他的模板（即页面或者文章），`<title>` 表示标题。\n\n用法：\n\n1. `hexo new post 001` ，表示新建了一个标题为 `001` 的文章。\n2. `hexo new page 001` ，表示新建了一个标题为 `001` 的页面。\n\n如果你不想在终端中新建文章或页面，可以直接在 `博客根目录/source/_post/` 目录下创建 Markdown 文件写**文章**。或者在 `博客根目录/source/` 目录下创建一个文件夹，然后在新文件夹里创建 `index.md` 写**页面**即可。\n\n提醒\n\n当你新建页面后，页面的链接就是你页面所在的文件夹的名字。\n\n例如：我在 `博客根目录/source/` 下新建了一个名为 `test` 的文件夹，然后在 `test` 文件夹下写 Markdown 文件，那么这个页面的链接就是 `网址/test`。\n\n### `hexo server`\n\n当你要在本地查看网站的时候，就可以用这个命令。\n\n默认在 `http://localhost:8080/` 这里，可能会不同，注意提示信息即可。\n\n提醒\n\n如果你想要换端口号（上面的 `8080` 就是端口号），可以在终端里输入 `hexo s -p 端口号`。\n\n### `hexo generate`\n\n这个命令是生成网站静态文件的时候用的，生成后网页将会放在根目录下面的 `public` 文件夹里。\n\n### `hexo deploy`\n\n这个命令用来部署网站，使用此命令将会把生成好的页面（即 `public` 文件夹里的内容）部署到指定的地方上。\n\n### `hexo clean`\n\n这个命令用来清空 `public` 文件夹。\n\n### `hexo version`\n\n这个命令用来输出你所使用的 Hexo 目前的版本号\n\n# 部署到 GitHub\n\n### 准备工作\n\n1. 如果没有账号，请点此前往 [GitHub](https://github.com/) 注册一个 GitHub 账号。\n2. 新建一个公开仓库，仓库名格式为 `your_username.github.io` 例如你的 GitHub 用户名是 `easyhexo`，那么你的仓库地址名称就应该是 `easyhexo.github.io`\n3. 创建完成后记下该仓库的 HTTPS/SSH 地址 一般格式为 `https://github.com/your_username/your_reponame.git` 在下一步会用到。\n\n### 安装[部署插件](https://github.com/hexojs/hexo-deployer-git)\n\n```\n$ npm install hexo-deployer-git --save\n$ npm install hexo-server --save\n```\n\n### 配置 Git\n\n如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。\n\n```\n$ git config --global user.name \"Your_user_name\"\n$ git config --global user.email \"Your_email@example.com\"\n```\n\n提醒\n\n每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的~\n\n用户名和邮箱根据你注册github的信息自行修改。\n\n### 然后生成密钥SSH key：\n\n```\nssh-keygen -t rsa -C \"Your_email@example.com\"\n```\n\n打开[github](https://github.com/)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash中输入\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，出现你的用户名，那就成功了。\n\n\n\n### 配置站点 `_config.yml` 文件\n\n```\ndeploy:\n  type: git   # 类型填git\n  repo: <repository url> # 你的Github仓库地址\n  branch: master  # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。\n  message:  # 提交信息可以自定义，不填的则默认为提交时间\n```\n\n```\ndeploy:\n  type: git\n  repository: git@github.com:ThirtyZhang/ThirtyZhang.github.io.git\n  branch: master\n```\n\nrepository修改为你自己的github项目地址。**(最好使用SSH的地址,因为使用Http更换电脑后可能找不到该git地址)**\n\n### 发布到 GitHub\n\n在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。\n\n```\n$ hexo clean && hexo d -g\n```\n\n# 写文章、发布文章\n\n首先在博客根目录下右键打开git bash\n\n输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`博客根目录\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦\n\n## 创建文章命令详细介绍\n\n> `hexo new [layout]`\n>\n> 这个命令是新建文章或页面用的命令。其中 `[layout]` 表示他的模板（即页面或者文章），`<title>` 表示标题。\n>\n> 用法：\n>\n> 1. `hexo new post 001` ，表示新建了一个标题为 `001` 的文章。\n> 2. `hexo new page 001` ，表示新建了一个标题为 `001` 的页面。\n>\n> 如果你不想在终端中新建文章或页面，可以直接在 `博客根目录/source/_post/` 目录下创建 Markdown 文件写**文章**。或者在 `博客根目录/source/` 目录下创建一个文件夹，然后在新文件夹里创建 `index.md` 写**页面**即可。\n>\n> 提醒\n>\n> 当你新建页面后，页面的链接就是你页面所在的文件夹的名字。\n>\n> 例如：我在 `博客根目录/source/` 下新建了一个名为 `test` 的文件夹，然后在 `test` 文件夹下写 Markdown 文件，那么这个页面的链接就是 `网址/test`。\n\n\n\n# 推荐使用的主题链接\n\n推荐一个好用的主题地址\n\n[自己克隆的](https://github.com/ThirtyZhang/hexo-theme-matery)\n\n[原版的](https://github.com/blinkfox/hexo-theme-matery )\n\n下载后将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可\n\n然后参照其中的`DEADME-CN.md`文件进行配置\n\n# 最后我搭建好的成品效果图\n\n我个人的博客地址 : [点击访问](https://thirtyzhang.github.io/)\n\n![MyBlog](1579682303863.png)\n\n# 收藏博客\n\n**[milyyy](https://milyyy.github.io/)**\n\n[闪烁之狐](https://blinkfox.github.io/)\n\n[韦阳的博客](https://godweiyang.com/)\n\n# 备份博客源文件\n\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n\n首先在github博客仓库下新建一个分支`hexo`，然后`git clone`到本地，把`.git`文件夹拿出来，放在博客根目录下。\n\n然后`git checkout hexo`切换到`hexo`分支，然后`git add .`，然后\n\n，最后`git push origin hexo`提交就行了。\n\n# 推荐另一个教程作参考\n\n## Hexo+Github博客搭建 完整小白教程\n\n<https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10> \n\n\n\n**更多细节可查看官方文档** : [hexo](https://hexo.io/zh-cn/docs/configuration)\n\n\n\n# 遇到的问题解决办法\n\n## 端口占用\n\n- 提示“FATAL Port 4000 has been used. Try other port instead.”\n   在使用了$ hexo s命令预览博客效果后使用Control+C关闭\n   解决办法：\n\n还不行就重新手动制定端口号\n\n```\n$ hexo s -p 5000\n```\n\n##   未安装git部署插件\n\n- 提示“ERROR Deployer not found: git”\n  解决办法：\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n \n\n##  每次hexo d 提交到GitHub 都会发送警告邮件\n\n**Page build warning：Cannot use CNAMEs ending with github.io or github.com**\n\n总结写在前面,如果你没有绑定域名,而是克隆的别人的文件,直接删除掉就可以了\n\n路径 : `博客根目录/source`\n\n![CNAME](1579706750493.png)\n\n然后重新依次执行:\n\n```powershell\nhexo clean\nhexo g\nhexo d\n```\n\n就不会受到警告邮件了.\n\n\n\n​       在设计自己blog的时候，大家都会先借鉴一下[jkell模板](http://jekyllthemes.org/)吧。我的这个blog也先clone了别人的架构，接下来慢慢修改填充自己的想法。\n\n​       在我每次向github的远程仓库提交更新的时候，总会收到一封邮件：\n\n>  The page build completed successfully, but returned the following warning for the `master` branch:You cannot use CNAMEs ending with github.io or github.com. Instead, create a repository named ThirtyZhang.github.io. See https://help.github.com/articles/setting-up-your-pages-site-repository/\n>\n>  For information on troubleshooting Jekyll see:\n>\n>  https://help.github.com/articles/troubleshooting-jekyll-builds\n>\n>  If you have any questions you can contact us by replying to this email.\n\n大概就是表示您不能使用以`github.io` 或者 `github.com` 结尾的CNAMEs文件 ,创建一个名为ThirtyZhang.github.io的存储库代替\n\n刚接触[jekyll](http://jekyll.bootcss.com/)不久，对它的构建结构和语法都不是特别熟悉。访问了邮件中的链接，我发现这并不能解决我的问题。虽然有warning但是无伤大雅，毕竟程序员不怎么care warning。But 每次更新代码，都要收到github的邮件，我是不能忍受的！！！(*>﹏<*)\n\n​       于是乎好好研究了下jekyll的目录结构以及CNAME，原来CNAME是用来绑定域名的。\n\n**绑定到一级域名**\n\n1. 首先在项目根目录下创建一个叫CNAME文件，里面写上自己的以及一级域名(www.youdomain.com)\n2. 在你的域名管理页或者是DNS解析的地方，增加一个记录，记录类别为CNAME(Alias)类型。i.e.在DNS中为自己的域名增加一条A记录，指向207.97.227.245（github服务器）。\n3. 将项目提交到github上, wait a minute\n4. baseurl应该为”/”\n5. 访问自己的域名,check一下\n\n**绑定到二级域名**\n\n​       需要额外在DNS中增加一条CNAME，指向(github用户名).github.io，然后再CNAME文件中修改为自己的二级域名即可\n\n​       有关这个问题的[github官方帮助文档](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)\n\n​       之前clone jekyll模板的时候在项目中有个CNAME文件，刚开始不知道它的而作用就保留了。我还没有申请域名，现在看来这个文件不仅unnecessary而且是trouble maker。删除这个文件就没有警告了。O(∩_∩)O\n\n## python3安装PIL失败\n\nPIL其实只是python2的专利，它并没有跟随python的进化而进化。有大师为此，专门写了一个针对python3的pillow模块。\n\n所以，如果需要安装python3对应的PIL，应该选择安装`pillow`。\n\n---\n\n**如果文章对您有帮助,希望可以点击下方的打`赏`.**","slug":"Hexo搭建个人博客","published":1,"updated":"2020-02-29T17:06:00.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkdq0007wcq4iqk3uduh","content":"<div align=\"center\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=864622002&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速,不使用的话可能会有下载过慢或下载失败的问题</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ npm config <span class=\"token function\">set</span> registry https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>registry<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"认识-Hexo\"><a href=\"#认识-Hexo\" class=\"headerlink\" title=\"认识 Hexo\"></a>认识 Hexo</h2><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架，可以让你快速建立一个博客。</p>\n</blockquote>\n<blockquote>\n<p>Hexo 使用 Node.js 编写。得益于 Node.js，使得 Hexo 生成上百个页面游刃有余。</p>\n</blockquote>\n<blockquote>\n<p>Hexo 支持 GFM (GitHub Flavored Markdown) 的大部分功能。如果你不喜欢 Markdown ，你还可以换一个 Hexo 渲染插件。</p>\n</blockquote>\n<blockquote>\n<p>Hexo 有许多插件，可以进行各种操作。</p>\n</blockquote>\n<h2 id=\"学习-Hexo-之前，你需要有：\"><a href=\"#学习-Hexo-之前，你需要有：\" class=\"headerlink\" title=\"学习 Hexo 之前，你需要有：\"></a>学习 Hexo 之前，你需要有：</h2><ul>\n<li>Node.js 基本知识</li>\n<li>Git 基本知识</li>\n<li>Markdown 基本知识</li>\n<li>Html、css、JavaScript 基本知识</li>\n<li>······</li>\n</ul>\n<p>当然了，你可别被吓跑了。除了 Markdown ，其他都不用熟练掌握（事实上如果你不注意排版连 Markdown 都不用掌握，但最好还是学学吧 : <strong><a href=\"https://thirtyzhang.github.io/2020/01/21/markdown-yu-fa/\">Markdown语法 </a></strong>）。如果你完全不会以上划线部分的知识，也没关系。只是简单地建个可以发文章的博客就好了。如果你要更上一层楼，那么以上被划掉的知识就是必备的啦~</p>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>在安装 Hexo 之前，你需要安装以下两个工具：</p>\n<ul>\n<li><strong><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></strong></li>\n<li><strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a></strong></li>\n</ul>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>;或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n<li>Linux (Arch 系列)：<code>sudo pacman -S git</code></li>\n</ul>\n<p>提醒</p>\n<p>由于墙的原因，从上面的链接下载 git for windows 最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">这个页面</a>，收录了存储于百度云的下载地址。</p>\n<p>提醒</p>\n<p>如果你是 CentOS 服务器上的，可以直接使用 <a href=\"https://github.com/PasserByJia/HexoOneClickInstallation\" target=\"_blank\" rel=\"noopener\">HexoOneClickInstallation</a> 这个脚本快速安装 Hexo。</p>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。</p>\n<p>cURL:</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ curl https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>raw<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>creationix<span class=\"token operator\">/</span>nvm<span class=\"token operator\">/</span>v0<span class=\"token punctuation\">.</span>33<span class=\"token punctuation\">.</span>11<span class=\"token operator\">/</span>install<span class=\"token punctuation\">.</span>sh <span class=\"token punctuation\">|</span> sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Wget:</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ wget <span class=\"token operator\">-</span>qO<span class=\"token operator\">-</span> https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>raw<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>creationix<span class=\"token operator\">/</span>nvm<span class=\"token operator\">/</span>v0<span class=\"token punctuation\">.</span>33<span class=\"token punctuation\">.</span>11<span class=\"token operator\">/</span>install<span class=\"token punctuation\">.</span>sh <span class=\"token punctuation\">|</span> sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ nvm install stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者您也可以下载 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 来安装。</p>\n<h2 id=\"安装-Hexo-1\"><a href=\"#安装-Hexo-1\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>安装好后，即可使用 npm 完成 Hexo 的安装。</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\" spellcheck=\"true\"># 下面这两个命令好像是一样的效果,任选一个就可以了</span>\n$ npm install <span class=\"token operator\">-</span>g hexo<span class=\"token operator\">-</span><span class=\"token function\">cli</span>\n$ npm install hexo<span class=\"token operator\">-</span><span class=\"token function\">cli</span> <span class=\"token operator\">-</span>g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>输入<code>npm install</code>安装必备的组件 </p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"建立网站\"><a href=\"#建立网站\" class=\"headerlink\" title=\"建立网站\"></a>建立网站</h2><p>安装好 Hexo 后即可建立你的网站。</p>\n<p>首先建立一个文件夹。</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">mkdir &lt;your_blog_name>  <span class=\"token comment\" spellcheck=\"true\"># 建立你的网站根目录，名字可以自己修改</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后往这个文件夹里安装 Hexo。</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">hexo init &lt;your_blog_name><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再执行</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览器输入</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost:4000<span class=\"token operator\">/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就可以本地访问了</p>\n<p>这样就建立好网站了！</p>\n<p><strong>网站建立好后还需要做一些个性化配置,如:修改网站默认内容改为自己的内容</strong></p>\n<p>此部分内容可能过期，请见 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">Hexo 官方文档</a>。</p>\n<p>在 Hexo 根目录 <code>_config.yml</code> 这个文件里配置！</p>\n<p>警告</p>\n<p>在 YAML 语法中，冒号后面必须要有一个空格才能继续写下去。</p>\n<h3 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h3><pre><code># Site\ntitle:            \nsubtitle: \ndescription: \nkeywords:\nauthor: \nlanguage: \ntimezone: </code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>title</code></td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td><code>subtitle</code></td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td><code>keywords</code></td>\n<td>网站关键词</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td>作者名字</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td><code>timezone</code></td>\n<td>网站时区：详见<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><pre><code># URL\n## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;\nurl: \nroot: \npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailiing_index: true</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td>网址</td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td>网站根目录</td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>文章的永久链接格式</td>\n</tr>\n<tr>\n<td><code>permalink_defaults</code></td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n<tr>\n<td><code>pretty_urls</code></td>\n<td>改写 <code>permalink</code> 的值来美化 URL</td>\n</tr>\n<tr>\n<td><code>pretty_urls.trailing_index</code></td>\n<td>是否在永久链接中保留尾部的 <code>index.html</code>，<code>false</code> 时去除</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>如果你的网站在子目录中，如：<code>https://yoursite.com/blog</code> ，就把你的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>\n<p>例如：</p>\n<pre><code># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html\npretty_urls:\n  trailing_index: false\n# 此时页面的永久链接会变为 http://example.com/foo/bar/</code></pre><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><pre><code># Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render: README.md</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>source_dir</code></td>\n<td>资源文件夹</td>\n</tr>\n<tr>\n<td><code>public_dir</code></td>\n<td>公共文件夹</td>\n</tr>\n<tr>\n<td><code>tag_dir</code></td>\n<td>标签文件夹</td>\n</tr>\n<tr>\n<td><code>archive_dir</code></td>\n<td>归档文件夹</td>\n</tr>\n<tr>\n<td><code>category_dir</code></td>\n<td>分类文件夹</td>\n</tr>\n<tr>\n<td><code>code_dir</code></td>\n<td>Include code 文件夹</td>\n</tr>\n<tr>\n<td><code>i18n_dir</code></td>\n<td>国际化文件夹</td>\n</tr>\n<tr>\n<td><code>skip_render</code></td>\n<td>跳过文件的渲染。匹配到的文件将直接复制到 <code>public</code> 目录中。您可使用 <a href=\"https://github.com/micromatch/micromatch#extended-globbing\" target=\"_blank\" rel=\"noopener\">glob</a> 表达式来匹配路径。</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>一般情况下，这部分是不需要修改的。</p>\n<p>例如：</p>\n<pre><code>skip_render: &quot;mypage/**/*&quot;\n# 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#39;public&#39; 目录\n# 你也可以用这种方法来跳过对指定文章文件的渲染\nskip_render: &quot;_posts/test-post.md&quot;\n# 这将会忽略对 &#39;test-post.md&#39; 的渲染</code></pre><h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><pre><code># Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\n  enable: true\n  field: site\n  exclude: []\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>new_post_name</code></td>\n<td>新文章的文件名称</td>\n</tr>\n<tr>\n<td><code>default_layout</code></td>\n<td>预设布局</td>\n</tr>\n<tr>\n<td><code>auto_spacing</code></td>\n<td>在中文和英文之间加入空格</td>\n</tr>\n<tr>\n<td><code>titlecase</code></td>\n<td>把标题转换为 title case</td>\n</tr>\n<tr>\n<td><code>external_link</code></td>\n<td>在新标签中打开链接</td>\n</tr>\n<tr>\n<td><code>external_link.enable</code></td>\n<td>在新标签中打开链接</td>\n</tr>\n<tr>\n<td><code>external_link.field</code></td>\n<td>适用于整个网站或仅文章</td>\n</tr>\n<tr>\n<td><code>external_link.exclude</code></td>\n<td>排除主机名。在适用时指定子域，包括 <code>www</code></td>\n</tr>\n<tr>\n<td><code>filename_case</code></td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n</tr>\n<tr>\n<td><code>render_drafts</code></td>\n<td>显示草稿</td>\n</tr>\n<tr>\n<td><code>post_asset_folder</code></td>\n<td>启动 <a href=\"https://hexo.io/zh-cn/docs/asset-folders\" target=\"_blank\" rel=\"noopener\">Asset 文件夹</a></td>\n</tr>\n<tr>\n<td><code>relative_link</code></td>\n<td>把链接改为与根目录的相对位址</td>\n</tr>\n<tr>\n<td><code>future</code></td>\n<td>显示未来的文章</td>\n</tr>\n<tr>\n<td><code>highlight</code></td>\n<td>代码块的设置</td>\n</tr>\n<tr>\n<td><code>highlight.enable</code></td>\n<td>开启语法高亮</td>\n</tr>\n<tr>\n<td><code>highlight.auto_detect</code></td>\n<td>如果未指定语言，则启用自动检测</td>\n</tr>\n<tr>\n<td><code>highlight.line_number</code></td>\n<td>显示行数</td>\n</tr>\n<tr>\n<td><code>highlight.tab_replace</code></td>\n<td>用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</td>\n</tr>\n</tbody></table>\n<h3 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h3><pre><code># Category &amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default_category</code></td>\n<td>默认分类</td>\n</tr>\n<tr>\n<td><code>category_map</code></td>\n<td>分类别名</td>\n</tr>\n<tr>\n<td><code>tag_map</code></td>\n<td>标签别名</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h3><pre><code># Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\nuse_date_for_updated: true</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>date_format</code></td>\n<td>日期格式</td>\n</tr>\n<tr>\n<td><code>time_format</code></td>\n<td>时间格式</td>\n</tr>\n<tr>\n<td><code>use_date_for_updated</code></td>\n<td>如果前面没有提供更新日期，则使用 <code>post.updated</code> 中的发布日期。通常与 Git 工作流一起使用。</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>Hexo 使用 <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment.js</a> 来解析和显示时间。</p>\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><pre><code># Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>per_page</code></td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n</tr>\n<tr>\n<td><code>pagination_dir</code></td>\n<td>分页目录</td>\n</tr>\n</tbody></table>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><pre><code># Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: \ntheme_config: \ndeploy:\nmeta_generator:</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>theme</code></td>\n<td>当前主题名称。值为 <code>false</code> 时禁用主题</td>\n</tr>\n<tr>\n<td><code>theme_config</code></td>\n<td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置。</td>\n</tr>\n<tr>\n<td><code>deploy</code></td>\n<td>部署的设置</td>\n</tr>\n<tr>\n<td><code>meta_generator</code></td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签。</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>下一篇文章将会提到 部署。</p>\n<h1 id=\"Hexo-命令详解\"><a href=\"#Hexo-命令详解\" class=\"headerlink\" title=\"Hexo 命令详解\"></a>Hexo 命令详解</h1><p>下面介绍一些 Hexo 的基本命令。</p>\n<h3 id=\"hexo-init-folder\"><a href=\"#hexo-init-folder\" class=\"headerlink\" title=\"hexo init [folder]\"></a><code>hexo init [folder]</code></h3><p>这个命令是 Hexo 初始化命令。<code>[folder]</code> 表示你要初始化的文件夹。如果你要初始化本地，直接 <code>hexo init .</code> 。</p>\n<h3 id=\"hexo-new-layout-lt-title-gt\"><a href=\"#hexo-new-layout-lt-title-gt\" class=\"headerlink\" title=\"hexo new [layout] &lt;title&gt;\"></a><code>hexo new [layout] &lt;title&gt;</code></h3><p>这个命令是新建文章或页面用的命令。其中 <code>[layout]</code> 表示他的模板（即页面或者文章），<code>&lt;title&gt;</code> 表示标题。</p>\n<p>用法：</p>\n<ol>\n<li><code>hexo new post 001</code> ，表示新建了一个标题为 <code>001</code> 的文章。</li>\n<li><code>hexo new page 001</code> ，表示新建了一个标题为 <code>001</code> 的页面。</li>\n</ol>\n<p>如果你不想在终端中新建文章或页面，可以直接在 <code>博客根目录/source/_post/</code> 目录下创建 Markdown 文件写<strong>文章</strong>。或者在 <code>博客根目录/source/</code> 目录下创建一个文件夹，然后在新文件夹里创建 <code>index.md</code> 写<strong>页面</strong>即可。</p>\n<p>提醒</p>\n<p>当你新建页面后，页面的链接就是你页面所在的文件夹的名字。</p>\n<p>例如：我在 <code>博客根目录/source/</code> 下新建了一个名为 <code>test</code> 的文件夹，然后在 <code>test</code> 文件夹下写 Markdown 文件，那么这个页面的链接就是 <code>网址/test</code>。</p>\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a><code>hexo server</code></h3><p>当你要在本地查看网站的时候，就可以用这个命令。</p>\n<p>默认在 <code>http://localhost:8080/</code> 这里，可能会不同，注意提示信息即可。</p>\n<p>提醒</p>\n<p>如果你想要换端口号（上面的 <code>8080</code> 就是端口号），可以在终端里输入 <code>hexo s -p 端口号</code>。</p>\n<h3 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a><code>hexo generate</code></h3><p>这个命令是生成网站静态文件的时候用的，生成后网页将会放在根目录下面的 <code>public</code> 文件夹里。</p>\n<h3 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a><code>hexo deploy</code></h3><p>这个命令用来部署网站，使用此命令将会把生成好的页面（即 <code>public</code> 文件夹里的内容）部署到指定的地方上。</p>\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a><code>hexo clean</code></h3><p>这个命令用来清空 <code>public</code> 文件夹。</p>\n<h3 id=\"hexo-version\"><a href=\"#hexo-version\" class=\"headerlink\" title=\"hexo version\"></a><code>hexo version</code></h3><p>这个命令用来输出你所使用的 Hexo 目前的版本号</p>\n<h1 id=\"部署到-GitHub\"><a href=\"#部署到-GitHub\" class=\"headerlink\" title=\"部署到 GitHub\"></a>部署到 GitHub</h1><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>如果没有账号，请点此前往 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 注册一个 GitHub 账号。</li>\n<li>新建一个公开仓库，仓库名格式为 <code>your_username.github.io</code> 例如你的 GitHub 用户名是 <code>easyhexo</code>，那么你的仓库地址名称就应该是 <code>easyhexo.github.io</code></li>\n<li>创建完成后记下该仓库的 HTTPS/SSH 地址 一般格式为 <code>https://github.com/your_username/your_reponame.git</code> 在下一步会用到。</li>\n</ol>\n<h3 id=\"安装部署插件\"><a href=\"#安装部署插件\" class=\"headerlink\" title=\"安装部署插件\"></a>安装<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">部署插件</a></h3><pre><code>$ npm install hexo-deployer-git --save\n$ npm install hexo-server --save</code></pre><h3 id=\"配置-Git\"><a href=\"#配置-Git\" class=\"headerlink\" title=\"配置 Git\"></a>配置 Git</h3><p>如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。</p>\n<pre><code>$ git config --global user.name &quot;Your_user_name&quot;\n$ git config --global user.email &quot;Your_email@example.com&quot;</code></pre><p>提醒</p>\n<p>每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的~</p>\n<p>用户名和邮箱根据你注册github的信息自行修改。</p>\n<h3 id=\"然后生成密钥SSH-key：\"><a href=\"#然后生成密钥SSH-key：\" class=\"headerlink\" title=\"然后生成密钥SSH key：\"></a>然后生成密钥SSH key：</h3><pre><code>ssh-keygen -t rsa -C &quot;Your_email@example.com&quot;</code></pre><p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash中输入</p>\n<pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，出现你的用户名，那就成功了。</p>\n<h3 id=\"配置站点-config-yml-文件\"><a href=\"#配置站点-config-yml-文件\" class=\"headerlink\" title=\"配置站点 _config.yml 文件\"></a>配置站点 <code>_config.yml</code> 文件</h3><pre><code>deploy:\n  type: git   # 类型填git\n  repo: &lt;repository url&gt; # 你的Github仓库地址\n  branch: master  # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。\n  message:  # 提交信息可以自定义，不填的则默认为提交时间</code></pre><pre><code>deploy:\n  type: git\n  repository: git@github.com:ThirtyZhang/ThirtyZhang.github.io.git\n  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>(最好使用SSH的地址,因为使用Http更换电脑后可能找不到该git地址)</strong></p>\n<h3 id=\"发布到-GitHub\"><a href=\"#发布到-GitHub\" class=\"headerlink\" title=\"发布到 GitHub\"></a>发布到 GitHub</h3><p>在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。</p>\n<pre><code>$ hexo clean &amp;&amp; hexo d -g</code></pre><h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开git bash</p>\n<p>输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>博客根目录\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦</p>\n<h2 id=\"创建文章命令详细介绍\"><a href=\"#创建文章命令详细介绍\" class=\"headerlink\" title=\"创建文章命令详细介绍\"></a>创建文章命令详细介绍</h2><blockquote>\n<p><code>hexo new [layout]</code></p>\n<p>这个命令是新建文章或页面用的命令。其中 <code>[layout]</code> 表示他的模板（即页面或者文章），<code>&lt;title&gt;</code> 表示标题。</p>\n<p>用法：</p>\n<ol>\n<li><code>hexo new post 001</code> ，表示新建了一个标题为 <code>001</code> 的文章。</li>\n<li><code>hexo new page 001</code> ，表示新建了一个标题为 <code>001</code> 的页面。</li>\n</ol>\n<p>如果你不想在终端中新建文章或页面，可以直接在 <code>博客根目录/source/_post/</code> 目录下创建 Markdown 文件写<strong>文章</strong>。或者在 <code>博客根目录/source/</code> 目录下创建一个文件夹，然后在新文件夹里创建 <code>index.md</code> 写<strong>页面</strong>即可。</p>\n<p>提醒</p>\n<p>当你新建页面后，页面的链接就是你页面所在的文件夹的名字。</p>\n<p>例如：我在 <code>博客根目录/source/</code> 下新建了一个名为 <code>test</code> 的文件夹，然后在 <code>test</code> 文件夹下写 Markdown 文件，那么这个页面的链接就是 <code>网址/test</code>。</p>\n</blockquote>\n<h1 id=\"推荐使用的主题链接\"><a href=\"#推荐使用的主题链接\" class=\"headerlink\" title=\"推荐使用的主题链接\"></a>推荐使用的主题链接</h1><p>推荐一个好用的主题地址</p>\n<p><a href=\"https://github.com/ThirtyZhang/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">自己克隆的</a></p>\n<p><a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">原版的</a></p>\n<p>下载后将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可</p>\n<p>然后参照其中的<code>DEADME-CN.md</code>文件进行配置</p>\n<h1 id=\"最后我搭建好的成品效果图\"><a href=\"#最后我搭建好的成品效果图\" class=\"headerlink\" title=\"最后我搭建好的成品效果图\"></a>最后我搭建好的成品效果图</h1><p>我个人的博客地址 : <a href=\"https://thirtyzhang.github.io/\">点击访问</a></p>\n<p><img src=\"1579682303863.png\" alt=\"MyBlog\"></p>\n<h1 id=\"收藏博客\"><a href=\"#收藏博客\" class=\"headerlink\" title=\"收藏博客\"></a>收藏博客</h1><p><strong><a href=\"https://milyyy.github.io/\" target=\"_blank\" rel=\"noopener\">milyyy</a></strong></p>\n<p><a href=\"https://blinkfox.github.io/\" target=\"_blank\" rel=\"noopener\">闪烁之狐</a></p>\n<p><a href=\"https://godweiyang.com/\" target=\"_blank\" rel=\"noopener\">韦阳的博客</a></p>\n<h1 id=\"备份博客源文件\"><a href=\"#备份博客源文件\" class=\"headerlink\" title=\"备份博客源文件\"></a>备份博客源文件</h1><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p>\n<p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p>\n<p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后</p>\n<p>，最后<code>git push origin hexo</code>提交就行了。</p>\n<h1 id=\"推荐另一个教程作参考\"><a href=\"#推荐另一个教程作参考\" class=\"headerlink\" title=\"推荐另一个教程作参考\"></a>推荐另一个教程作参考</h1><h2 id=\"Hexo-Github博客搭建-完整小白教程\"><a href=\"#Hexo-Github博客搭建-完整小白教程\" class=\"headerlink\" title=\"Hexo+Github博客搭建 完整小白教程\"></a>Hexo+Github博客搭建 完整小白教程</h2><p><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10</a> </p>\n<p><strong>更多细节可查看官方文档</strong> : <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">hexo</a></p>\n<h1 id=\"遇到的问题解决办法\"><a href=\"#遇到的问题解决办法\" class=\"headerlink\" title=\"遇到的问题解决办法\"></a>遇到的问题解决办法</h1><h2 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h2><ul>\n<li>提示“FATAL Port 4000 has been used. Try other port instead.”<br> 在使用了$ hexo s命令预览博客效果后使用Control+C关闭<br> 解决办法：</li>\n</ul>\n<p>还不行就重新手动制定端口号</p>\n<pre><code>$ hexo s -p 5000</code></pre><h2 id=\"未安装git部署插件\"><a href=\"#未安装git部署插件\" class=\"headerlink\" title=\"未安装git部署插件\"></a>未安装git部署插件</h2><ul>\n<li>提示“ERROR Deployer not found: git”<br>解决办法：</li>\n</ul>\n<pre><code>$ npm install hexo-deployer-git --save</code></pre><h2 id=\"每次hexo-d-提交到GitHub-都会发送警告邮件\"><a href=\"#每次hexo-d-提交到GitHub-都会发送警告邮件\" class=\"headerlink\" title=\"每次hexo d 提交到GitHub 都会发送警告邮件\"></a>每次hexo d 提交到GitHub 都会发送警告邮件</h2><p><strong>Page build warning：Cannot use CNAMEs ending with github.io or github.com</strong></p>\n<p>总结写在前面,如果你没有绑定域名,而是克隆的别人的文件,直接删除掉就可以了</p>\n<p>路径 : <code>博客根目录/source</code></p>\n<p><img src=\"1579706750493.png\" alt=\"CNAME\"></p>\n<p>然后重新依次执行:</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">hexo clean\nhexo g\nhexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>就不会受到警告邮件了.</p>\n<p>​       在设计自己blog的时候，大家都会先借鉴一下<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">jkell模板</a>吧。我的这个blog也先clone了别人的架构，接下来慢慢修改填充自己的想法。</p>\n<p>​       在我每次向github的远程仓库提交更新的时候，总会收到一封邮件：</p>\n<blockquote>\n<p> The page build completed successfully, but returned the following warning for the <code>master</code> branch:You cannot use CNAMEs ending with github.io or github.com. Instead, create a repository named ThirtyZhang.github.io. See <a href=\"https://help.github.com/articles/setting-up-your-pages-site-repository/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/setting-up-your-pages-site-repository/</a></p>\n<p> For information on troubleshooting Jekyll see:</p>\n<p> <a href=\"https://help.github.com/articles/troubleshooting-jekyll-builds\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/troubleshooting-jekyll-builds</a></p>\n<p> If you have any questions you can contact us by replying to this email.</p>\n</blockquote>\n<p>大概就是表示您不能使用以<code>github.io</code> 或者 <code>github.com</code> 结尾的CNAMEs文件 ,创建一个名为ThirtyZhang.github.io的存储库代替</p>\n<p>刚接触<a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">jekyll</a>不久，对它的构建结构和语法都不是特别熟悉。访问了邮件中的链接，我发现这并不能解决我的问题。虽然有warning但是无伤大雅，毕竟程序员不怎么care warning。But 每次更新代码，都要收到github的邮件，我是不能忍受的！！！(<em>&gt;﹏&lt;</em>)</p>\n<p>​       于是乎好好研究了下jekyll的目录结构以及CNAME，原来CNAME是用来绑定域名的。</p>\n<p><strong>绑定到一级域名</strong></p>\n<ol>\n<li>首先在项目根目录下创建一个叫CNAME文件，里面写上自己的以及一级域名(<a href=\"http://www.youdomain.com\" target=\"_blank\" rel=\"noopener\">www.youdomain.com</a>)</li>\n<li>在你的域名管理页或者是DNS解析的地方，增加一个记录，记录类别为CNAME(Alias)类型。i.e.在DNS中为自己的域名增加一条A记录，指向207.97.227.245（github服务器）。</li>\n<li>将项目提交到github上, wait a minute</li>\n<li>baseurl应该为”/”</li>\n<li>访问自己的域名,check一下</li>\n</ol>\n<p><strong>绑定到二级域名</strong></p>\n<p>​       需要额外在DNS中增加一条CNAME，指向(github用户名).github.io，然后再CNAME文件中修改为自己的二级域名即可</p>\n<p>​       有关这个问题的<a href=\"https://help.github.com/articles/using-a-custom-domain-with-github-pages/\" target=\"_blank\" rel=\"noopener\">github官方帮助文档</a></p>\n<p>​       之前clone jekyll模板的时候在项目中有个CNAME文件，刚开始不知道它的而作用就保留了。我还没有申请域名，现在看来这个文件不仅unnecessary而且是trouble maker。删除这个文件就没有警告了。O(∩_∩)O</p>\n<h2 id=\"python3安装PIL失败\"><a href=\"#python3安装PIL失败\" class=\"headerlink\" title=\"python3安装PIL失败\"></a>python3安装PIL失败</h2><p>PIL其实只是python2的专利，它并没有跟随python的进化而进化。有大师为此，专门写了一个针对python3的pillow模块。</p>\n<p>所以，如果需要安装python3对应的PIL，应该选择安装<code>pillow</code>。</p>\n<hr>\n<p><strong>如果文章对您有帮助,希望可以点击下方的打<code>赏</code>.</strong></p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<div align=\"center\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=864622002&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速,不使用的话可能会有下载过慢或下载失败的问题</p>\n<pre><code class=\"powershell\">$ npm config set registry https://registry.npm.taobao.org</code></pre>\n<h2 id=\"认识-Hexo\"><a href=\"#认识-Hexo\" class=\"headerlink\" title=\"认识 Hexo\"></a>认识 Hexo</h2><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架，可以让你快速建立一个博客。</p>\n</blockquote>\n<blockquote>\n<p>Hexo 使用 Node.js 编写。得益于 Node.js，使得 Hexo 生成上百个页面游刃有余。</p>\n</blockquote>\n<blockquote>\n<p>Hexo 支持 GFM (GitHub Flavored Markdown) 的大部分功能。如果你不喜欢 Markdown ，你还可以换一个 Hexo 渲染插件。</p>\n</blockquote>\n<blockquote>\n<p>Hexo 有许多插件，可以进行各种操作。</p>\n</blockquote>\n<h2 id=\"学习-Hexo-之前，你需要有：\"><a href=\"#学习-Hexo-之前，你需要有：\" class=\"headerlink\" title=\"学习 Hexo 之前，你需要有：\"></a>学习 Hexo 之前，你需要有：</h2><ul>\n<li>Node.js 基本知识</li>\n<li>Git 基本知识</li>\n<li>Markdown 基本知识</li>\n<li>Html、css、JavaScript 基本知识</li>\n<li>······</li>\n</ul>\n<p>当然了，你可别被吓跑了。除了 Markdown ，其他都不用熟练掌握（事实上如果你不注意排版连 Markdown 都不用掌握，但最好还是学学吧 : <strong><a href=\"https://thirtyzhang.github.io/2020/01/21/markdown-yu-fa/\">Markdown语法 </a></strong>）。如果你完全不会以上划线部分的知识，也没关系。只是简单地建个可以发文章的博客就好了。如果你要更上一层楼，那么以上被划掉的知识就是必备的啦~</p>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>在安装 Hexo 之前，你需要安装以下两个工具：</p>\n<ul>\n<li><strong><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></strong></li>\n<li><strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a></strong></li>\n</ul>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>;或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n<li>Linux (Arch 系列)：<code>sudo pacman -S git</code></li>\n</ul>\n<p>提醒</p>\n<p>由于墙的原因，从上面的链接下载 git for windows 最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">这个页面</a>，收录了存储于百度云的下载地址。</p>\n<p>提醒</p>\n<p>如果你是 CentOS 服务器上的，可以直接使用 <a href=\"https://github.com/PasserByJia/HexoOneClickInstallation\" target=\"_blank\" rel=\"noopener\">HexoOneClickInstallation</a> 这个脚本快速安装 Hexo。</p>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。</p>\n<p>cURL:</p>\n<pre><code class=\"powershell\">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</code></pre>\n<p>Wget:</p>\n<pre><code class=\"powershell\">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</code></pre>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<pre><code class=\"powershell\">$ nvm install stable</code></pre>\n<p>或者您也可以下载 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 来安装。</p>\n<h2 id=\"安装-Hexo-1\"><a href=\"#安装-Hexo-1\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>安装好后，即可使用 npm 完成 Hexo 的安装。</p>\n<pre><code class=\"powershell\"># 下面这两个命令好像是一样的效果,任选一个就可以了\n$ npm install -g hexo-cli\n$ npm install hexo-cli -g</code></pre>\n<p>输入<code>npm install</code>安装必备的组件 </p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"建立网站\"><a href=\"#建立网站\" class=\"headerlink\" title=\"建立网站\"></a>建立网站</h2><p>安装好 Hexo 后即可建立你的网站。</p>\n<p>首先建立一个文件夹。</p>\n<pre><code class=\"powershell\">mkdir &lt;your_blog_name&gt;  # 建立你的网站根目录，名字可以自己修改</code></pre>\n<p>然后往这个文件夹里安装 Hexo。</p>\n<pre><code class=\"powershell\">hexo init &lt;your_blog_name&gt;</code></pre>\n<p>再执行</p>\n<pre><code class=\"powershell\">hexo s</code></pre>\n<p>浏览器输入</p>\n<pre><code class=\"powershell\">http://localhost:4000/</code></pre>\n<p>就可以本地访问了</p>\n<p>这样就建立好网站了！</p>\n<p><strong>网站建立好后还需要做一些个性化配置,如:修改网站默认内容改为自己的内容</strong></p>\n<p>此部分内容可能过期，请见 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">Hexo 官方文档</a>。</p>\n<p>在 Hexo 根目录 <code>_config.yml</code> 这个文件里配置！</p>\n<p>警告</p>\n<p>在 YAML 语法中，冒号后面必须要有一个空格才能继续写下去。</p>\n<h3 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h3><pre><code># Site\ntitle:            \nsubtitle: \ndescription: \nkeywords:\nauthor: \nlanguage: \ntimezone: </code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>title</code></td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td><code>subtitle</code></td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td><code>keywords</code></td>\n<td>网站关键词</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td>作者名字</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td><code>timezone</code></td>\n<td>网站时区：详见<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">时区列表</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><pre><code># URL\n## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;\nurl: \nroot: \npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailiing_index: true</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>url</code></td>\n<td>网址</td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td>网站根目录</td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>文章的永久链接格式</td>\n</tr>\n<tr>\n<td><code>permalink_defaults</code></td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n<tr>\n<td><code>pretty_urls</code></td>\n<td>改写 <code>permalink</code> 的值来美化 URL</td>\n</tr>\n<tr>\n<td><code>pretty_urls.trailing_index</code></td>\n<td>是否在永久链接中保留尾部的 <code>index.html</code>，<code>false</code> 时去除</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>如果你的网站在子目录中，如：<code>https://yoursite.com/blog</code> ，就把你的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>\n<p>例如：</p>\n<pre><code># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html\npretty_urls:\n  trailing_index: false\n# 此时页面的永久链接会变为 http://example.com/foo/bar/</code></pre><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><pre><code># Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render: README.md</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>source_dir</code></td>\n<td>资源文件夹</td>\n</tr>\n<tr>\n<td><code>public_dir</code></td>\n<td>公共文件夹</td>\n</tr>\n<tr>\n<td><code>tag_dir</code></td>\n<td>标签文件夹</td>\n</tr>\n<tr>\n<td><code>archive_dir</code></td>\n<td>归档文件夹</td>\n</tr>\n<tr>\n<td><code>category_dir</code></td>\n<td>分类文件夹</td>\n</tr>\n<tr>\n<td><code>code_dir</code></td>\n<td>Include code 文件夹</td>\n</tr>\n<tr>\n<td><code>i18n_dir</code></td>\n<td>国际化文件夹</td>\n</tr>\n<tr>\n<td><code>skip_render</code></td>\n<td>跳过文件的渲染。匹配到的文件将直接复制到 <code>public</code> 目录中。您可使用 <a href=\"https://github.com/micromatch/micromatch#extended-globbing\" target=\"_blank\" rel=\"noopener\">glob</a> 表达式来匹配路径。</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>一般情况下，这部分是不需要修改的。</p>\n<p>例如：</p>\n<pre><code>skip_render: &quot;mypage/**/*&quot;\n# 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#39;public&#39; 目录\n# 你也可以用这种方法来跳过对指定文章文件的渲染\nskip_render: &quot;_posts/test-post.md&quot;\n# 这将会忽略对 &#39;test-post.md&#39; 的渲染</code></pre><h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><pre><code># Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\n  enable: true\n  field: site\n  exclude: []\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>new_post_name</code></td>\n<td>新文章的文件名称</td>\n</tr>\n<tr>\n<td><code>default_layout</code></td>\n<td>预设布局</td>\n</tr>\n<tr>\n<td><code>auto_spacing</code></td>\n<td>在中文和英文之间加入空格</td>\n</tr>\n<tr>\n<td><code>titlecase</code></td>\n<td>把标题转换为 title case</td>\n</tr>\n<tr>\n<td><code>external_link</code></td>\n<td>在新标签中打开链接</td>\n</tr>\n<tr>\n<td><code>external_link.enable</code></td>\n<td>在新标签中打开链接</td>\n</tr>\n<tr>\n<td><code>external_link.field</code></td>\n<td>适用于整个网站或仅文章</td>\n</tr>\n<tr>\n<td><code>external_link.exclude</code></td>\n<td>排除主机名。在适用时指定子域，包括 <code>www</code></td>\n</tr>\n<tr>\n<td><code>filename_case</code></td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n</tr>\n<tr>\n<td><code>render_drafts</code></td>\n<td>显示草稿</td>\n</tr>\n<tr>\n<td><code>post_asset_folder</code></td>\n<td>启动 <a href=\"https://hexo.io/zh-cn/docs/asset-folders\" target=\"_blank\" rel=\"noopener\">Asset 文件夹</a></td>\n</tr>\n<tr>\n<td><code>relative_link</code></td>\n<td>把链接改为与根目录的相对位址</td>\n</tr>\n<tr>\n<td><code>future</code></td>\n<td>显示未来的文章</td>\n</tr>\n<tr>\n<td><code>highlight</code></td>\n<td>代码块的设置</td>\n</tr>\n<tr>\n<td><code>highlight.enable</code></td>\n<td>开启语法高亮</td>\n</tr>\n<tr>\n<td><code>highlight.auto_detect</code></td>\n<td>如果未指定语言，则启用自动检测</td>\n</tr>\n<tr>\n<td><code>highlight.line_number</code></td>\n<td>显示行数</td>\n</tr>\n<tr>\n<td><code>highlight.tab_replace</code></td>\n<td>用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</td>\n</tr>\n</tbody></table>\n<h3 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h3><pre><code># Category &amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default_category</code></td>\n<td>默认分类</td>\n</tr>\n<tr>\n<td><code>category_map</code></td>\n<td>分类别名</td>\n</tr>\n<tr>\n<td><code>tag_map</code></td>\n<td>标签别名</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h3><pre><code># Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\nuse_date_for_updated: true</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>date_format</code></td>\n<td>日期格式</td>\n</tr>\n<tr>\n<td><code>time_format</code></td>\n<td>时间格式</td>\n</tr>\n<tr>\n<td><code>use_date_for_updated</code></td>\n<td>如果前面没有提供更新日期，则使用 <code>post.updated</code> 中的发布日期。通常与 Git 工作流一起使用。</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>Hexo 使用 <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment.js</a> 来解析和显示时间。</p>\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><pre><code># Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>per_page</code></td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n</tr>\n<tr>\n<td><code>pagination_dir</code></td>\n<td>分页目录</td>\n</tr>\n</tbody></table>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><pre><code># Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: \ntheme_config: \ndeploy:\nmeta_generator:</code></pre><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>theme</code></td>\n<td>当前主题名称。值为 <code>false</code> 时禁用主题</td>\n</tr>\n<tr>\n<td><code>theme_config</code></td>\n<td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置。</td>\n</tr>\n<tr>\n<td><code>deploy</code></td>\n<td>部署的设置</td>\n</tr>\n<tr>\n<td><code>meta_generator</code></td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签。</td>\n</tr>\n</tbody></table>\n<p>提醒</p>\n<p>下一篇文章将会提到 部署。</p>\n<h1 id=\"Hexo-命令详解\"><a href=\"#Hexo-命令详解\" class=\"headerlink\" title=\"Hexo 命令详解\"></a>Hexo 命令详解</h1><p>下面介绍一些 Hexo 的基本命令。</p>\n<h3 id=\"hexo-init-folder\"><a href=\"#hexo-init-folder\" class=\"headerlink\" title=\"hexo init [folder]\"></a><code>hexo init [folder]</code></h3><p>这个命令是 Hexo 初始化命令。<code>[folder]</code> 表示你要初始化的文件夹。如果你要初始化本地，直接 <code>hexo init .</code> 。</p>\n<h3 id=\"hexo-new-layout-lt-title-gt\"><a href=\"#hexo-new-layout-lt-title-gt\" class=\"headerlink\" title=\"hexo new [layout] &lt;title&gt;\"></a><code>hexo new [layout] &lt;title&gt;</code></h3><p>这个命令是新建文章或页面用的命令。其中 <code>[layout]</code> 表示他的模板（即页面或者文章），<code>&lt;title&gt;</code> 表示标题。</p>\n<p>用法：</p>\n<ol>\n<li><code>hexo new post 001</code> ，表示新建了一个标题为 <code>001</code> 的文章。</li>\n<li><code>hexo new page 001</code> ，表示新建了一个标题为 <code>001</code> 的页面。</li>\n</ol>\n<p>如果你不想在终端中新建文章或页面，可以直接在 <code>博客根目录/source/_post/</code> 目录下创建 Markdown 文件写<strong>文章</strong>。或者在 <code>博客根目录/source/</code> 目录下创建一个文件夹，然后在新文件夹里创建 <code>index.md</code> 写<strong>页面</strong>即可。</p>\n<p>提醒</p>\n<p>当你新建页面后，页面的链接就是你页面所在的文件夹的名字。</p>\n<p>例如：我在 <code>博客根目录/source/</code> 下新建了一个名为 <code>test</code> 的文件夹，然后在 <code>test</code> 文件夹下写 Markdown 文件，那么这个页面的链接就是 <code>网址/test</code>。</p>\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a><code>hexo server</code></h3><p>当你要在本地查看网站的时候，就可以用这个命令。</p>\n<p>默认在 <code>http://localhost:8080/</code> 这里，可能会不同，注意提示信息即可。</p>\n<p>提醒</p>\n<p>如果你想要换端口号（上面的 <code>8080</code> 就是端口号），可以在终端里输入 <code>hexo s -p 端口号</code>。</p>\n<h3 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a><code>hexo generate</code></h3><p>这个命令是生成网站静态文件的时候用的，生成后网页将会放在根目录下面的 <code>public</code> 文件夹里。</p>\n<h3 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a><code>hexo deploy</code></h3><p>这个命令用来部署网站，使用此命令将会把生成好的页面（即 <code>public</code> 文件夹里的内容）部署到指定的地方上。</p>\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a><code>hexo clean</code></h3><p>这个命令用来清空 <code>public</code> 文件夹。</p>\n<h3 id=\"hexo-version\"><a href=\"#hexo-version\" class=\"headerlink\" title=\"hexo version\"></a><code>hexo version</code></h3><p>这个命令用来输出你所使用的 Hexo 目前的版本号</p>\n<h1 id=\"部署到-GitHub\"><a href=\"#部署到-GitHub\" class=\"headerlink\" title=\"部署到 GitHub\"></a>部署到 GitHub</h1><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>如果没有账号，请点此前往 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 注册一个 GitHub 账号。</li>\n<li>新建一个公开仓库，仓库名格式为 <code>your_username.github.io</code> 例如你的 GitHub 用户名是 <code>easyhexo</code>，那么你的仓库地址名称就应该是 <code>easyhexo.github.io</code></li>\n<li>创建完成后记下该仓库的 HTTPS/SSH 地址 一般格式为 <code>https://github.com/your_username/your_reponame.git</code> 在下一步会用到。</li>\n</ol>\n<h3 id=\"安装部署插件\"><a href=\"#安装部署插件\" class=\"headerlink\" title=\"安装部署插件\"></a>安装<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">部署插件</a></h3><pre><code>$ npm install hexo-deployer-git --save\n$ npm install hexo-server --save</code></pre><h3 id=\"配置-Git\"><a href=\"#配置-Git\" class=\"headerlink\" title=\"配置 Git\"></a>配置 Git</h3><p>如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。</p>\n<pre><code>$ git config --global user.name &quot;Your_user_name&quot;\n$ git config --global user.email &quot;Your_email@example.com&quot;</code></pre><p>提醒</p>\n<p>每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的~</p>\n<p>用户名和邮箱根据你注册github的信息自行修改。</p>\n<h3 id=\"然后生成密钥SSH-key：\"><a href=\"#然后生成密钥SSH-key：\" class=\"headerlink\" title=\"然后生成密钥SSH key：\"></a>然后生成密钥SSH key：</h3><pre><code>ssh-keygen -t rsa -C &quot;Your_email@example.com&quot;</code></pre><p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash中输入</p>\n<pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，出现你的用户名，那就成功了。</p>\n<h3 id=\"配置站点-config-yml-文件\"><a href=\"#配置站点-config-yml-文件\" class=\"headerlink\" title=\"配置站点 _config.yml 文件\"></a>配置站点 <code>_config.yml</code> 文件</h3><pre><code>deploy:\n  type: git   # 类型填git\n  repo: &lt;repository url&gt; # 你的Github仓库地址\n  branch: master  # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。\n  message:  # 提交信息可以自定义，不填的则默认为提交时间</code></pre><pre><code>deploy:\n  type: git\n  repository: git@github.com:ThirtyZhang/ThirtyZhang.github.io.git\n  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>(最好使用SSH的地址,因为使用Http更换电脑后可能找不到该git地址)</strong></p>\n<h3 id=\"发布到-GitHub\"><a href=\"#发布到-GitHub\" class=\"headerlink\" title=\"发布到 GitHub\"></a>发布到 GitHub</h3><p>在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。</p>\n<pre><code>$ hexo clean &amp;&amp; hexo d -g</code></pre><h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开git bash</p>\n<p>输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>博客根目录\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦</p>\n<h2 id=\"创建文章命令详细介绍\"><a href=\"#创建文章命令详细介绍\" class=\"headerlink\" title=\"创建文章命令详细介绍\"></a>创建文章命令详细介绍</h2><blockquote>\n<p><code>hexo new [layout]</code></p>\n<p>这个命令是新建文章或页面用的命令。其中 <code>[layout]</code> 表示他的模板（即页面或者文章），<code>&lt;title&gt;</code> 表示标题。</p>\n<p>用法：</p>\n<ol>\n<li><code>hexo new post 001</code> ，表示新建了一个标题为 <code>001</code> 的文章。</li>\n<li><code>hexo new page 001</code> ，表示新建了一个标题为 <code>001</code> 的页面。</li>\n</ol>\n<p>如果你不想在终端中新建文章或页面，可以直接在 <code>博客根目录/source/_post/</code> 目录下创建 Markdown 文件写<strong>文章</strong>。或者在 <code>博客根目录/source/</code> 目录下创建一个文件夹，然后在新文件夹里创建 <code>index.md</code> 写<strong>页面</strong>即可。</p>\n<p>提醒</p>\n<p>当你新建页面后，页面的链接就是你页面所在的文件夹的名字。</p>\n<p>例如：我在 <code>博客根目录/source/</code> 下新建了一个名为 <code>test</code> 的文件夹，然后在 <code>test</code> 文件夹下写 Markdown 文件，那么这个页面的链接就是 <code>网址/test</code>。</p>\n</blockquote>\n<h1 id=\"推荐使用的主题链接\"><a href=\"#推荐使用的主题链接\" class=\"headerlink\" title=\"推荐使用的主题链接\"></a>推荐使用的主题链接</h1><p>推荐一个好用的主题地址</p>\n<p><a href=\"https://github.com/ThirtyZhang/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">自己克隆的</a></p>\n<p><a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">原版的</a></p>\n<p>下载后将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可</p>\n<p>然后参照其中的<code>DEADME-CN.md</code>文件进行配置</p>\n<h1 id=\"最后我搭建好的成品效果图\"><a href=\"#最后我搭建好的成品效果图\" class=\"headerlink\" title=\"最后我搭建好的成品效果图\"></a>最后我搭建好的成品效果图</h1><p>我个人的博客地址 : <a href=\"https://thirtyzhang.github.io/\">点击访问</a></p>\n<p><img src=\"1579682303863.png\" alt=\"MyBlog\"></p>\n<h1 id=\"收藏博客\"><a href=\"#收藏博客\" class=\"headerlink\" title=\"收藏博客\"></a>收藏博客</h1><p><strong><a href=\"https://milyyy.github.io/\" target=\"_blank\" rel=\"noopener\">milyyy</a></strong></p>\n<p><a href=\"https://blinkfox.github.io/\" target=\"_blank\" rel=\"noopener\">闪烁之狐</a></p>\n<p><a href=\"https://godweiyang.com/\" target=\"_blank\" rel=\"noopener\">韦阳的博客</a></p>\n<h1 id=\"备份博客源文件\"><a href=\"#备份博客源文件\" class=\"headerlink\" title=\"备份博客源文件\"></a>备份博客源文件</h1><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p>\n<p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p>\n<p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后</p>\n<p>，最后<code>git push origin hexo</code>提交就行了。</p>\n<h1 id=\"推荐另一个教程作参考\"><a href=\"#推荐另一个教程作参考\" class=\"headerlink\" title=\"推荐另一个教程作参考\"></a>推荐另一个教程作参考</h1><h2 id=\"Hexo-Github博客搭建-完整小白教程\"><a href=\"#Hexo-Github博客搭建-完整小白教程\" class=\"headerlink\" title=\"Hexo+Github博客搭建 完整小白教程\"></a>Hexo+Github博客搭建 完整小白教程</h2><p><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10</a> </p>\n<p><strong>更多细节可查看官方文档</strong> : <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">hexo</a></p>\n<h1 id=\"遇到的问题解决办法\"><a href=\"#遇到的问题解决办法\" class=\"headerlink\" title=\"遇到的问题解决办法\"></a>遇到的问题解决办法</h1><h2 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h2><ul>\n<li>提示“FATAL Port 4000 has been used. Try other port instead.”<br> 在使用了$ hexo s命令预览博客效果后使用Control+C关闭<br> 解决办法：</li>\n</ul>\n<p>还不行就重新手动制定端口号</p>\n<pre><code>$ hexo s -p 5000</code></pre><h2 id=\"未安装git部署插件\"><a href=\"#未安装git部署插件\" class=\"headerlink\" title=\"未安装git部署插件\"></a>未安装git部署插件</h2><ul>\n<li>提示“ERROR Deployer not found: git”<br>解决办法：</li>\n</ul>\n<pre><code>$ npm install hexo-deployer-git --save</code></pre><h2 id=\"每次hexo-d-提交到GitHub-都会发送警告邮件\"><a href=\"#每次hexo-d-提交到GitHub-都会发送警告邮件\" class=\"headerlink\" title=\"每次hexo d 提交到GitHub 都会发送警告邮件\"></a>每次hexo d 提交到GitHub 都会发送警告邮件</h2><p><strong>Page build warning：Cannot use CNAMEs ending with github.io or github.com</strong></p>\n<p>总结写在前面,如果你没有绑定域名,而是克隆的别人的文件,直接删除掉就可以了</p>\n<p>路径 : <code>博客根目录/source</code></p>\n<p><img src=\"1579706750493.png\" alt=\"CNAME\"></p>\n<p>然后重新依次执行:</p>\n<pre><code class=\"powershell\">hexo clean\nhexo g\nhexo d</code></pre>\n<p>就不会受到警告邮件了.</p>\n<p>​       在设计自己blog的时候，大家都会先借鉴一下<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">jkell模板</a>吧。我的这个blog也先clone了别人的架构，接下来慢慢修改填充自己的想法。</p>\n<p>​       在我每次向github的远程仓库提交更新的时候，总会收到一封邮件：</p>\n<blockquote>\n<p> The page build completed successfully, but returned the following warning for the <code>master</code> branch:You cannot use CNAMEs ending with github.io or github.com. Instead, create a repository named ThirtyZhang.github.io. See <a href=\"https://help.github.com/articles/setting-up-your-pages-site-repository/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/setting-up-your-pages-site-repository/</a></p>\n<p> For information on troubleshooting Jekyll see:</p>\n<p> <a href=\"https://help.github.com/articles/troubleshooting-jekyll-builds\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/troubleshooting-jekyll-builds</a></p>\n<p> If you have any questions you can contact us by replying to this email.</p>\n</blockquote>\n<p>大概就是表示您不能使用以<code>github.io</code> 或者 <code>github.com</code> 结尾的CNAMEs文件 ,创建一个名为ThirtyZhang.github.io的存储库代替</p>\n<p>刚接触<a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">jekyll</a>不久，对它的构建结构和语法都不是特别熟悉。访问了邮件中的链接，我发现这并不能解决我的问题。虽然有warning但是无伤大雅，毕竟程序员不怎么care warning。But 每次更新代码，都要收到github的邮件，我是不能忍受的！！！(<em>&gt;﹏&lt;</em>)</p>\n<p>​       于是乎好好研究了下jekyll的目录结构以及CNAME，原来CNAME是用来绑定域名的。</p>\n<p><strong>绑定到一级域名</strong></p>\n<ol>\n<li>首先在项目根目录下创建一个叫CNAME文件，里面写上自己的以及一级域名(<a href=\"http://www.youdomain.com\" target=\"_blank\" rel=\"noopener\">www.youdomain.com</a>)</li>\n<li>在你的域名管理页或者是DNS解析的地方，增加一个记录，记录类别为CNAME(Alias)类型。i.e.在DNS中为自己的域名增加一条A记录，指向207.97.227.245（github服务器）。</li>\n<li>将项目提交到github上, wait a minute</li>\n<li>baseurl应该为”/”</li>\n<li>访问自己的域名,check一下</li>\n</ol>\n<p><strong>绑定到二级域名</strong></p>\n<p>​       需要额外在DNS中增加一条CNAME，指向(github用户名).github.io，然后再CNAME文件中修改为自己的二级域名即可</p>\n<p>​       有关这个问题的<a href=\"https://help.github.com/articles/using-a-custom-domain-with-github-pages/\" target=\"_blank\" rel=\"noopener\">github官方帮助文档</a></p>\n<p>​       之前clone jekyll模板的时候在项目中有个CNAME文件，刚开始不知道它的而作用就保留了。我还没有申请域名，现在看来这个文件不仅unnecessary而且是trouble maker。删除这个文件就没有警告了。O(∩_∩)O</p>\n<h2 id=\"python3安装PIL失败\"><a href=\"#python3安装PIL失败\" class=\"headerlink\" title=\"python3安装PIL失败\"></a>python3安装PIL失败</h2><p>PIL其实只是python2的专利，它并没有跟随python的进化而进化。有大师为此，专门写了一个针对python3的pillow模块。</p>\n<p>所以，如果需要安装python3对应的PIL，应该选择安装<code>pillow</code>。</p>\n<hr>\n<p><strong>如果文章对您有帮助,希望可以点击下方的打<code>赏</code>.</strong></p>\n"},{"title":"JavaScript-预编译","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-21T18:07:06.000Z","password":null,"summary":null,"_content":"\n# 预编译\n\n## 前奏\n\n> `imply globle` 暗示全局变量 :  未声明直接赋值的的变量归`window`所有 \n\n> 一切声明的全局变量 , 全是`window`的属性.\n\n> `window`就是全局的域\n>\n> ```js\n> var a = 123;\n> //window  {\n> //       a :123\n> //}\n> \n> console.log(a)  === console.log(window.a);\n> \n> ```\n>\n> \n\n## 例子\n\n> 预编译发生在函数执行的前一刻\n>\n> 四部曲:\n>\n> > 1. 创建AO 对象 Activation Object (执行期上下文)\n> >\n> > 2. 找形参和变量声明 , 将变量和形参名作为AO属性名,值为`undefined`\n> > 3. 将实参和形参统一\n> > 4. 在函数体里面找函数声明, 值赋予函数体 \n>\n> ```js\n> function fn (a) {\n>     console.log(a); //function\n>     var a = 123;\n>     console.log(a); //123\n>     function a () {}\n>     console.log(a); //123 \n>     var b = function (){}\n>     console.log(b); //function\n>     function d () {} \n> }\n> fn(1);\n> ```\n\n> 预编译发生在全局执行的前一刻\n>\n> 三部曲\n>\n> 全局预编译    GO === window\n>\n> 1. 创建GO\n> 2. 变量名作为AO的属性名, 值为`undefined`\n> 3. 在函数体里面找函数声明, 值赋予函数体 \n\n```js\nglobal = 100;\nfunction fn() {\n    console.log(global); //undefined\n    global = 200;\n    console.log(global);  //200\n    var global = 300;\n}\nfn();\nvar global;\n```\n\n","source":"_posts/JavaScript-预编译.md","raw":"---\ntitle: JavaScript-预编译\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-22 02:07:06\npassword:\nsummary:\ntags:\n- JavaScript\ncategories:\n- 前端\n---\n\n# 预编译\n\n## 前奏\n\n> `imply globle` 暗示全局变量 :  未声明直接赋值的的变量归`window`所有 \n\n> 一切声明的全局变量 , 全是`window`的属性.\n\n> `window`就是全局的域\n>\n> ```js\n> var a = 123;\n> //window  {\n> //       a :123\n> //}\n> \n> console.log(a)  === console.log(window.a);\n> \n> ```\n>\n> \n\n## 例子\n\n> 预编译发生在函数执行的前一刻\n>\n> 四部曲:\n>\n> > 1. 创建AO 对象 Activation Object (执行期上下文)\n> >\n> > 2. 找形参和变量声明 , 将变量和形参名作为AO属性名,值为`undefined`\n> > 3. 将实参和形参统一\n> > 4. 在函数体里面找函数声明, 值赋予函数体 \n>\n> ```js\n> function fn (a) {\n>     console.log(a); //function\n>     var a = 123;\n>     console.log(a); //123\n>     function a () {}\n>     console.log(a); //123 \n>     var b = function (){}\n>     console.log(b); //function\n>     function d () {} \n> }\n> fn(1);\n> ```\n\n> 预编译发生在全局执行的前一刻\n>\n> 三部曲\n>\n> 全局预编译    GO === window\n>\n> 1. 创建GO\n> 2. 变量名作为AO的属性名, 值为`undefined`\n> 3. 在函数体里面找函数声明, 值赋予函数体 \n\n```js\nglobal = 100;\nfunction fn() {\n    console.log(global); //undefined\n    global = 200;\n    console.log(global);  //200\n    var global = 300;\n}\nfn();\nvar global;\n```\n\n","slug":"JavaScript-预编译","published":1,"updated":"2020-02-21T19:13:12.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkdw0009wcq45ks2nkmt","content":"<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><h2 id=\"前奏\"><a href=\"#前奏\" class=\"headerlink\" title=\"前奏\"></a>前奏</h2><blockquote>\n<p><code>imply globle</code> 暗示全局变量 :  未声明直接赋值的的变量归<code>window</code>所有 </p>\n</blockquote>\n<blockquote>\n<p>一切声明的全局变量 , 全是<code>window</code>的属性.</p>\n</blockquote>\n<blockquote>\n<p><code>window</code>就是全局的域</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//window  {</span>\n<span class=\"token comment\" spellcheck=\"true\">//       a :123</span>\n<span class=\"token comment\" spellcheck=\"true\">//}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token operator\">===</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<p>预编译发生在函数执行的前一刻</p>\n<p>四部曲:</p>\n<blockquote>\n<ol>\n<li><p>创建AO 对象 Activation Object (执行期上下文)</p>\n</li>\n<li><p>找形参和变量声明 , 将变量和形参名作为AO属性名,值为<code>undefined</code></p>\n</li>\n<li><p>将实参和形参统一</p>\n</li>\n<li><p>在函数体里面找函数声明, 值赋予函数体 </p>\n</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> fn <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//function</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//123</span>\n    <span class=\"token keyword\">function</span> a <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//123 </span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//function</span>\n    <span class=\"token keyword\">function</span> d <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<blockquote>\n<p>预编译发生在全局执行的前一刻</p>\n<p>三部曲</p>\n<p>全局预编译    GO === window</p>\n<ol>\n<li>创建GO</li>\n<li>变量名作为AO的属性名, 值为<code>undefined</code></li>\n<li>在函数体里面找函数声明, 值赋予函数体 </li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">global <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//undefined</span>\n    global <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//200</span>\n    <span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> global<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><h2 id=\"前奏\"><a href=\"#前奏\" class=\"headerlink\" title=\"前奏\"></a>前奏</h2><blockquote>\n<p><code>imply globle</code> 暗示全局变量 :  未声明直接赋值的的变量归<code>window</code>所有 </p>\n</blockquote>\n<blockquote>\n<p>一切声明的全局变量 , 全是<code>window</code>的属性.</p>\n</blockquote>\n<blockquote>\n<p><code>window</code>就是全局的域</p>\n<pre><code class=\"js\">var a = 123;\n//window  {\n//       a :123\n//}\n\nconsole.log(a)  === console.log(window.a);\n</code></pre>\n</blockquote>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<p>预编译发生在函数执行的前一刻</p>\n<p>四部曲:</p>\n<blockquote>\n<ol>\n<li><p>创建AO 对象 Activation Object (执行期上下文)</p>\n</li>\n<li><p>找形参和变量声明 , 将变量和形参名作为AO属性名,值为<code>undefined</code></p>\n</li>\n<li><p>将实参和形参统一</p>\n</li>\n<li><p>在函数体里面找函数声明, 值赋予函数体 </p>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"js\">function fn (a) {\n    console.log(a); //function\n    var a = 123;\n    console.log(a); //123\n    function a () {}\n    console.log(a); //123 \n    var b = function (){}\n    console.log(b); //function\n    function d () {} \n}\nfn(1);</code></pre>\n</blockquote>\n<blockquote>\n<p>预编译发生在全局执行的前一刻</p>\n<p>三部曲</p>\n<p>全局预编译    GO === window</p>\n<ol>\n<li>创建GO</li>\n<li>变量名作为AO的属性名, 值为<code>undefined</code></li>\n<li>在函数体里面找函数声明, 值赋予函数体 </li>\n</ol>\n</blockquote>\n<pre><code class=\"js\">global = 100;\nfunction fn() {\n    console.log(global); //undefined\n    global = 200;\n    console.log(global);  //200\n    var global = 300;\n}\nfn();\nvar global;</code></pre>\n"},{"title":"JavaScript-正则表达式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-18T08:33:37.000Z","password":null,"summary":null,"_content":"\n# 正则表达式(RegExp)\n\n## 创建\n\n> ```js\n> var reg = /abc/igm;  //字面量定义规则\n> var str = \"abcd\";\n> reg.test(str);  // true   //正则表达式的方法 , 参数为字符串 , 如果符合则返回true\n> str.match(reg);  //[\"abc\"]  // 字符串的方法,参数为正则表达式 , 返回找到的字符串\n> var reg = new RegExp(\"abc\" , \"igm\") // 构造函数定义规则\n> ```\n>\n> > `i` 忽略大小写\n> >\n> > `g` 全局匹配\n> >\n> > `m` 多行匹配\n> >\n> > > ```js\n> > > var reg = /^a/gm;  // ^a 以a开头  g 全局查找  m 换行匹配\n> > > var str = \"abc\\na\";  // `\\n`表示换行 ,\n> > > str.match(reg); //[\"a\", \"a\"]  //有m则返回两个a , 去掉则返回一个a\n> > > ```\n> > >\n> > > \n> >\n> > `^`以什么打头 如果放到 []里面则表示非\n> >\n> > ```js\n> > var reg = /[^a]/; //非a 查找不是a的单个字符\n> > var str = /abc/;\n> > str.match(reg); // [\"b\"]   如果加上 g 则返回[\"b\" , \"c\"]\n> > ```\n> >\n> > `()`优先计算     子表达式    会把括号中匹配的信息也返回\n> >\n> > ```js\n> > var reg = /(abc|bcd)/;  //匹配abc或者bcd\n> > ```\n> >\n> > `$` 以什么结尾\n>\n>  \n\n## 表达式 和 元字符\n\n> ```js\n> var reg = /[能取到的范围]/; \n> \\w ===[0-9A-z_] \n> \\W ===\\w\n> \\s //空白字符 空格 \\n换行符  \\f换页符  \\r回车符  \\t制表符 \\v垂直制表符\n> \\S //非空白字符  \n> \\d  === [0-9]\n> \\D  //非数字\n> \\b  //单词边界\n> \\B  //非单词边界\n> //存在字符\\w和\\W相邻,那么这两个字符之间就有单词边界 , 包括字符串首尾\n>     var str6 = \"abc_d,123中文_d3=efg汉字a\";\n>     var reg6 = /[\\d\\D]\\b/g;\n>     console.log(str6.match(reg6));  //[\"d\", \",\", \"3\", \"文\", \"3\", \"=\", \"g\", \"字\", \"a\"]  // 匹配的是 右边存在单词边界的字符\n>  .  === [^\\r\\n]   //非回车换行符的任意字符\n> ```\n>\n> \n\n## 量词\n\n> `+ `  一次以上 `{1,}`\n>\n> `*` 任意次   `{0,}`\n>\n> `?`  0 个 或 1个 `{0,1}`\n>\n> 默认贪婪匹配 量词后边 用 `?`修饰表示非贪婪\n\n## 方法\n\n> `reg.exec();`\n>\n> ```js\n> var reg = /ab/g;  // 不加 g lastIndex不会变 , 每次匹配的都是第一个ab\n> var str = \"abababab\";\n> console.log(reg.exec(str)); //[ab] //第一个ab  reg.lastIndex 变为2\n> console.log(reg.exec(str)); //[ab] //从游标为2的地方匹配第二个ab   reg.lastIndex 变为4\n> ```\n\n> `str.split(reg)`    -- 按正则表达式拆分字符串\n>\n> `str.replace`\n>\n> ```js\n> str.replace(\"a\",  \"b\");  //把字符串中找到的第一个 a 替换成 b\n> var reg = /a/g;\n> str.replace(reg , \"b\");  //这样可以实现把所有的 a 替换成 b 如果把 g 去掉 也只能替换第一个 a\n> ```\n>\n> `str.toUpperCase()`  //把字符串 str中的字母全变成大写\n>\n> `str.toLowerCase()` //字符串字母变小写\n\n## 正向预查  或者  正向断言\n\n> ```js\n> var str = \"abaaaa\";\n> var reg = /a(?=b)/g;  // (?=b)不参与选择 , 只参与限定 限定 a 的后边要跟着b \n> var reg = /a(?!b)/g;  // (?=b)不参与选择 , 只参与限定 限定 a 的后边不是 b \n> str.match(reg);// [\"a\"]\n> ```\n\n## 练习题\n\n> 检验字符串首尾是否含有数字\n>\n> ```js\n> var reg = /^\\d | \\d$/;\n> ```\n>\n> 匹配四个重复值\n>\n> ```js\n> var reg = /(\\w)\\1\\1\\1/g;  // \\1 引用第一个表达式中匹配的值  \\2 就是第二个 依次类推\n> ```\n>\n> 把 `aabb` 这种形式的字符串反过来变成 `bbaa`\n>\n> ```js\n> var str = \"aabb\";\n> var reg  = /(\\w)\\1(\\w)\\2/g;\n> str.replace(reg , \"$2$2$1$1\") //这里如果就是要替换成 $ 的话 要写 $$ ,类似于转义\n> \n> //另外的方法\n> var reg = /(\\w)\\1(\\w)\\2/g;\n> str.replace(reg, function ($ , $1 , $2){ //三个参数一次接收 整个表达式返回结果 , 第一个子表达式结果 , 第二个子表达式结果\n>     return $2 + $2 + $1 + $1\n> });\n> ```\n>\n> 把 // the-first-name 变成小驼峰命名式 // theFirstName\n>\n> ```js\n> var str = \"the-first-name\";\n> var reg = /-(\\w)/g;\n> str.replace(reg, function ($ , $1){\n>     return $1.toUpperCase();\n> })\n> ```\n>\n> 字符串去重\n>\n> ```js\n> var str = \"aaaabbbccc\";\n> var reg = /(\\w)\\1*/g;\n> str.replace(reg, \"$1\");\n> ```\n>\n> 把 1000000 变成 1.000.000\n>\n> ```js\n> var str = \"1000000\"\n> var reg = /(?=(\\B)(\\d{3})+$)/g  //匹配后边跟的是一个非单词边界和3的倍数个数字的空白字符\n> str.replace(reg, \".\");\n> ```\n>\n> ","source":"_posts/JavaScript-正则表达式.md","raw":"---\ntitle: JavaScript-正则表达式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-18 16:33:37\npassword:\nsummary:\ntags:\n- JavaScript\ncategories:\n- 前端\n---\n\n# 正则表达式(RegExp)\n\n## 创建\n\n> ```js\n> var reg = /abc/igm;  //字面量定义规则\n> var str = \"abcd\";\n> reg.test(str);  // true   //正则表达式的方法 , 参数为字符串 , 如果符合则返回true\n> str.match(reg);  //[\"abc\"]  // 字符串的方法,参数为正则表达式 , 返回找到的字符串\n> var reg = new RegExp(\"abc\" , \"igm\") // 构造函数定义规则\n> ```\n>\n> > `i` 忽略大小写\n> >\n> > `g` 全局匹配\n> >\n> > `m` 多行匹配\n> >\n> > > ```js\n> > > var reg = /^a/gm;  // ^a 以a开头  g 全局查找  m 换行匹配\n> > > var str = \"abc\\na\";  // `\\n`表示换行 ,\n> > > str.match(reg); //[\"a\", \"a\"]  //有m则返回两个a , 去掉则返回一个a\n> > > ```\n> > >\n> > > \n> >\n> > `^`以什么打头 如果放到 []里面则表示非\n> >\n> > ```js\n> > var reg = /[^a]/; //非a 查找不是a的单个字符\n> > var str = /abc/;\n> > str.match(reg); // [\"b\"]   如果加上 g 则返回[\"b\" , \"c\"]\n> > ```\n> >\n> > `()`优先计算     子表达式    会把括号中匹配的信息也返回\n> >\n> > ```js\n> > var reg = /(abc|bcd)/;  //匹配abc或者bcd\n> > ```\n> >\n> > `$` 以什么结尾\n>\n>  \n\n## 表达式 和 元字符\n\n> ```js\n> var reg = /[能取到的范围]/; \n> \\w ===[0-9A-z_] \n> \\W ===\\w\n> \\s //空白字符 空格 \\n换行符  \\f换页符  \\r回车符  \\t制表符 \\v垂直制表符\n> \\S //非空白字符  \n> \\d  === [0-9]\n> \\D  //非数字\n> \\b  //单词边界\n> \\B  //非单词边界\n> //存在字符\\w和\\W相邻,那么这两个字符之间就有单词边界 , 包括字符串首尾\n>     var str6 = \"abc_d,123中文_d3=efg汉字a\";\n>     var reg6 = /[\\d\\D]\\b/g;\n>     console.log(str6.match(reg6));  //[\"d\", \",\", \"3\", \"文\", \"3\", \"=\", \"g\", \"字\", \"a\"]  // 匹配的是 右边存在单词边界的字符\n>  .  === [^\\r\\n]   //非回车换行符的任意字符\n> ```\n>\n> \n\n## 量词\n\n> `+ `  一次以上 `{1,}`\n>\n> `*` 任意次   `{0,}`\n>\n> `?`  0 个 或 1个 `{0,1}`\n>\n> 默认贪婪匹配 量词后边 用 `?`修饰表示非贪婪\n\n## 方法\n\n> `reg.exec();`\n>\n> ```js\n> var reg = /ab/g;  // 不加 g lastIndex不会变 , 每次匹配的都是第一个ab\n> var str = \"abababab\";\n> console.log(reg.exec(str)); //[ab] //第一个ab  reg.lastIndex 变为2\n> console.log(reg.exec(str)); //[ab] //从游标为2的地方匹配第二个ab   reg.lastIndex 变为4\n> ```\n\n> `str.split(reg)`    -- 按正则表达式拆分字符串\n>\n> `str.replace`\n>\n> ```js\n> str.replace(\"a\",  \"b\");  //把字符串中找到的第一个 a 替换成 b\n> var reg = /a/g;\n> str.replace(reg , \"b\");  //这样可以实现把所有的 a 替换成 b 如果把 g 去掉 也只能替换第一个 a\n> ```\n>\n> `str.toUpperCase()`  //把字符串 str中的字母全变成大写\n>\n> `str.toLowerCase()` //字符串字母变小写\n\n## 正向预查  或者  正向断言\n\n> ```js\n> var str = \"abaaaa\";\n> var reg = /a(?=b)/g;  // (?=b)不参与选择 , 只参与限定 限定 a 的后边要跟着b \n> var reg = /a(?!b)/g;  // (?=b)不参与选择 , 只参与限定 限定 a 的后边不是 b \n> str.match(reg);// [\"a\"]\n> ```\n\n## 练习题\n\n> 检验字符串首尾是否含有数字\n>\n> ```js\n> var reg = /^\\d | \\d$/;\n> ```\n>\n> 匹配四个重复值\n>\n> ```js\n> var reg = /(\\w)\\1\\1\\1/g;  // \\1 引用第一个表达式中匹配的值  \\2 就是第二个 依次类推\n> ```\n>\n> 把 `aabb` 这种形式的字符串反过来变成 `bbaa`\n>\n> ```js\n> var str = \"aabb\";\n> var reg  = /(\\w)\\1(\\w)\\2/g;\n> str.replace(reg , \"$2$2$1$1\") //这里如果就是要替换成 $ 的话 要写 $$ ,类似于转义\n> \n> //另外的方法\n> var reg = /(\\w)\\1(\\w)\\2/g;\n> str.replace(reg, function ($ , $1 , $2){ //三个参数一次接收 整个表达式返回结果 , 第一个子表达式结果 , 第二个子表达式结果\n>     return $2 + $2 + $1 + $1\n> });\n> ```\n>\n> 把 // the-first-name 变成小驼峰命名式 // theFirstName\n>\n> ```js\n> var str = \"the-first-name\";\n> var reg = /-(\\w)/g;\n> str.replace(reg, function ($ , $1){\n>     return $1.toUpperCase();\n> })\n> ```\n>\n> 字符串去重\n>\n> ```js\n> var str = \"aaaabbbccc\";\n> var reg = /(\\w)\\1*/g;\n> str.replace(reg, \"$1\");\n> ```\n>\n> 把 1000000 变成 1.000.000\n>\n> ```js\n> var str = \"1000000\"\n> var reg = /(?=(\\B)(\\d{3})+$)/g  //匹配后边跟的是一个非单词边界和3的倍数个数字的空白字符\n> str.replace(reg, \".\");\n> ```\n>\n> ","slug":"JavaScript-正则表达式","published":1,"updated":"2020-02-18T15:48:30.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frke1000bwcq49929w333","content":"<h1 id=\"正则表达式-RegExp\"><a href=\"#正则表达式-RegExp\" class=\"headerlink\" title=\"正则表达式(RegExp)\"></a>正则表达式(RegExp)</h1><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/igm</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//字面量定义规则</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// true   //正则表达式的方法 , 参数为字符串 , 如果符合则返回true</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//[\"abc\"]  // 字符串的方法,参数为正则表达式 , 返回找到的字符串</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"igm\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 构造函数定义规则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>i</code> 忽略大小写</p>\n<p><code>g</code> 全局匹配</p>\n<p><code>m</code> 多行匹配</p>\n<blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^a/gm</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// ^a 以a开头  g 全局查找  m 换行匹配</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\\na\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// `\\n`表示换行 ,</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[\"a\", \"a\"]  //有m则返回两个a , 去掉则返回一个a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p><code>^</code>以什么打头 如果放到 []里面则表示非</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/[^a]/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//非a 查找不是a的单个字符</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// [\"b\"]   如果加上 g 则返回[\"b\" , \"c\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>()</code>优先计算     子表达式    会把括号中匹配的信息也返回</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/(abc|bcd)/</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//匹配abc或者bcd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>$</code> 以什么结尾</p>\n</blockquote>\n</blockquote>\n<h2 id=\"表达式-和-元字符\"><a href=\"#表达式-和-元字符\" class=\"headerlink\" title=\"表达式 和 元字符\"></a>表达式 和 元字符</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/[能取到的范围]/</span><span class=\"token punctuation\">;</span> \n\\w <span class=\"token operator\">===</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>9A<span class=\"token operator\">-</span>z_<span class=\"token punctuation\">]</span> \n\\W <span class=\"token operator\">===</span>\\w\n\\s <span class=\"token comment\" spellcheck=\"true\">//空白字符 空格 \\n换行符  \\f换页符  \\r回车符  \\t制表符 \\v垂直制表符</span>\n\\S <span class=\"token comment\" spellcheck=\"true\">//非空白字符  </span>\n\\d  <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\\D  <span class=\"token comment\" spellcheck=\"true\">//非数字</span>\n\\b  <span class=\"token comment\" spellcheck=\"true\">//单词边界</span>\n\\B  <span class=\"token comment\" spellcheck=\"true\">//非单词边界</span>\n<span class=\"token comment\" spellcheck=\"true\">//存在字符\\w和\\W相邻,那么这两个字符之间就有单词边界 , 包括字符串首尾</span>\n    <span class=\"token keyword\">var</span> str6 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc_d,123中文_d3=efg汉字a\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> reg6 <span class=\"token operator\">=</span> <span class=\"token regex\">/[\\d\\D]\\b/g</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//[\"d\", \",\", \"3\", \"文\", \"3\", \"=\", \"g\", \"字\", \"a\"]  // 匹配的是 右边存在单词边界的字符</span>\n <span class=\"token punctuation\">.</span>  <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">^</span>\\r\\n<span class=\"token punctuation\">]</span>   <span class=\"token comment\" spellcheck=\"true\">//非回车换行符的任意字符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><blockquote>\n<p><code>+</code>  一次以上 <code>{1,}</code></p>\n<p><code>*</code> 任意次   <code>{0,}</code></p>\n<p><code>?</code>  0 个 或 1个 <code>{0,1}</code></p>\n<p>默认贪婪匹配 量词后边 用 <code>?</code>修饰表示非贪婪</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><blockquote>\n<p><code>reg.exec();</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/ab/g</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 不加 g lastIndex不会变 , 每次匹配的都是第一个ab</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abababab\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[ab] //第一个ab  reg.lastIndex 变为2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[ab] //从游标为2的地方匹配第二个ab   reg.lastIndex 变为4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<blockquote>\n<p><code>str.split(reg)</code>    – 按正则表达式拆分字符串</p>\n<p><code>str.replace</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//把字符串中找到的第一个 a 替换成 b</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/a/g</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg <span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//这样可以实现把所有的 a 替换成 b 如果把 g 去掉 也只能替换第一个 a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>str.toUpperCase()</code>  //把字符串 str中的字母全变成大写</p>\n<p><code>str.toLowerCase()</code> //字符串字母变小写</p>\n</blockquote>\n<h2 id=\"正向预查-或者-正向断言\"><a href=\"#正向预查-或者-正向断言\" class=\"headerlink\" title=\"正向预查  或者  正向断言\"></a>正向预查  或者  正向断言</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abaaaa\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/a(?=b)/g</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// (?=b)不参与选择 , 只参与限定 限定 a 的后边要跟着b </span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/a(?!b)/g</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// (?=b)不参与选择 , 只参与限定 限定 a 的后边不是 b </span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// [\"a\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h2><blockquote>\n<p>检验字符串首尾是否含有数字</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^\\d | \\d$/</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>匹配四个重复值</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w)\\1\\1\\1/g</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// \\1 引用第一个表达式中匹配的值  \\2 就是第二个 依次类推</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>把 <code>aabb</code> 这种形式的字符串反过来变成 <code>bbaa</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"aabb\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg  <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w)\\1(\\w)\\2/g</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg <span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2$2$1$1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//这里如果就是要替换成 $ 的话 要写 $$ ,类似于转义</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//另外的方法</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w)\\1(\\w)\\2/g</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$ <span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//三个参数一次接收 整个表达式返回结果 , 第一个子表达式结果 , 第二个子表达式结果</span>\n    <span class=\"token keyword\">return</span> $<span class=\"token number\">2</span> <span class=\"token operator\">+</span> $<span class=\"token number\">2</span> <span class=\"token operator\">+</span> $<span class=\"token number\">1</span> <span class=\"token operator\">+</span> $<span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把 // the-first-name 变成小驼峰命名式 // theFirstName</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"the-first-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/-(\\w)/g</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$ <span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>字符串去重</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"aaaabbbccc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w)\\1*/g</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"$1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>把 1000000 变成 1.000.000</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"1000000\"</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\\B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>$<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>g  <span class=\"token comment\" spellcheck=\"true\">//匹配后边跟的是一个非单词边界和3的倍数个数字的空白字符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"正则表达式-RegExp\"><a href=\"#正则表达式-RegExp\" class=\"headerlink\" title=\"正则表达式(RegExp)\"></a>正则表达式(RegExp)</h1><h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><blockquote>\n<pre><code class=\"js\">var reg = /abc/igm;  //字面量定义规则\nvar str = &quot;abcd&quot;;\nreg.test(str);  // true   //正则表达式的方法 , 参数为字符串 , 如果符合则返回true\nstr.match(reg);  //[&quot;abc&quot;]  // 字符串的方法,参数为正则表达式 , 返回找到的字符串\nvar reg = new RegExp(&quot;abc&quot; , &quot;igm&quot;) // 构造函数定义规则</code></pre>\n<blockquote>\n<p><code>i</code> 忽略大小写</p>\n<p><code>g</code> 全局匹配</p>\n<p><code>m</code> 多行匹配</p>\n<blockquote>\n<pre><code class=\"js\">var reg = /^a/gm;  // ^a 以a开头  g 全局查找  m 换行匹配\nvar str = &quot;abc\\na&quot;;  // `\\n`表示换行 ,\nstr.match(reg); //[&quot;a&quot;, &quot;a&quot;]  //有m则返回两个a , 去掉则返回一个a</code></pre>\n</blockquote>\n<p><code>^</code>以什么打头 如果放到 []里面则表示非</p>\n<pre><code class=\"js\">var reg = /[^a]/; //非a 查找不是a的单个字符\nvar str = /abc/;\nstr.match(reg); // [&quot;b&quot;]   如果加上 g 则返回[&quot;b&quot; , &quot;c&quot;]</code></pre>\n<p><code>()</code>优先计算     子表达式    会把括号中匹配的信息也返回</p>\n<pre><code class=\"js\">var reg = /(abc|bcd)/;  //匹配abc或者bcd</code></pre>\n<p><code>$</code> 以什么结尾</p>\n</blockquote>\n</blockquote>\n<h2 id=\"表达式-和-元字符\"><a href=\"#表达式-和-元字符\" class=\"headerlink\" title=\"表达式 和 元字符\"></a>表达式 和 元字符</h2><blockquote>\n<pre><code class=\"js\">var reg = /[能取到的范围]/; \n\\w ===[0-9A-z_] \n\\W ===\\w\n\\s //空白字符 空格 \\n换行符  \\f换页符  \\r回车符  \\t制表符 \\v垂直制表符\n\\S //非空白字符  \n\\d  === [0-9]\n\\D  //非数字\n\\b  //单词边界\n\\B  //非单词边界\n//存在字符\\w和\\W相邻,那么这两个字符之间就有单词边界 , 包括字符串首尾\n    var str6 = &quot;abc_d,123中文_d3=efg汉字a&quot;;\n    var reg6 = /[\\d\\D]\\b/g;\n    console.log(str6.match(reg6));  //[&quot;d&quot;, &quot;,&quot;, &quot;3&quot;, &quot;文&quot;, &quot;3&quot;, &quot;=&quot;, &quot;g&quot;, &quot;字&quot;, &quot;a&quot;]  // 匹配的是 右边存在单词边界的字符\n .  === [^\\r\\n]   //非回车换行符的任意字符</code></pre>\n</blockquote>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><blockquote>\n<p><code>+</code>  一次以上 <code>{1,}</code></p>\n<p><code>*</code> 任意次   <code>{0,}</code></p>\n<p><code>?</code>  0 个 或 1个 <code>{0,1}</code></p>\n<p>默认贪婪匹配 量词后边 用 <code>?</code>修饰表示非贪婪</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><blockquote>\n<p><code>reg.exec();</code></p>\n<pre><code class=\"js\">var reg = /ab/g;  // 不加 g lastIndex不会变 , 每次匹配的都是第一个ab\nvar str = &quot;abababab&quot;;\nconsole.log(reg.exec(str)); //[ab] //第一个ab  reg.lastIndex 变为2\nconsole.log(reg.exec(str)); //[ab] //从游标为2的地方匹配第二个ab   reg.lastIndex 变为4</code></pre>\n</blockquote>\n<blockquote>\n<p><code>str.split(reg)</code>    – 按正则表达式拆分字符串</p>\n<p><code>str.replace</code></p>\n<pre><code class=\"js\">str.replace(&quot;a&quot;,  &quot;b&quot;);  //把字符串中找到的第一个 a 替换成 b\nvar reg = /a/g;\nstr.replace(reg , &quot;b&quot;);  //这样可以实现把所有的 a 替换成 b 如果把 g 去掉 也只能替换第一个 a</code></pre>\n<p><code>str.toUpperCase()</code>  //把字符串 str中的字母全变成大写</p>\n<p><code>str.toLowerCase()</code> //字符串字母变小写</p>\n</blockquote>\n<h2 id=\"正向预查-或者-正向断言\"><a href=\"#正向预查-或者-正向断言\" class=\"headerlink\" title=\"正向预查  或者  正向断言\"></a>正向预查  或者  正向断言</h2><blockquote>\n<pre><code class=\"js\">var str = &quot;abaaaa&quot;;\nvar reg = /a(?=b)/g;  // (?=b)不参与选择 , 只参与限定 限定 a 的后边要跟着b \nvar reg = /a(?!b)/g;  // (?=b)不参与选择 , 只参与限定 限定 a 的后边不是 b \nstr.match(reg);// [&quot;a&quot;]</code></pre>\n</blockquote>\n<h2 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h2><blockquote>\n<p>检验字符串首尾是否含有数字</p>\n<pre><code class=\"js\">var reg = /^\\d | \\d$/;</code></pre>\n<p>匹配四个重复值</p>\n<pre><code class=\"js\">var reg = /(\\w)\\1\\1\\1/g;  // \\1 引用第一个表达式中匹配的值  \\2 就是第二个 依次类推</code></pre>\n<p>把 <code>aabb</code> 这种形式的字符串反过来变成 <code>bbaa</code></p>\n<pre><code class=\"js\">var str = &quot;aabb&quot;;\nvar reg  = /(\\w)\\1(\\w)\\2/g;\nstr.replace(reg , &quot;$2$2$1$1&quot;) //这里如果就是要替换成 $ 的话 要写 $$ ,类似于转义\n\n//另外的方法\nvar reg = /(\\w)\\1(\\w)\\2/g;\nstr.replace(reg, function ($ , $1 , $2){ //三个参数一次接收 整个表达式返回结果 , 第一个子表达式结果 , 第二个子表达式结果\n    return $2 + $2 + $1 + $1\n});</code></pre>\n<p>把 // the-first-name 变成小驼峰命名式 // theFirstName</p>\n<pre><code class=\"js\">var str = &quot;the-first-name&quot;;\nvar reg = /-(\\w)/g;\nstr.replace(reg, function ($ , $1){\n    return $1.toUpperCase();\n})</code></pre>\n<p>字符串去重</p>\n<pre><code class=\"js\">var str = &quot;aaaabbbccc&quot;;\nvar reg = /(\\w)\\1*/g;\nstr.replace(reg, &quot;$1&quot;);</code></pre>\n<p>把 1000000 变成 1.000.000</p>\n<pre><code class=\"js\">var str = &quot;1000000&quot;\nvar reg = /(?=(\\B)(\\d{3})+$)/g  //匹配后边跟的是一个非单词边界和3的倍数个数字的空白字符\nstr.replace(reg, &quot;.&quot;);</code></pre>\n</blockquote>\n"},{"title":"JavaScript同步和异步","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-22T23:14:57.000Z","password":null,"summary":"发送一个请求,不等待返回,随时可以再发送下一个请求","_content":"\n# 同步和异步\n\n## 同步\n\n> 所谓同步编程,就是计算机一行一行按顺序依次执行代码,是一种典型的请求-响应模型.\n>\n> 当前代码比较耗时会阻塞后续代码的执行,当请求调用一个函数或者方法后,需等待其响应返回,然后执行后续代码.\n\n**类似于生活中规范的排队,即使前面的人动作很慢,后面的人也要等着.**\n\n## 异步\n\n> 一般情况下,同步编程,代码依次执行能很好的保证程序的执行,\n>\n> 但是在某些场景中,比如读取文件内容,或者请求服务器接口数据,这些请求需要根据返回的数据内容,来执行后续操作,\n>\n> 等待数据返回的时间中,JavaScript是不能处理页面交互,滚动等操作的,\n>\n> 所以需要异步编程来解决这个问题,JavaScript执行异步任务时,不需要等待响应返回,可以继续执行其他任务,\n>\n> 而在响应返回时,会得到通知,并执行回调或者事件处理程序.\n>\n> CPU不用等待而继续执行,  其实是交给,硬盘,光驱,声卡,网卡,显卡这些硬件, 他们是可以不消耗CPU资源而自动与内存交换数据的，这也是实现异步的基本条件，当数据交互完成，会告诉CPU执行完了,再触发指定的回调函数\n>\n> 就像打游戏要买一块好的显卡,因为涉及到大量的I/O操作应该就是为了对CPU能力的补充\n>\n> 当处理CPU走不开的异步操作就要通过线程池开启一个新的线程去完成,就变成了多线程\n\n**类似于排队的人有的人没带钱,需要找朋友来帮他付钱,需要时间比较长,就让后面的人先买,等他朋友来了再付钱,朋友就类似于硬盘和显卡.**\n\n> 简单描述下线程池:\n>\n> 线程池：基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。\n\n# 单线程和多线程\n\n> 说道这里稍微提一下单线程和多线程,\n>\n> 单线程就可以理解为你自己排队买吃的.\n>\n> 多线程就是你这边在排队买东西,你想买很多东西,但是排一次队只能买一个,\n>\n> 但是买东西的窗口有很多个,你就让你朋友去帮你排队买另一个这就形成了多线程\n>\n> 线程就可以理解为买东西排的队伍.\n>\n> 把你比作一个程序的话,通过朋友你就实现了同时占用两个线程\n>\n> 如果地方足够大的话,你还可以让你的家人帮你排别的队伍.\n>\n> 买东西的地方就可以理解为CPU.\n>\n> 线程补充介绍 : [点击链接](https://blog.csdn.net/hr10230322/article/details/78642898)\n\n------\n\n\n\n# 总结\n\n- 多线程\n  - 最大的问题在于线程本身的调度和运行需要很多的时间,因此不建议创建太大量的线程;\n  - 共享资源的调度比较难,涉及到[死锁](https://blog.csdn.net/hd12370/article/details/82814348),上锁等相关的概念\n- 异步\n  - 最大的问题在于回调,这增加了软件设计上的难度\n\n> 在实际设计时,我们可以将两者结合起来:\n>\n> > 当需要执行I/O操作时,使用异步操作比使用线程 + 同步I/O操作更合适\n> >\n> > I/O操作不仅包括了直接的文件,网络的读写,还包括数据库操作,WebServer,HttpRequest以及.netRemoting等跨进程的调用\n> >\n> > 异步特别适用于大多数I/O密集型的应用程序\n>\n> > 而线程的适用范围则是那种需要长时间CPU运算的场合,例如耗时较长的图形处理和算法执行\n> >\n> > 但是往往由于适用线程编程的简单和符合习惯,所以很多朋友往往会使用线程来执行耗时较长的I/O操作\n> >\n> > 这样在只有少数几个并发操作的时候还无伤大雅,如果需要处理大量的并发操作时就不合适了\n\n\n\n\n\n\n\n# 并行和并发\n\n**而JavaScript其实是单线程的`(只有一个队伍)`,但是又想实现多线程的效果,所以有了异步**\n\n## 并行\n\n**多线程可以实现边走路边打电话, 也就是同一时刻多任务同时进行 ,也就是并行**\n\n## 并发\n\n**而异步则是跑步跑不动了,但是我还没跑完,在我恢复体力之前去吃点东西,等恢复体力了再回来跑 , 虽然我不能同时吃饭和跑步,但是吃饭和跑步事件都发生了,也就是并发 **\n\n\n\n# 并发模型\n\n## 相关概念\n\n异步编程实现并发执行的的基础是基于事件循环的并发模型\n\n再讲并发模型之前先简单介绍下堆栈与队列\n\n![堆栈与队列](1579733173618.png)\n\n### 堆(heap)\n\n随便堆砌数据,没有顺序,通常存储对象(引用类型)\n\n### 栈(stack)\n\n类似于口袋,先放进去的在最底下,想拿出来就要把后放进去的一个一个拿出来`(先进后出)`,\n\n通常存储函数参数和基本类型值变量`(按值访问)`\n\n### 队列(queue)\n\n`先进先出`的顺序存储数据结构\n\n**待处理消息的列表，每条消息都关联一个回调函数。**\n\n　　**JavaScript是单线程的（多进程/多线程往往有更大的内存开销、上下文切换开销和数据竞争问题等），这意味着需要有一个队列保存异步执行的代码。**\n\n　　I、入队操作。例如，某个按钮被按下时，它的事件处理器代码被添加到队列；接收到某个Ajax响应时，回调函数的代码被添加到队列；**对于定时器，当指定时间过去后将其回调函数的代码添加到队列。**\n\n　　II、出队操作。**队列中没有任何代码是立刻执行的，但一旦进程空闲（此时栈为空）则尽快执行**。进程每次从队列中取出一条消息并调用其回调函数（**异步操作的结果通过回调函数获得**）。这使得栈变为非空。当栈再次变为空时，表示该消息处理完毕。\n\n### 事件循环\n\n得名于它通常的实现方式：\n\n```\n// 所谓事件循环，就像代码从一个循环中不断取出而运行一样\nwhile (queue.waitForMessage()) { queue.processNextMessage(); }  // waitForMessage()：当前没有消息时执行同步等待\n```\n\n## 模型特点：\n\n### **完整运行**（Run-to-completion）：\n\n每条消息处理完成后，再处理其他消息。\n\n　　进入一个函数后，只有在它完整运行后才会“切换”到其他代码，从而无需担心函数操作的数据被意外修改。\n\n　　不足之处在于，如果一条消息处理时间过长，则Web应用程序无法响应用户的交互操作，浏览器将提示\"a script is taking too long to run\"。一个好的做法是缩短消息处理过程，并尽可能把一条消息“切分”为多条。\n\n　　例子：\n\n```\nsetTimeout(function cb() { console.log('5 seconds timeout'); }, 5000);\nsetTimeout(function cb() { console.log('9 seconds timeout'); }, 9000);\nsetTimeout(function cb() { console.log('7 seconds timeout'); }, 7000);\nsetTimeout(function cb() { console.log('3 seconds timeout'); }, 3000);\n\nfor(var start = +new Date; +new Date - start <= 10000; ) {}  // “模拟”睡眠\n```\n\n\n\n　　运行大约10s后，输出：\n\n```\n3 seconds timeout\n5 seconds timeout\n7 seconds timeout\n9 seconds timeout\n```\n\n### 从不阻塞\n\n（也有例外，如alert或同步XHR，但最好避免使用它们）：I/O的处理一般借助于事件和回调函数，因此当应用程序在等待一个IndexedDB查询或一个XHR请求返回时，它仍可以处理其他事情。\n\n \n\n# JS执行环境中的两个结构\n\n[消息队列(messagequeue)](https://www.jianshu.com/p/36a7775b04ec)\n\n消息队列也叫任务队列(taskqueue) : 存储待处理消息及对应的回调函数或事件处理程序.\n\n[执行栈(executioncontextstack)](https://blog.csdn.net/qq_41973396/article/details/88696343)","source":"_posts/JavaScript同步和异步.md","raw":"---\ntitle: JavaScript同步和异步\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-23 07:14:57\npassword:\nsummary: 发送一个请求,不等待返回,随时可以再发送下一个请求 \ntags:\n- JavaScript\ncategories:\n- 前端\n---\n\n# 同步和异步\n\n## 同步\n\n> 所谓同步编程,就是计算机一行一行按顺序依次执行代码,是一种典型的请求-响应模型.\n>\n> 当前代码比较耗时会阻塞后续代码的执行,当请求调用一个函数或者方法后,需等待其响应返回,然后执行后续代码.\n\n**类似于生活中规范的排队,即使前面的人动作很慢,后面的人也要等着.**\n\n## 异步\n\n> 一般情况下,同步编程,代码依次执行能很好的保证程序的执行,\n>\n> 但是在某些场景中,比如读取文件内容,或者请求服务器接口数据,这些请求需要根据返回的数据内容,来执行后续操作,\n>\n> 等待数据返回的时间中,JavaScript是不能处理页面交互,滚动等操作的,\n>\n> 所以需要异步编程来解决这个问题,JavaScript执行异步任务时,不需要等待响应返回,可以继续执行其他任务,\n>\n> 而在响应返回时,会得到通知,并执行回调或者事件处理程序.\n>\n> CPU不用等待而继续执行,  其实是交给,硬盘,光驱,声卡,网卡,显卡这些硬件, 他们是可以不消耗CPU资源而自动与内存交换数据的，这也是实现异步的基本条件，当数据交互完成，会告诉CPU执行完了,再触发指定的回调函数\n>\n> 就像打游戏要买一块好的显卡,因为涉及到大量的I/O操作应该就是为了对CPU能力的补充\n>\n> 当处理CPU走不开的异步操作就要通过线程池开启一个新的线程去完成,就变成了多线程\n\n**类似于排队的人有的人没带钱,需要找朋友来帮他付钱,需要时间比较长,就让后面的人先买,等他朋友来了再付钱,朋友就类似于硬盘和显卡.**\n\n> 简单描述下线程池:\n>\n> 线程池：基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。\n\n# 单线程和多线程\n\n> 说道这里稍微提一下单线程和多线程,\n>\n> 单线程就可以理解为你自己排队买吃的.\n>\n> 多线程就是你这边在排队买东西,你想买很多东西,但是排一次队只能买一个,\n>\n> 但是买东西的窗口有很多个,你就让你朋友去帮你排队买另一个这就形成了多线程\n>\n> 线程就可以理解为买东西排的队伍.\n>\n> 把你比作一个程序的话,通过朋友你就实现了同时占用两个线程\n>\n> 如果地方足够大的话,你还可以让你的家人帮你排别的队伍.\n>\n> 买东西的地方就可以理解为CPU.\n>\n> 线程补充介绍 : [点击链接](https://blog.csdn.net/hr10230322/article/details/78642898)\n\n------\n\n\n\n# 总结\n\n- 多线程\n  - 最大的问题在于线程本身的调度和运行需要很多的时间,因此不建议创建太大量的线程;\n  - 共享资源的调度比较难,涉及到[死锁](https://blog.csdn.net/hd12370/article/details/82814348),上锁等相关的概念\n- 异步\n  - 最大的问题在于回调,这增加了软件设计上的难度\n\n> 在实际设计时,我们可以将两者结合起来:\n>\n> > 当需要执行I/O操作时,使用异步操作比使用线程 + 同步I/O操作更合适\n> >\n> > I/O操作不仅包括了直接的文件,网络的读写,还包括数据库操作,WebServer,HttpRequest以及.netRemoting等跨进程的调用\n> >\n> > 异步特别适用于大多数I/O密集型的应用程序\n>\n> > 而线程的适用范围则是那种需要长时间CPU运算的场合,例如耗时较长的图形处理和算法执行\n> >\n> > 但是往往由于适用线程编程的简单和符合习惯,所以很多朋友往往会使用线程来执行耗时较长的I/O操作\n> >\n> > 这样在只有少数几个并发操作的时候还无伤大雅,如果需要处理大量的并发操作时就不合适了\n\n\n\n\n\n\n\n# 并行和并发\n\n**而JavaScript其实是单线程的`(只有一个队伍)`,但是又想实现多线程的效果,所以有了异步**\n\n## 并行\n\n**多线程可以实现边走路边打电话, 也就是同一时刻多任务同时进行 ,也就是并行**\n\n## 并发\n\n**而异步则是跑步跑不动了,但是我还没跑完,在我恢复体力之前去吃点东西,等恢复体力了再回来跑 , 虽然我不能同时吃饭和跑步,但是吃饭和跑步事件都发生了,也就是并发 **\n\n\n\n# 并发模型\n\n## 相关概念\n\n异步编程实现并发执行的的基础是基于事件循环的并发模型\n\n再讲并发模型之前先简单介绍下堆栈与队列\n\n![堆栈与队列](1579733173618.png)\n\n### 堆(heap)\n\n随便堆砌数据,没有顺序,通常存储对象(引用类型)\n\n### 栈(stack)\n\n类似于口袋,先放进去的在最底下,想拿出来就要把后放进去的一个一个拿出来`(先进后出)`,\n\n通常存储函数参数和基本类型值变量`(按值访问)`\n\n### 队列(queue)\n\n`先进先出`的顺序存储数据结构\n\n**待处理消息的列表，每条消息都关联一个回调函数。**\n\n　　**JavaScript是单线程的（多进程/多线程往往有更大的内存开销、上下文切换开销和数据竞争问题等），这意味着需要有一个队列保存异步执行的代码。**\n\n　　I、入队操作。例如，某个按钮被按下时，它的事件处理器代码被添加到队列；接收到某个Ajax响应时，回调函数的代码被添加到队列；**对于定时器，当指定时间过去后将其回调函数的代码添加到队列。**\n\n　　II、出队操作。**队列中没有任何代码是立刻执行的，但一旦进程空闲（此时栈为空）则尽快执行**。进程每次从队列中取出一条消息并调用其回调函数（**异步操作的结果通过回调函数获得**）。这使得栈变为非空。当栈再次变为空时，表示该消息处理完毕。\n\n### 事件循环\n\n得名于它通常的实现方式：\n\n```\n// 所谓事件循环，就像代码从一个循环中不断取出而运行一样\nwhile (queue.waitForMessage()) { queue.processNextMessage(); }  // waitForMessage()：当前没有消息时执行同步等待\n```\n\n## 模型特点：\n\n### **完整运行**（Run-to-completion）：\n\n每条消息处理完成后，再处理其他消息。\n\n　　进入一个函数后，只有在它完整运行后才会“切换”到其他代码，从而无需担心函数操作的数据被意外修改。\n\n　　不足之处在于，如果一条消息处理时间过长，则Web应用程序无法响应用户的交互操作，浏览器将提示\"a script is taking too long to run\"。一个好的做法是缩短消息处理过程，并尽可能把一条消息“切分”为多条。\n\n　　例子：\n\n```\nsetTimeout(function cb() { console.log('5 seconds timeout'); }, 5000);\nsetTimeout(function cb() { console.log('9 seconds timeout'); }, 9000);\nsetTimeout(function cb() { console.log('7 seconds timeout'); }, 7000);\nsetTimeout(function cb() { console.log('3 seconds timeout'); }, 3000);\n\nfor(var start = +new Date; +new Date - start <= 10000; ) {}  // “模拟”睡眠\n```\n\n\n\n　　运行大约10s后，输出：\n\n```\n3 seconds timeout\n5 seconds timeout\n7 seconds timeout\n9 seconds timeout\n```\n\n### 从不阻塞\n\n（也有例外，如alert或同步XHR，但最好避免使用它们）：I/O的处理一般借助于事件和回调函数，因此当应用程序在等待一个IndexedDB查询或一个XHR请求返回时，它仍可以处理其他事情。\n\n \n\n# JS执行环境中的两个结构\n\n[消息队列(messagequeue)](https://www.jianshu.com/p/36a7775b04ec)\n\n消息队列也叫任务队列(taskqueue) : 存储待处理消息及对应的回调函数或事件处理程序.\n\n[执行栈(executioncontextstack)](https://blog.csdn.net/qq_41973396/article/details/88696343)","slug":"JavaScript同步和异步","published":1,"updated":"2020-01-31T05:29:26.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frke4000fwcq4i5kefzvf","content":"<h1 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h1><h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><blockquote>\n<p>所谓同步编程,就是计算机一行一行按顺序依次执行代码,是一种典型的请求-响应模型.</p>\n<p>当前代码比较耗时会阻塞后续代码的执行,当请求调用一个函数或者方法后,需等待其响应返回,然后执行后续代码.</p>\n</blockquote>\n<p><strong>类似于生活中规范的排队,即使前面的人动作很慢,后面的人也要等着.</strong></p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><blockquote>\n<p>一般情况下,同步编程,代码依次执行能很好的保证程序的执行,</p>\n<p>但是在某些场景中,比如读取文件内容,或者请求服务器接口数据,这些请求需要根据返回的数据内容,来执行后续操作,</p>\n<p>等待数据返回的时间中,JavaScript是不能处理页面交互,滚动等操作的,</p>\n<p>所以需要异步编程来解决这个问题,JavaScript执行异步任务时,不需要等待响应返回,可以继续执行其他任务,</p>\n<p>而在响应返回时,会得到通知,并执行回调或者事件处理程序.</p>\n<p>CPU不用等待而继续执行,  其实是交给,硬盘,光驱,声卡,网卡,显卡这些硬件, 他们是可以不消耗CPU资源而自动与内存交换数据的，这也是实现异步的基本条件，当数据交互完成，会告诉CPU执行完了,再触发指定的回调函数</p>\n<p>就像打游戏要买一块好的显卡,因为涉及到大量的I/O操作应该就是为了对CPU能力的补充</p>\n<p>当处理CPU走不开的异步操作就要通过线程池开启一个新的线程去完成,就变成了多线程</p>\n</blockquote>\n<p><strong>类似于排队的人有的人没带钱,需要找朋友来帮他付钱,需要时间比较长,就让后面的人先买,等他朋友来了再付钱,朋友就类似于硬盘和显卡.</strong></p>\n<blockquote>\n<p>简单描述下线程池:</p>\n<p>线程池：基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。</p>\n</blockquote>\n<h1 id=\"单线程和多线程\"><a href=\"#单线程和多线程\" class=\"headerlink\" title=\"单线程和多线程\"></a>单线程和多线程</h1><blockquote>\n<p>说道这里稍微提一下单线程和多线程,</p>\n<p>单线程就可以理解为你自己排队买吃的.</p>\n<p>多线程就是你这边在排队买东西,你想买很多东西,但是排一次队只能买一个,</p>\n<p>但是买东西的窗口有很多个,你就让你朋友去帮你排队买另一个这就形成了多线程</p>\n<p>线程就可以理解为买东西排的队伍.</p>\n<p>把你比作一个程序的话,通过朋友你就实现了同时占用两个线程</p>\n<p>如果地方足够大的话,你还可以让你的家人帮你排别的队伍.</p>\n<p>买东西的地方就可以理解为CPU.</p>\n<p>线程补充介绍 : <a href=\"https://blog.csdn.net/hr10230322/article/details/78642898\" target=\"_blank\" rel=\"noopener\">点击链接</a></p>\n</blockquote>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>多线程<ul>\n<li>最大的问题在于线程本身的调度和运行需要很多的时间,因此不建议创建太大量的线程;</li>\n<li>共享资源的调度比较难,涉及到<a href=\"https://blog.csdn.net/hd12370/article/details/82814348\" target=\"_blank\" rel=\"noopener\">死锁</a>,上锁等相关的概念</li>\n</ul>\n</li>\n<li>异步<ul>\n<li>最大的问题在于回调,这增加了软件设计上的难度</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在实际设计时,我们可以将两者结合起来:</p>\n<blockquote>\n<p>当需要执行I/O操作时,使用异步操作比使用线程 + 同步I/O操作更合适</p>\n<p>I/O操作不仅包括了直接的文件,网络的读写,还包括数据库操作,WebServer,HttpRequest以及.netRemoting等跨进程的调用</p>\n<p>异步特别适用于大多数I/O密集型的应用程序</p>\n</blockquote>\n<blockquote>\n<p>而线程的适用范围则是那种需要长时间CPU运算的场合,例如耗时较长的图形处理和算法执行</p>\n<p>但是往往由于适用线程编程的简单和符合习惯,所以很多朋友往往会使用线程来执行耗时较长的I/O操作</p>\n<p>这样在只有少数几个并发操作的时候还无伤大雅,如果需要处理大量的并发操作时就不合适了</p>\n</blockquote>\n</blockquote>\n<h1 id=\"并行和并发\"><a href=\"#并行和并发\" class=\"headerlink\" title=\"并行和并发\"></a>并行和并发</h1><p><strong>而JavaScript其实是单线程的<code>(只有一个队伍)</code>,但是又想实现多线程的效果,所以有了异步</strong></p>\n<h2 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h2><p><strong>多线程可以实现边走路边打电话, 也就是同一时刻多任务同时进行 ,也就是并行</strong></p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p><em><em>而异步则是跑步跑不动了,但是我还没跑完,在我恢复体力之前去吃点东西,等恢复体力了再回来跑 , 虽然我不能同时吃饭和跑步,但是吃饭和跑步事件都发生了,也就是并发 </em></em></p>\n<h1 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h1><h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><p>异步编程实现并发执行的的基础是基于事件循环的并发模型</p>\n<p>再讲并发模型之前先简单介绍下堆栈与队列</p>\n<p><img src=\"1579733173618.png\" alt=\"堆栈与队列\"></p>\n<h3 id=\"堆-heap\"><a href=\"#堆-heap\" class=\"headerlink\" title=\"堆(heap)\"></a>堆(heap)</h3><p>随便堆砌数据,没有顺序,通常存储对象(引用类型)</p>\n<h3 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h3><p>类似于口袋,先放进去的在最底下,想拿出来就要把后放进去的一个一个拿出来<code>(先进后出)</code>,</p>\n<p>通常存储函数参数和基本类型值变量<code>(按值访问)</code></p>\n<h3 id=\"队列-queue\"><a href=\"#队列-queue\" class=\"headerlink\" title=\"队列(queue)\"></a>队列(queue)</h3><p><code>先进先出</code>的顺序存储数据结构</p>\n<p><strong>待处理消息的列表，每条消息都关联一个回调函数。</strong></p>\n<p>　　<strong>JavaScript是单线程的（多进程/多线程往往有更大的内存开销、上下文切换开销和数据竞争问题等），这意味着需要有一个队列保存异步执行的代码。</strong></p>\n<p>　　I、入队操作。例如，某个按钮被按下时，它的事件处理器代码被添加到队列；接收到某个Ajax响应时，回调函数的代码被添加到队列；<strong>对于定时器，当指定时间过去后将其回调函数的代码添加到队列。</strong></p>\n<p>　　II、出队操作。<strong>队列中没有任何代码是立刻执行的，但一旦进程空闲（此时栈为空）则尽快执行</strong>。进程每次从队列中取出一条消息并调用其回调函数（<strong>异步操作的结果通过回调函数获得</strong>）。这使得栈变为非空。当栈再次变为空时，表示该消息处理完毕。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>得名于它通常的实现方式：</p>\n<pre><code>// 所谓事件循环，就像代码从一个循环中不断取出而运行一样\nwhile (queue.waitForMessage()) { queue.processNextMessage(); }  // waitForMessage()：当前没有消息时执行同步等待</code></pre><h2 id=\"模型特点：\"><a href=\"#模型特点：\" class=\"headerlink\" title=\"模型特点：\"></a>模型特点：</h2><h3 id=\"完整运行（Run-to-completion）：\"><a href=\"#完整运行（Run-to-completion）：\" class=\"headerlink\" title=\"完整运行（Run-to-completion）：\"></a><strong>完整运行</strong>（Run-to-completion）：</h3><p>每条消息处理完成后，再处理其他消息。</p>\n<p>　　进入一个函数后，只有在它完整运行后才会“切换”到其他代码，从而无需担心函数操作的数据被意外修改。</p>\n<p>　　不足之处在于，如果一条消息处理时间过长，则Web应用程序无法响应用户的交互操作，浏览器将提示”a script is taking too long to run”。一个好的做法是缩短消息处理过程，并尽可能把一条消息“切分”为多条。</p>\n<p>　　例子：</p>\n<pre><code>setTimeout(function cb() { console.log(&#39;5 seconds timeout&#39;); }, 5000);\nsetTimeout(function cb() { console.log(&#39;9 seconds timeout&#39;); }, 9000);\nsetTimeout(function cb() { console.log(&#39;7 seconds timeout&#39;); }, 7000);\nsetTimeout(function cb() { console.log(&#39;3 seconds timeout&#39;); }, 3000);\n\nfor(var start = +new Date; +new Date - start &lt;= 10000; ) {}  // “模拟”睡眠</code></pre><p>　　运行大约10s后，输出：</p>\n<pre><code>3 seconds timeout\n5 seconds timeout\n7 seconds timeout\n9 seconds timeout</code></pre><h3 id=\"从不阻塞\"><a href=\"#从不阻塞\" class=\"headerlink\" title=\"从不阻塞\"></a>从不阻塞</h3><p>（也有例外，如alert或同步XHR，但最好避免使用它们）：I/O的处理一般借助于事件和回调函数，因此当应用程序在等待一个IndexedDB查询或一个XHR请求返回时，它仍可以处理其他事情。</p>\n<h1 id=\"JS执行环境中的两个结构\"><a href=\"#JS执行环境中的两个结构\" class=\"headerlink\" title=\"JS执行环境中的两个结构\"></a>JS执行环境中的两个结构</h1><p><a href=\"https://www.jianshu.com/p/36a7775b04ec\" target=\"_blank\" rel=\"noopener\">消息队列(messagequeue)</a></p>\n<p>消息队列也叫任务队列(taskqueue) : 存储待处理消息及对应的回调函数或事件处理程序.</p>\n<p><a href=\"https://blog.csdn.net/qq_41973396/article/details/88696343\" target=\"_blank\" rel=\"noopener\">执行栈(executioncontextstack)</a></p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"同步和异步\"><a href=\"#同步和异步\" class=\"headerlink\" title=\"同步和异步\"></a>同步和异步</h1><h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><blockquote>\n<p>所谓同步编程,就是计算机一行一行按顺序依次执行代码,是一种典型的请求-响应模型.</p>\n<p>当前代码比较耗时会阻塞后续代码的执行,当请求调用一个函数或者方法后,需等待其响应返回,然后执行后续代码.</p>\n</blockquote>\n<p><strong>类似于生活中规范的排队,即使前面的人动作很慢,后面的人也要等着.</strong></p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><blockquote>\n<p>一般情况下,同步编程,代码依次执行能很好的保证程序的执行,</p>\n<p>但是在某些场景中,比如读取文件内容,或者请求服务器接口数据,这些请求需要根据返回的数据内容,来执行后续操作,</p>\n<p>等待数据返回的时间中,JavaScript是不能处理页面交互,滚动等操作的,</p>\n<p>所以需要异步编程来解决这个问题,JavaScript执行异步任务时,不需要等待响应返回,可以继续执行其他任务,</p>\n<p>而在响应返回时,会得到通知,并执行回调或者事件处理程序.</p>\n<p>CPU不用等待而继续执行,  其实是交给,硬盘,光驱,声卡,网卡,显卡这些硬件, 他们是可以不消耗CPU资源而自动与内存交换数据的，这也是实现异步的基本条件，当数据交互完成，会告诉CPU执行完了,再触发指定的回调函数</p>\n<p>就像打游戏要买一块好的显卡,因为涉及到大量的I/O操作应该就是为了对CPU能力的补充</p>\n<p>当处理CPU走不开的异步操作就要通过线程池开启一个新的线程去完成,就变成了多线程</p>\n</blockquote>\n<p><strong>类似于排队的人有的人没带钱,需要找朋友来帮他付钱,需要时间比较长,就让后面的人先买,等他朋友来了再付钱,朋友就类似于硬盘和显卡.</strong></p>\n<blockquote>\n<p>简单描述下线程池:</p>\n<p>线程池：基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多(未死亡)的线程，池中线程执行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。</p>\n</blockquote>\n<h1 id=\"单线程和多线程\"><a href=\"#单线程和多线程\" class=\"headerlink\" title=\"单线程和多线程\"></a>单线程和多线程</h1><blockquote>\n<p>说道这里稍微提一下单线程和多线程,</p>\n<p>单线程就可以理解为你自己排队买吃的.</p>\n<p>多线程就是你这边在排队买东西,你想买很多东西,但是排一次队只能买一个,</p>\n<p>但是买东西的窗口有很多个,你就让你朋友去帮你排队买另一个这就形成了多线程</p>\n<p>线程就可以理解为买东西排的队伍.</p>\n<p>把你比作一个程序的话,通过朋友你就实现了同时占用两个线程</p>\n<p>如果地方足够大的话,你还可以让你的家人帮你排别的队伍.</p>\n<p>买东西的地方就可以理解为CPU.</p>\n<p>线程补充介绍 : <a href=\"https://blog.csdn.net/hr10230322/article/details/78642898\" target=\"_blank\" rel=\"noopener\">点击链接</a></p>\n</blockquote>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>多线程<ul>\n<li>最大的问题在于线程本身的调度和运行需要很多的时间,因此不建议创建太大量的线程;</li>\n<li>共享资源的调度比较难,涉及到<a href=\"https://blog.csdn.net/hd12370/article/details/82814348\" target=\"_blank\" rel=\"noopener\">死锁</a>,上锁等相关的概念</li>\n</ul>\n</li>\n<li>异步<ul>\n<li>最大的问题在于回调,这增加了软件设计上的难度</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在实际设计时,我们可以将两者结合起来:</p>\n<blockquote>\n<p>当需要执行I/O操作时,使用异步操作比使用线程 + 同步I/O操作更合适</p>\n<p>I/O操作不仅包括了直接的文件,网络的读写,还包括数据库操作,WebServer,HttpRequest以及.netRemoting等跨进程的调用</p>\n<p>异步特别适用于大多数I/O密集型的应用程序</p>\n</blockquote>\n<blockquote>\n<p>而线程的适用范围则是那种需要长时间CPU运算的场合,例如耗时较长的图形处理和算法执行</p>\n<p>但是往往由于适用线程编程的简单和符合习惯,所以很多朋友往往会使用线程来执行耗时较长的I/O操作</p>\n<p>这样在只有少数几个并发操作的时候还无伤大雅,如果需要处理大量的并发操作时就不合适了</p>\n</blockquote>\n</blockquote>\n<h1 id=\"并行和并发\"><a href=\"#并行和并发\" class=\"headerlink\" title=\"并行和并发\"></a>并行和并发</h1><p><strong>而JavaScript其实是单线程的<code>(只有一个队伍)</code>,但是又想实现多线程的效果,所以有了异步</strong></p>\n<h2 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h2><p><strong>多线程可以实现边走路边打电话, 也就是同一时刻多任务同时进行 ,也就是并行</strong></p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p><em><em>而异步则是跑步跑不动了,但是我还没跑完,在我恢复体力之前去吃点东西,等恢复体力了再回来跑 , 虽然我不能同时吃饭和跑步,但是吃饭和跑步事件都发生了,也就是并发 </em></em></p>\n<h1 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h1><h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><p>异步编程实现并发执行的的基础是基于事件循环的并发模型</p>\n<p>再讲并发模型之前先简单介绍下堆栈与队列</p>\n<p><img src=\"1579733173618.png\" alt=\"堆栈与队列\"></p>\n<h3 id=\"堆-heap\"><a href=\"#堆-heap\" class=\"headerlink\" title=\"堆(heap)\"></a>堆(heap)</h3><p>随便堆砌数据,没有顺序,通常存储对象(引用类型)</p>\n<h3 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h3><p>类似于口袋,先放进去的在最底下,想拿出来就要把后放进去的一个一个拿出来<code>(先进后出)</code>,</p>\n<p>通常存储函数参数和基本类型值变量<code>(按值访问)</code></p>\n<h3 id=\"队列-queue\"><a href=\"#队列-queue\" class=\"headerlink\" title=\"队列(queue)\"></a>队列(queue)</h3><p><code>先进先出</code>的顺序存储数据结构</p>\n<p><strong>待处理消息的列表，每条消息都关联一个回调函数。</strong></p>\n<p>　　<strong>JavaScript是单线程的（多进程/多线程往往有更大的内存开销、上下文切换开销和数据竞争问题等），这意味着需要有一个队列保存异步执行的代码。</strong></p>\n<p>　　I、入队操作。例如，某个按钮被按下时，它的事件处理器代码被添加到队列；接收到某个Ajax响应时，回调函数的代码被添加到队列；<strong>对于定时器，当指定时间过去后将其回调函数的代码添加到队列。</strong></p>\n<p>　　II、出队操作。<strong>队列中没有任何代码是立刻执行的，但一旦进程空闲（此时栈为空）则尽快执行</strong>。进程每次从队列中取出一条消息并调用其回调函数（<strong>异步操作的结果通过回调函数获得</strong>）。这使得栈变为非空。当栈再次变为空时，表示该消息处理完毕。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>得名于它通常的实现方式：</p>\n<pre><code>// 所谓事件循环，就像代码从一个循环中不断取出而运行一样\nwhile (queue.waitForMessage()) { queue.processNextMessage(); }  // waitForMessage()：当前没有消息时执行同步等待</code></pre><h2 id=\"模型特点：\"><a href=\"#模型特点：\" class=\"headerlink\" title=\"模型特点：\"></a>模型特点：</h2><h3 id=\"完整运行（Run-to-completion）：\"><a href=\"#完整运行（Run-to-completion）：\" class=\"headerlink\" title=\"完整运行（Run-to-completion）：\"></a><strong>完整运行</strong>（Run-to-completion）：</h3><p>每条消息处理完成后，再处理其他消息。</p>\n<p>　　进入一个函数后，只有在它完整运行后才会“切换”到其他代码，从而无需担心函数操作的数据被意外修改。</p>\n<p>　　不足之处在于，如果一条消息处理时间过长，则Web应用程序无法响应用户的交互操作，浏览器将提示”a script is taking too long to run”。一个好的做法是缩短消息处理过程，并尽可能把一条消息“切分”为多条。</p>\n<p>　　例子：</p>\n<pre><code>setTimeout(function cb() { console.log(&#39;5 seconds timeout&#39;); }, 5000);\nsetTimeout(function cb() { console.log(&#39;9 seconds timeout&#39;); }, 9000);\nsetTimeout(function cb() { console.log(&#39;7 seconds timeout&#39;); }, 7000);\nsetTimeout(function cb() { console.log(&#39;3 seconds timeout&#39;); }, 3000);\n\nfor(var start = +new Date; +new Date - start &lt;= 10000; ) {}  // “模拟”睡眠</code></pre><p>　　运行大约10s后，输出：</p>\n<pre><code>3 seconds timeout\n5 seconds timeout\n7 seconds timeout\n9 seconds timeout</code></pre><h3 id=\"从不阻塞\"><a href=\"#从不阻塞\" class=\"headerlink\" title=\"从不阻塞\"></a>从不阻塞</h3><p>（也有例外，如alert或同步XHR，但最好避免使用它们）：I/O的处理一般借助于事件和回调函数，因此当应用程序在等待一个IndexedDB查询或一个XHR请求返回时，它仍可以处理其他事情。</p>\n<h1 id=\"JS执行环境中的两个结构\"><a href=\"#JS执行环境中的两个结构\" class=\"headerlink\" title=\"JS执行环境中的两个结构\"></a>JS执行环境中的两个结构</h1><p><a href=\"https://www.jianshu.com/p/36a7775b04ec\" target=\"_blank\" rel=\"noopener\">消息队列(messagequeue)</a></p>\n<p>消息队列也叫任务队列(taskqueue) : 存储待处理消息及对应的回调函数或事件处理程序.</p>\n<p><a href=\"https://blog.csdn.net/qq_41973396/article/details/88696343\" target=\"_blank\" rel=\"noopener\">执行栈(executioncontextstack)</a></p>\n"},{"title":"JavaScript模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-05T15:09:46.000Z","password":null,"summary":"个人JavaScript学习笔记","_content":"\n#  JavaScript模式\n\n## for循环优化\n\n> 每次访问数组的长度是非常耗时的 , 所以我们将已经遍历过的数组或容器的长度缓存起来,如以下代码//\n\n```js\nfor(var i = 0,max = arr.length;i < max ; i++){\n\t//对arr进行处理    \n}\n```\n\n> 第二种 : 使用最少的变量 , 逐步减至0\n\n```js\nvar i , arr = [];\nfor(i = arr.length ; i-- ;){//省略第三个参数,通过用 i-- 至 0 来终止循环\n    //处理arr\n}\n\n//while循环实现\nvar arr = [],\n    i = arr.length;\nwhile(i--){\n      //梳理arr[i]\n}\n```\n\n> 我们提倡用正常的for循环来处理数组 , 用for - in 循环来处理对象\n\n## hasOwnProperty\n\n> Object的`hasOwnProperty()`方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。 \n\n```js\nconsole.log(person.hasOwnProperty('name')); //查看person对象是否包含自身(非继承)属性 : name;\n```\n\n## 圣杯模式\n\n```js\nfunction inherit(Target,Origin){\n\tfunction F() {};  //定义一个空方法\n    F.prototype = Origin.prototype;  //让空方法的原型等于父亲的原型\n    Target.prototype = new F();      //需要实现继承的方法的原型指向 new F();  -- 这样就实现了对象值传递\n    Target.prototype.constuctor = Target;  //如果不更改构造器的话,Target的构造器会指向Origin , 所以手动更改指向为自身\n    Target.prototype.uber = Origin.prototype;  //添加 uber 属性指明真实继承自哪里\n}\n```\n\n> 利用闭包实现变量私有化\n\n```js\nvar inherit = (function(){\n    var F = function () {};  //利用闭包特性隐藏此方法\n    return function (Target , Origin){  //在立即执行函数中 return 此方法形成闭包\n        F.prototype = Origin.prototype;\n        Target.prototype = new F();\n        Target.prototype.constuctor = Target;\n        Target.prototype.uber = Origin.prototype;\n    }\n});\n```\n\n## instanceof\n\n> `instanceof` A 对象 是不是 B 构造函数构造出来的\n\n```js\nA instanceof B\n// 看A对象的原型链上 有没有 B 的原型\n```\n\n## 区分数组还是对象\n\n> 通过`constructor` 构造器来区分\n\n```js\nvar arr = [];\narr.constructor;  // function Array(){};\nvar obj = {};\nobj.constructor;  // function Object(){};\n```\n\n> `instanceof`\n\n```js\narr instanceof Array; //true\nobj instanceof Object; //true\n```\n\n> `toString`\n\n```js\nObject.prototype.toString.call(arr); // \"[object Array]\"\nObject.prototype.toString.call(obj); // \"[object Object]\"\n```\n\n> ES 5 新增 `Array.isArray([]); //true`  参数为数组时返回 `true`\n\n\n\n## 命名模式\n\n> 构造函数首字母大写\n>\n> 函数名是多个单词的时候 , 构造函数使用大驼峰命名法 , 普通函数使用小驼峰命名法\n>\n> 变量是多个单词 , 使用小写用`_`隔开 ,  或者也使用小驼峰命名法\n>\n> 使用全部大写的方式表示一个常量 , 来表示不要进行修改 , 或者通过全部大写来表示全局变量\n>\n> 使用下划线前缀声明私有函数[方法] 和 属性.\n\n## new\n\n> 当以`new`操作符调用构造函数时 , 函数内部将会发生以下情况 : \n>\n> 1. 创建一个空对象并且`this`变量引用了该对象 , 同时还继承了该函数的原型.\n> 2. 属性和方法被加入到`this`引用的对象中.\n> 3. 新创建的对象由`this`所引用 , 并且最后隐式地返回`this` (如果没有显式的返回其他对象).\n>\n> ```js\n> //以上情况看起来就像是在后台发生了如下事情: \n> var Person = function (name) {\n>     var this = {}; // 使用对象字面量模式创建一个新对象\n>     this.name = name; // 向this添加属性和方法\n>     return this;\n> }\n> ```\n\n## arguments.callee\n\n> 指向函数自身的引用\n\n```js\nfunction test () {\n    console.log(argument.callee); //test 这个函数本身\n}\n```\n\n## caller\n\n> 被调用环境的引用\n\n```js\nfunction test (){\n    demo();\n}\nfunction demo (){\n    console.log(demo.caller); // test这个函数自身\n}\ntest();\n```\n\n## clone - 复制-浅拷贝-深拷贝\n\n> clone - 浅拷贝\n\n```js\n   var obj = {\n       name : \"zhanglei\",\n       age : 18\n   };\n   var obj1 = {};\n   function clone(origin , target){\n       var target = target || {}; //如果传入了target则使用target,否则使用{}\n       for(key in origin) {\n            target[key] = origin[key];\n       }\n       return target;\n   }\n   clone(obj, obj1);\n   console.log(obj1);\n```\n\n> clone - 深拷贝\n\n```js\nvar obj = {\n    name: \"zhanglei\",\n    age: 18,\n    hobby: [1, 2, 3]\n};\nvar obj2 = {}; //空对象\n// 通过函数实现 , 把对象 a 中的所有的数据深拷贝到 b 中\nfunction extend (a, b) {\n    for (var key in a) {\n        //先获取 a 对象中每个属性的值\n        var item = a[key];\n        //判断这个属性的值是不是数组\n        if (item instenceof Array){\n            //如果是数组 , 那么在 b 对象中添加一个新的属性,并且这个属性值也是数组\n            b[key] = [];\n            //调用这个方法, 把 a 对象中这个数组的属性一个一个的复制到 b 对象的这个数组属性中\n            extend(item,b[key]);\n        } else if(item instenceof Object){\n            b[key] = {};\n            extend(item, b[key]);\n        }else{\n            //如果是普通的数据 , 直接复制到 b 对象的这个属性中\n            b[key] = item;\n        }\n    }\n};\nextend(obj,obj2);\n```\n\n## 数组中的常用方法\n\n### 改变原数组\n\n> `push` 从后边添加,并返回添加后的数组长度,可以添加多个,用`,`隔开\n>\n> ```js\n> var arr = [];\n> arr.push(1);\n> arr.push(2,3);\n> arr; //[1,2,3]\n> //手写push方法\n> Array.prototype.push = function () {\n>     for (var i = 0 ; i < arguments.length ; i++){\n>         this[this.length] = arguments[i];\n>     }\n>     return this.length;\n> }\n> ```\n>\n> `pop`把数组的最后一位剪切出来.返回剪切的值,和`push`相对应\n>\n> `shift`从前边减\n>\n> `unshift` 从前边加\n>\n> `sort`排序 , 默认按照 ASCII码排序  视频第27个 ,时间50分钟\n>\n> ```js\n> //1. 必须写俩形参\n> //2. 看返回值\n> \t//1.当返回值为负数时,那么前面的数放在前面\n> \t//2.为正数 , 那么后面的数在前\n> \t//3.为0 . 不动\n> var arr = [1,3,5,4,10];\n> arr.sort(function (a,b){\n>     //return a - b; 升序\n>     //return b - a; 降序\n>     //return Math.random() - 0.5; 打乱顺序\n>     return a - b;\n> });\n> arr; //[1,3,4,5,10];\n> \n> ```\n>\n> \n>\n> \n>\n> `reverse` 翻转顺序\n>\n> ```js\n> var arr = [1,2,3];\n> arr.reverse(); \n> arr; // [3,2,1]\n> ```\n>\n> `splice` 切片\n>\n> > 参数: 从第几位开始 , 截取多少长度 , 在切口处添加数据\n>\n> ```js\n> var arr = [1,2,3,5];\n> arr.splice(3,0,4);\n> arr; //[1,2,3,4,5]\n> ```\n\n### 不改变原数组\n\n> `concat` 连接两个数组\n>\n> ```js\n> var arr = [1,2];\n> var arr2 = [3,4];\n> arr.concat(arr2); //[1,2,3,4]\n> ```\n>\n> `join`数组转换成字符串\n>\n> ```js\n> var arr = [1,2,3]\n> var str = arr.join(\"-\");\n> str;//\"1-2-3\";\n> ```\n>\n> `split`字符串的方法,把字符串按照参数拆分成数组,与`join`互逆\n>\n> ```js\n> var str = \"1-2-3\";\n> var arr = str.split(\"-\");\n> arr; //[\"1\",\"2\",\"3\"]\n> ```\n>\n> `toString`\n>\n> `slice`\n>\n> > 参数1  从该位开始截取\n> >\n> > 参数2  截取到该位\n> >\n> > > 不写第二个参数 , 则截取到最后\n> > >\n> > > 不写参数,则整个截取\n>\n> ```js\n> var arr = [1,2,3,4,5];\n> var newArr = arr.slice(1,3);\n> newArr; //[2,3]\n> ```\n>\n> \n\n## charCodeAt\n\n> 作用：返回指定位置的字符的Unicode编码。这个返回值在0~65535之间的整数。\n>\n> 可以判断返回值是否大于255,来判断时候是中文 \n\n```js\nvar str = \"zl张磊\";\nfunction retBytes(str){\n    var mun = str.length;\n    for(var i = 0; i < str.length; i++){\n        if(str.chatCodeAt(i) > 255){\n           num++;\n        }\n    }\n    return num;\n}\nreBytes(str);//6\n```\n\n## 类数组 \n\n> 看起来像数组 , 但是不具有数组操作的一些方法  视频第28个 \n>\n> DOM元素全是类数组\n\n##  数组去重\n\n> 利用对象 , 让数组的值为对象的属性名循环添加属性,最后取出对象名就可以\n\n```js\nvar arr = [1,2,1,1,1,2,2,2];\nvar obj = {};\nfor (var i = 0 ,max = arr.length; i<max; i++){\n    obj[arr[i]] = arr[i];\n}\nconsole.log(obj);\narr = [];\nfor(key in obj){\n    arr.push(key);\n};\nconsole.log(arr);\n\n// 添加到数组的原型方法中\nArray.prototype.unique = function () {\n    var obj =  {}, //声明一个空对象用来存放\n        arr = [];  //声明一个空数组\n    for(var i = this.length;i--;){\n        if(!obj[this[i]]){\n           obj[this[i]] = this[i];\n           arr.push(this[i]);\n        }\n    }\n    return arr;\n}\n```\n\n## 包装类\n\n> 把原始值包装成对象\n>\n> 原始值本身没有属性 , 但是原始值调用属性时会 根据原始值类型 \n\n```js\nvar str = \"abc\";\nconsole.log(str.length);  // 实际执行是: `new String('abc').length` 执行完之后就会进行删除\nconsole.log(new String('abc').length);  \n```\n\n## Object.create() - 创建对象\n\n> Object.create(prototype, definedProperty);\n\n```js\nvar demo = {\n    name = \"张磊\";\n};\nvar obj = Objgect.create(demo);  // 创建一个空对象 , 对象的原型就是`demo` , 并返回\n```\n\n> 一旦经历了`var `的操作 , 所得出的属性 , window ,这种属性叫做不可配置的属性(不能delete)\n>\n> 形参也相当于是`var`声明的变量\n\n```js\nvar mun = 123;\ndelete mun; //false\nwindow.num = 123;\ndelete num; //true\n```\n\n## this  \n\n视频第30个 , 15分\n\n> 1. 预编译 `this`指向`window`\n> 2. 谁调用的 `this`就指向谁\n> 3. `call` `apply ` 改变`this`指向\n> 4. 全局 中  `this` 指向 `window`\n\n```js\nfunction Person (name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nfunction Student (name, age, sex){\n    //隐式把函数的原型赋值给this\n    //var this = Object.create(Student.prototype);\n    Person.call(this   , name, age); // 改变Person的this指向调用Person\n    this.sex = sex\n}\n\n```\n\n## 闭包\n\n> a 函数中包含 b 函数 , 只要 b 函数被返回到 a 函数的外边 , 就会形成闭包 , b 就会拿到 a 的执行上下文\n\n## 预编译\n\n> 1. 变量和形参声明提升\n> 2. 形参和实参相统一\n> 3. 函数声明提升 - 函数名作为属性名,函数体作为属性值\n> 4. 函数执行 - 预编译过得语句将会跳过执行 \n\n## try {} catch {} finally {}\n\n### 错误类型\n\n> 1. EvalError : eval() 的使用与定义不一致\n> 2. RangeError :数值越界\n> 3. ReferenceError :非法或不能识别的引用数值\n> 4. SyntaxError : 发生语法解析错误\n> 5. TypeError : 操作数类型错误\n> 6. URLError : URL 处理函数使用不当\n\n## es 5 严格模式\n\n> 如果使用`es5`严格模式, name`es3` 和 \t`es5` 产生的冲突部分就用`es5` , 否则会用`es3`\n\n> 启用方式 : \n>\n> `\"use strict\"`\n>\n> > 变量必须声明\n> >\n> > 局部方法预编译的时候里面的`this`不再指向`window` , 必须被赋值` new ` 或者`.call`\n> >\n> > 拒绝重复的属性和参数\n>\n> > 为什么使用字符串, 而不是用方法调用呢?\n> >\n> > > 为了兼容老版本浏览器, 因为直接写`es5` 的方法会报错 , 而字符串老版本不能识别的情况下也不会报错\n\n### with(){} \n\n> 改变作用域链最顶端 , 找变量最先往这里找, 简化代码\n\n```ja\ndocument.write(\"a\");\nwith(document){\n    write(\"a\"); // 在with里边就可以直接写write了.\n}\n```\n\n> 修改原型链如果原型链很长会整个修改, 影响效率 `es5`不能使用 ,\n>\n> `arguments` 的一些属性和方法 :  `caller` `callee` 也不可以在`es 5` 严格模式下使用\n\n### eval()\n\n> 能把字符串当成代码执行\n\n```js\neval('console.log(a));\n```\n\n","source":"_posts/JavaScript模式.md","raw":"---\ntitle: JavaScript模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-05 23:09:46\npassword:\nsummary: 个人JavaScript学习笔记\ntags:\n- JavaScript\ncategories:\n- 前端\n---\n\n#  JavaScript模式\n\n## for循环优化\n\n> 每次访问数组的长度是非常耗时的 , 所以我们将已经遍历过的数组或容器的长度缓存起来,如以下代码//\n\n```js\nfor(var i = 0,max = arr.length;i < max ; i++){\n\t//对arr进行处理    \n}\n```\n\n> 第二种 : 使用最少的变量 , 逐步减至0\n\n```js\nvar i , arr = [];\nfor(i = arr.length ; i-- ;){//省略第三个参数,通过用 i-- 至 0 来终止循环\n    //处理arr\n}\n\n//while循环实现\nvar arr = [],\n    i = arr.length;\nwhile(i--){\n      //梳理arr[i]\n}\n```\n\n> 我们提倡用正常的for循环来处理数组 , 用for - in 循环来处理对象\n\n## hasOwnProperty\n\n> Object的`hasOwnProperty()`方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。 \n\n```js\nconsole.log(person.hasOwnProperty('name')); //查看person对象是否包含自身(非继承)属性 : name;\n```\n\n## 圣杯模式\n\n```js\nfunction inherit(Target,Origin){\n\tfunction F() {};  //定义一个空方法\n    F.prototype = Origin.prototype;  //让空方法的原型等于父亲的原型\n    Target.prototype = new F();      //需要实现继承的方法的原型指向 new F();  -- 这样就实现了对象值传递\n    Target.prototype.constuctor = Target;  //如果不更改构造器的话,Target的构造器会指向Origin , 所以手动更改指向为自身\n    Target.prototype.uber = Origin.prototype;  //添加 uber 属性指明真实继承自哪里\n}\n```\n\n> 利用闭包实现变量私有化\n\n```js\nvar inherit = (function(){\n    var F = function () {};  //利用闭包特性隐藏此方法\n    return function (Target , Origin){  //在立即执行函数中 return 此方法形成闭包\n        F.prototype = Origin.prototype;\n        Target.prototype = new F();\n        Target.prototype.constuctor = Target;\n        Target.prototype.uber = Origin.prototype;\n    }\n});\n```\n\n## instanceof\n\n> `instanceof` A 对象 是不是 B 构造函数构造出来的\n\n```js\nA instanceof B\n// 看A对象的原型链上 有没有 B 的原型\n```\n\n## 区分数组还是对象\n\n> 通过`constructor` 构造器来区分\n\n```js\nvar arr = [];\narr.constructor;  // function Array(){};\nvar obj = {};\nobj.constructor;  // function Object(){};\n```\n\n> `instanceof`\n\n```js\narr instanceof Array; //true\nobj instanceof Object; //true\n```\n\n> `toString`\n\n```js\nObject.prototype.toString.call(arr); // \"[object Array]\"\nObject.prototype.toString.call(obj); // \"[object Object]\"\n```\n\n> ES 5 新增 `Array.isArray([]); //true`  参数为数组时返回 `true`\n\n\n\n## 命名模式\n\n> 构造函数首字母大写\n>\n> 函数名是多个单词的时候 , 构造函数使用大驼峰命名法 , 普通函数使用小驼峰命名法\n>\n> 变量是多个单词 , 使用小写用`_`隔开 ,  或者也使用小驼峰命名法\n>\n> 使用全部大写的方式表示一个常量 , 来表示不要进行修改 , 或者通过全部大写来表示全局变量\n>\n> 使用下划线前缀声明私有函数[方法] 和 属性.\n\n## new\n\n> 当以`new`操作符调用构造函数时 , 函数内部将会发生以下情况 : \n>\n> 1. 创建一个空对象并且`this`变量引用了该对象 , 同时还继承了该函数的原型.\n> 2. 属性和方法被加入到`this`引用的对象中.\n> 3. 新创建的对象由`this`所引用 , 并且最后隐式地返回`this` (如果没有显式的返回其他对象).\n>\n> ```js\n> //以上情况看起来就像是在后台发生了如下事情: \n> var Person = function (name) {\n>     var this = {}; // 使用对象字面量模式创建一个新对象\n>     this.name = name; // 向this添加属性和方法\n>     return this;\n> }\n> ```\n\n## arguments.callee\n\n> 指向函数自身的引用\n\n```js\nfunction test () {\n    console.log(argument.callee); //test 这个函数本身\n}\n```\n\n## caller\n\n> 被调用环境的引用\n\n```js\nfunction test (){\n    demo();\n}\nfunction demo (){\n    console.log(demo.caller); // test这个函数自身\n}\ntest();\n```\n\n## clone - 复制-浅拷贝-深拷贝\n\n> clone - 浅拷贝\n\n```js\n   var obj = {\n       name : \"zhanglei\",\n       age : 18\n   };\n   var obj1 = {};\n   function clone(origin , target){\n       var target = target || {}; //如果传入了target则使用target,否则使用{}\n       for(key in origin) {\n            target[key] = origin[key];\n       }\n       return target;\n   }\n   clone(obj, obj1);\n   console.log(obj1);\n```\n\n> clone - 深拷贝\n\n```js\nvar obj = {\n    name: \"zhanglei\",\n    age: 18,\n    hobby: [1, 2, 3]\n};\nvar obj2 = {}; //空对象\n// 通过函数实现 , 把对象 a 中的所有的数据深拷贝到 b 中\nfunction extend (a, b) {\n    for (var key in a) {\n        //先获取 a 对象中每个属性的值\n        var item = a[key];\n        //判断这个属性的值是不是数组\n        if (item instenceof Array){\n            //如果是数组 , 那么在 b 对象中添加一个新的属性,并且这个属性值也是数组\n            b[key] = [];\n            //调用这个方法, 把 a 对象中这个数组的属性一个一个的复制到 b 对象的这个数组属性中\n            extend(item,b[key]);\n        } else if(item instenceof Object){\n            b[key] = {};\n            extend(item, b[key]);\n        }else{\n            //如果是普通的数据 , 直接复制到 b 对象的这个属性中\n            b[key] = item;\n        }\n    }\n};\nextend(obj,obj2);\n```\n\n## 数组中的常用方法\n\n### 改变原数组\n\n> `push` 从后边添加,并返回添加后的数组长度,可以添加多个,用`,`隔开\n>\n> ```js\n> var arr = [];\n> arr.push(1);\n> arr.push(2,3);\n> arr; //[1,2,3]\n> //手写push方法\n> Array.prototype.push = function () {\n>     for (var i = 0 ; i < arguments.length ; i++){\n>         this[this.length] = arguments[i];\n>     }\n>     return this.length;\n> }\n> ```\n>\n> `pop`把数组的最后一位剪切出来.返回剪切的值,和`push`相对应\n>\n> `shift`从前边减\n>\n> `unshift` 从前边加\n>\n> `sort`排序 , 默认按照 ASCII码排序  视频第27个 ,时间50分钟\n>\n> ```js\n> //1. 必须写俩形参\n> //2. 看返回值\n> \t//1.当返回值为负数时,那么前面的数放在前面\n> \t//2.为正数 , 那么后面的数在前\n> \t//3.为0 . 不动\n> var arr = [1,3,5,4,10];\n> arr.sort(function (a,b){\n>     //return a - b; 升序\n>     //return b - a; 降序\n>     //return Math.random() - 0.5; 打乱顺序\n>     return a - b;\n> });\n> arr; //[1,3,4,5,10];\n> \n> ```\n>\n> \n>\n> \n>\n> `reverse` 翻转顺序\n>\n> ```js\n> var arr = [1,2,3];\n> arr.reverse(); \n> arr; // [3,2,1]\n> ```\n>\n> `splice` 切片\n>\n> > 参数: 从第几位开始 , 截取多少长度 , 在切口处添加数据\n>\n> ```js\n> var arr = [1,2,3,5];\n> arr.splice(3,0,4);\n> arr; //[1,2,3,4,5]\n> ```\n\n### 不改变原数组\n\n> `concat` 连接两个数组\n>\n> ```js\n> var arr = [1,2];\n> var arr2 = [3,4];\n> arr.concat(arr2); //[1,2,3,4]\n> ```\n>\n> `join`数组转换成字符串\n>\n> ```js\n> var arr = [1,2,3]\n> var str = arr.join(\"-\");\n> str;//\"1-2-3\";\n> ```\n>\n> `split`字符串的方法,把字符串按照参数拆分成数组,与`join`互逆\n>\n> ```js\n> var str = \"1-2-3\";\n> var arr = str.split(\"-\");\n> arr; //[\"1\",\"2\",\"3\"]\n> ```\n>\n> `toString`\n>\n> `slice`\n>\n> > 参数1  从该位开始截取\n> >\n> > 参数2  截取到该位\n> >\n> > > 不写第二个参数 , 则截取到最后\n> > >\n> > > 不写参数,则整个截取\n>\n> ```js\n> var arr = [1,2,3,4,5];\n> var newArr = arr.slice(1,3);\n> newArr; //[2,3]\n> ```\n>\n> \n\n## charCodeAt\n\n> 作用：返回指定位置的字符的Unicode编码。这个返回值在0~65535之间的整数。\n>\n> 可以判断返回值是否大于255,来判断时候是中文 \n\n```js\nvar str = \"zl张磊\";\nfunction retBytes(str){\n    var mun = str.length;\n    for(var i = 0; i < str.length; i++){\n        if(str.chatCodeAt(i) > 255){\n           num++;\n        }\n    }\n    return num;\n}\nreBytes(str);//6\n```\n\n## 类数组 \n\n> 看起来像数组 , 但是不具有数组操作的一些方法  视频第28个 \n>\n> DOM元素全是类数组\n\n##  数组去重\n\n> 利用对象 , 让数组的值为对象的属性名循环添加属性,最后取出对象名就可以\n\n```js\nvar arr = [1,2,1,1,1,2,2,2];\nvar obj = {};\nfor (var i = 0 ,max = arr.length; i<max; i++){\n    obj[arr[i]] = arr[i];\n}\nconsole.log(obj);\narr = [];\nfor(key in obj){\n    arr.push(key);\n};\nconsole.log(arr);\n\n// 添加到数组的原型方法中\nArray.prototype.unique = function () {\n    var obj =  {}, //声明一个空对象用来存放\n        arr = [];  //声明一个空数组\n    for(var i = this.length;i--;){\n        if(!obj[this[i]]){\n           obj[this[i]] = this[i];\n           arr.push(this[i]);\n        }\n    }\n    return arr;\n}\n```\n\n## 包装类\n\n> 把原始值包装成对象\n>\n> 原始值本身没有属性 , 但是原始值调用属性时会 根据原始值类型 \n\n```js\nvar str = \"abc\";\nconsole.log(str.length);  // 实际执行是: `new String('abc').length` 执行完之后就会进行删除\nconsole.log(new String('abc').length);  \n```\n\n## Object.create() - 创建对象\n\n> Object.create(prototype, definedProperty);\n\n```js\nvar demo = {\n    name = \"张磊\";\n};\nvar obj = Objgect.create(demo);  // 创建一个空对象 , 对象的原型就是`demo` , 并返回\n```\n\n> 一旦经历了`var `的操作 , 所得出的属性 , window ,这种属性叫做不可配置的属性(不能delete)\n>\n> 形参也相当于是`var`声明的变量\n\n```js\nvar mun = 123;\ndelete mun; //false\nwindow.num = 123;\ndelete num; //true\n```\n\n## this  \n\n视频第30个 , 15分\n\n> 1. 预编译 `this`指向`window`\n> 2. 谁调用的 `this`就指向谁\n> 3. `call` `apply ` 改变`this`指向\n> 4. 全局 中  `this` 指向 `window`\n\n```js\nfunction Person (name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nfunction Student (name, age, sex){\n    //隐式把函数的原型赋值给this\n    //var this = Object.create(Student.prototype);\n    Person.call(this   , name, age); // 改变Person的this指向调用Person\n    this.sex = sex\n}\n\n```\n\n## 闭包\n\n> a 函数中包含 b 函数 , 只要 b 函数被返回到 a 函数的外边 , 就会形成闭包 , b 就会拿到 a 的执行上下文\n\n## 预编译\n\n> 1. 变量和形参声明提升\n> 2. 形参和实参相统一\n> 3. 函数声明提升 - 函数名作为属性名,函数体作为属性值\n> 4. 函数执行 - 预编译过得语句将会跳过执行 \n\n## try {} catch {} finally {}\n\n### 错误类型\n\n> 1. EvalError : eval() 的使用与定义不一致\n> 2. RangeError :数值越界\n> 3. ReferenceError :非法或不能识别的引用数值\n> 4. SyntaxError : 发生语法解析错误\n> 5. TypeError : 操作数类型错误\n> 6. URLError : URL 处理函数使用不当\n\n## es 5 严格模式\n\n> 如果使用`es5`严格模式, name`es3` 和 \t`es5` 产生的冲突部分就用`es5` , 否则会用`es3`\n\n> 启用方式 : \n>\n> `\"use strict\"`\n>\n> > 变量必须声明\n> >\n> > 局部方法预编译的时候里面的`this`不再指向`window` , 必须被赋值` new ` 或者`.call`\n> >\n> > 拒绝重复的属性和参数\n>\n> > 为什么使用字符串, 而不是用方法调用呢?\n> >\n> > > 为了兼容老版本浏览器, 因为直接写`es5` 的方法会报错 , 而字符串老版本不能识别的情况下也不会报错\n\n### with(){} \n\n> 改变作用域链最顶端 , 找变量最先往这里找, 简化代码\n\n```ja\ndocument.write(\"a\");\nwith(document){\n    write(\"a\"); // 在with里边就可以直接写write了.\n}\n```\n\n> 修改原型链如果原型链很长会整个修改, 影响效率 `es5`不能使用 ,\n>\n> `arguments` 的一些属性和方法 :  `caller` `callee` 也不可以在`es 5` 严格模式下使用\n\n### eval()\n\n> 能把字符串当成代码执行\n\n```js\neval('console.log(a));\n```\n\n","slug":"JavaScript模式","published":1,"updated":"2020-02-05T15:16:35.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frke6000gwcq4xbgsvses","content":"<h1 id=\"JavaScript模式\"><a href=\"#JavaScript模式\" class=\"headerlink\" title=\"JavaScript模式\"></a>JavaScript模式</h1><h2 id=\"for循环优化\"><a href=\"#for循环优化\" class=\"headerlink\" title=\"for循环优化\"></a>for循环优化</h2><blockquote>\n<p>每次访问数组的长度是非常耗时的 , 所以我们将已经遍历过的数组或容器的长度缓存起来,如以下代码//</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> max <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//对arr进行处理    </span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>第二种 : 使用最少的变量 , 逐步减至0</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> i <span class=\"token punctuation\">,</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//省略第三个参数,通过用 i-- 至 0 来终止循环</span>\n    <span class=\"token comment\" spellcheck=\"true\">//处理arr</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//while循环实现</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//梳理arr[i]</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>我们提倡用正常的for循环来处理数组 , 用for - in 循环来处理对象</p>\n</blockquote>\n<h2 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h2><blockquote>\n<p>Object的<code>hasOwnProperty()</code>方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。 </p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//查看person对象是否包含自身(非继承)属性 : name;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"圣杯模式\"><a href=\"#圣杯模式\" class=\"headerlink\" title=\"圣杯模式\"></a>圣杯模式</h2><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">inherit</span><span class=\"token punctuation\">(</span>Target<span class=\"token punctuation\">,</span>Origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//定义一个空方法</span>\n    F<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Origin<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//让空方法的原型等于父亲的原型</span>\n    Target<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">//需要实现继承的方法的原型指向 new F();  -- 这样就实现了对象值传递</span>\n    Target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constuctor <span class=\"token operator\">=</span> Target<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//如果不更改构造器的话,Target的构造器会指向Origin , 所以手动更改指向为自身</span>\n    Target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>uber <span class=\"token operator\">=</span> Origin<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//添加 uber 属性指明真实继承自哪里</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>利用闭包实现变量私有化</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> inherit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> F <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//利用闭包特性隐藏此方法</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Target <span class=\"token punctuation\">,</span> Origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">//在立即执行函数中 return 此方法形成闭包</span>\n        F<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Origin<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n        Target<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constuctor <span class=\"token operator\">=</span> Target<span class=\"token punctuation\">;</span>\n        Target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>uber <span class=\"token operator\">=</span> Origin<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><blockquote>\n<p><code>instanceof</code> A 对象 是不是 B 构造函数构造出来的</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">A <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">B</span>\n<span class=\"token comment\" spellcheck=\"true\">// 看A对象的原型链上 有没有 B 的原型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"区分数组还是对象\"><a href=\"#区分数组还是对象\" class=\"headerlink\" title=\"区分数组还是对象\"></a>区分数组还是对象</h2><blockquote>\n<p>通过<code>constructor</code> 构造器来区分</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// function Array(){};</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// function Object(){};</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>instanceof</code></p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\nobj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>toString</code></p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// \"[object Array]\"</span>\nObject<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// \"[object Object]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>ES 5 新增 <code>Array.isArray([]); //true</code>  参数为数组时返回 <code>true</code></p>\n</blockquote>\n<h2 id=\"命名模式\"><a href=\"#命名模式\" class=\"headerlink\" title=\"命名模式\"></a>命名模式</h2><blockquote>\n<p>构造函数首字母大写</p>\n<p>函数名是多个单词的时候 , 构造函数使用大驼峰命名法 , 普通函数使用小驼峰命名法</p>\n<p>变量是多个单词 , 使用小写用<code>_</code>隔开 ,  或者也使用小驼峰命名法</p>\n<p>使用全部大写的方式表示一个常量 , 来表示不要进行修改 , 或者通过全部大写来表示全局变量</p>\n<p>使用下划线前缀声明私有函数[方法] 和 属性.</p>\n</blockquote>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><blockquote>\n<p>当以<code>new</code>操作符调用构造函数时 , 函数内部将会发生以下情况 : </p>\n<ol>\n<li>创建一个空对象并且<code>this</code>变量引用了该对象 , 同时还继承了该函数的原型.</li>\n<li>属性和方法被加入到<code>this</code>引用的对象中.</li>\n<li>新创建的对象由<code>this</code>所引用 , 并且最后隐式地返回<code>this</code> (如果没有显式的返回其他对象).</li>\n</ol>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//以上情况看起来就像是在后台发生了如下事情: </span>\n<span class=\"token keyword\">var</span> Person <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 使用对象字面量模式创建一个新对象</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 向this添加属性和方法</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"arguments-callee\"><a href=\"#arguments-callee\" class=\"headerlink\" title=\"arguments.callee\"></a>arguments.callee</h2><blockquote>\n<p>指向函数自身的引用</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> test <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//test 这个函数本身</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"caller\"><a href=\"#caller\" class=\"headerlink\" title=\"caller\"></a>caller</h2><blockquote>\n<p>被调用环境的引用</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> test <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> demo <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// test这个函数自身</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"clone-复制-浅拷贝-深拷贝\"><a href=\"#clone-复制-浅拷贝-深拷贝\" class=\"headerlink\" title=\"clone - 复制-浅拷贝-深拷贝\"></a>clone - 复制-浅拷贝-深拷贝</h2><blockquote>\n<p>clone - 浅拷贝</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">   <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       name <span class=\"token punctuation\">:</span> <span class=\"token string\">\"zhanglei\"</span><span class=\"token punctuation\">,</span>\n       age <span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>origin <span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> target <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//如果传入了target则使用target,否则使用{}</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> origin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>clone - 深拷贝</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"zhanglei\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    hobby<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//空对象</span>\n<span class=\"token comment\" spellcheck=\"true\">// 通过函数实现 , 把对象 a 中的所有的数据深拷贝到 b 中</span>\n<span class=\"token keyword\">function</span> extend <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//先获取 a 对象中每个属性的值</span>\n        <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//判断这个属性的值是不是数组</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item instenceof Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果是数组 , 那么在 b 对象中添加一个新的属性,并且这个属性值也是数组</span>\n            b<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//调用这个方法, 把 a 对象中这个数组的属性一个一个的复制到 b 对象的这个数组属性中</span>\n            <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item instenceof Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果是普通的数据 , 直接复制到 b 对象的这个属性中</span>\n            b<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组中的常用方法\"><a href=\"#数组中的常用方法\" class=\"headerlink\" title=\"数组中的常用方法\"></a>数组中的常用方法</h2><h3 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h3><blockquote>\n<p><code>push</code> 从后边添加,并返回添加后的数组长度,可以添加多个,用<code>,</code>隔开</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[1,2,3]</span>\n<span class=\"token comment\" spellcheck=\"true\">//手写push方法</span>\nArray<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>push <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>pop</code>把数组的最后一位剪切出来.返回剪切的值,和<code>push</code>相对应</p>\n<p><code>shift</code>从前边减</p>\n<p><code>unshift</code> 从前边加</p>\n<p><code>sort</code>排序 , 默认按照 ASCII码排序  视频第27个 ,时间50分钟</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//1. 必须写俩形参</span>\n<span class=\"token comment\" spellcheck=\"true\">//2. 看返回值</span>\n    <span class=\"token comment\" spellcheck=\"true\">//1.当返回值为负数时,那么前面的数放在前面</span>\n    <span class=\"token comment\" spellcheck=\"true\">//2.为正数 , 那么后面的数在前</span>\n    <span class=\"token comment\" spellcheck=\"true\">//3.为0 . 不动</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//return a - b; 升序</span>\n    <span class=\"token comment\" spellcheck=\"true\">//return b - a; 降序</span>\n    <span class=\"token comment\" spellcheck=\"true\">//return Math.random() - 0.5; 打乱顺序</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[1,3,4,5,10];</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>reverse</code> 翻转顺序</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \narr<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// [3,2,1]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>splice</code> 切片</p>\n<blockquote>\n<p>参数: 从第几位开始 , 截取多少长度 , 在切口处添加数据</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[1,2,3,4,5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h3 id=\"不改变原数组\"><a href=\"#不改变原数组\" class=\"headerlink\" title=\"不改变原数组\"></a>不改变原数组</h3><blockquote>\n<p><code>concat</code> 连接两个数组</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[1,2,3,4]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>join</code>数组转换成字符串</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//\"1-2-3\";</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>split</code>字符串的方法,把字符串按照参数拆分成数组,与<code>join</code>互逆</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"1-2-3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[\"1\",\"2\",\"3\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>toString</code></p>\n<p><code>slice</code></p>\n<blockquote>\n<p>参数1  从该位开始截取</p>\n<p>参数2  截取到该位</p>\n<blockquote>\n<p>不写第二个参数 , 则截取到最后</p>\n<p>不写参数,则整个截取</p>\n</blockquote>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnewArr<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[2,3]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"charCodeAt\"><a href=\"#charCodeAt\" class=\"headerlink\" title=\"charCodeAt\"></a>charCodeAt</h2><blockquote>\n<p>作用：返回指定位置的字符的Unicode编码。这个返回值在0~65535之间的整数。</p>\n<p>可以判断返回值是否大于255,来判断时候是中文 </p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"zl张磊\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">retBytes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> mun <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">chatCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">reBytes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h2><blockquote>\n<p>看起来像数组 , 但是不具有数组操作的一些方法  视频第28个 </p>\n<p>DOM元素全是类数组</p>\n</blockquote>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><blockquote>\n<p>利用对象 , 让数组的值为对象的属性名循环添加属性,最后取出对象名就可以</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 添加到数组的原型方法中</span>\nArray<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>unique <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//声明一个空对象用来存放</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//声明一个空数组</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           obj<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h2><blockquote>\n<p>把原始值包装成对象</p>\n<p>原始值本身没有属性 , 但是原始值调用属性时会 根据原始值类型 </p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 实际执行是: `new String('abc').length` 执行完之后就会进行删除</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Object-create-创建对象\"><a href=\"#Object-create-创建对象\" class=\"headerlink\" title=\"Object.create() - 创建对象\"></a>Object.create() - 创建对象</h2><blockquote>\n<p>Object.create(prototype, definedProperty);</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> demo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"张磊\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> Objgect<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 创建一个空对象 , 对象的原型就是`demo` , 并返回</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>一旦经历了<code>var</code>的操作 , 所得出的属性 , window ,这种属性叫做不可配置的属性(不能delete)</p>\n<p>形参也相当于是<code>var</code>声明的变量</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mun <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> mun<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//false</span>\nwindow<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>视频第30个 , 15分</p>\n<blockquote>\n<ol>\n<li>预编译 <code>this</code>指向<code>window</code></li>\n<li>谁调用的 <code>this</code>就指向谁</li>\n<li><code>call</code> <code>apply</code> 改变<code>this</code>指向</li>\n<li>全局 中  <code>this</code> 指向 <code>window</code></li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> Person <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> Student <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//隐式把函数的原型赋值给this</span>\n    <span class=\"token comment\" spellcheck=\"true\">//var this = Object.create(Student.prototype);</span>\n    Person<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span>   <span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 改变Person的this指向调用Person</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>a 函数中包含 b 函数 , 只要 b 函数被返回到 a 函数的外边 , 就会形成闭包 , b 就会拿到 a 的执行上下文</p>\n</blockquote>\n<h2 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h2><blockquote>\n<ol>\n<li>变量和形参声明提升</li>\n<li>形参和实参相统一</li>\n<li>函数声明提升 - 函数名作为属性名,函数体作为属性值</li>\n<li>函数执行 - 预编译过得语句将会跳过执行 </li>\n</ol>\n</blockquote>\n<h2 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try {} catch {} finally {}\"></a>try {} catch {} finally {}</h2><h3 id=\"错误类型\"><a href=\"#错误类型\" class=\"headerlink\" title=\"错误类型\"></a>错误类型</h3><blockquote>\n<ol>\n<li>EvalError : eval() 的使用与定义不一致</li>\n<li>RangeError :数值越界</li>\n<li>ReferenceError :非法或不能识别的引用数值</li>\n<li>SyntaxError : 发生语法解析错误</li>\n<li>TypeError : 操作数类型错误</li>\n<li>URLError : URL 处理函数使用不当</li>\n</ol>\n</blockquote>\n<h2 id=\"es-5-严格模式\"><a href=\"#es-5-严格模式\" class=\"headerlink\" title=\"es 5 严格模式\"></a>es 5 严格模式</h2><blockquote>\n<p>如果使用<code>es5</code>严格模式, name<code>es3</code> 和     <code>es5</code> 产生的冲突部分就用<code>es5</code> , 否则会用<code>es3</code></p>\n</blockquote>\n<blockquote>\n<p>启用方式 : </p>\n<p><code>&quot;use strict&quot;</code></p>\n<blockquote>\n<p>变量必须声明</p>\n<p>局部方法预编译的时候里面的<code>this</code>不再指向<code>window</code> , 必须被赋值<code>new</code> 或者<code>.call</code></p>\n<p>拒绝重复的属性和参数</p>\n</blockquote>\n<blockquote>\n<p>为什么使用字符串, 而不是用方法调用呢?</p>\n<blockquote>\n<p>为了兼容老版本浏览器, 因为直接写<code>es5</code> 的方法会报错 , 而字符串老版本不能识别的情况下也不会报错</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with(){}\"></a>with(){}</h3><blockquote>\n<p>改变作用域链最顶端 , 找变量最先往这里找, 简化代码</p>\n</blockquote>\n<pre class=\"line-numbers language-ja\"><code class=\"language-ja\">document.write(\"a\");\nwith(document){\n    write(\"a\"); // 在with里边就可以直接写write了.\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>修改原型链如果原型链很长会整个修改, 影响效率 <code>es5</code>不能使用 ,</p>\n<p><code>arguments</code> 的一些属性和方法 :  <code>caller</code> <code>callee</code> 也不可以在<code>es 5</code> 严格模式下使用</p>\n</blockquote>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h3><blockquote>\n<p>能把字符串当成代码执行</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>'console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"JavaScript模式\"><a href=\"#JavaScript模式\" class=\"headerlink\" title=\"JavaScript模式\"></a>JavaScript模式</h1><h2 id=\"for循环优化\"><a href=\"#for循环优化\" class=\"headerlink\" title=\"for循环优化\"></a>for循环优化</h2><blockquote>\n<p>每次访问数组的长度是非常耗时的 , 所以我们将已经遍历过的数组或容器的长度缓存起来,如以下代码//</p>\n</blockquote>\n<pre><code class=\"js\">for(var i = 0,max = arr.length;i &lt; max ; i++){\n    //对arr进行处理    \n}</code></pre>\n<blockquote>\n<p>第二种 : 使用最少的变量 , 逐步减至0</p>\n</blockquote>\n<pre><code class=\"js\">var i , arr = [];\nfor(i = arr.length ; i-- ;){//省略第三个参数,通过用 i-- 至 0 来终止循环\n    //处理arr\n}\n\n//while循环实现\nvar arr = [],\n    i = arr.length;\nwhile(i--){\n      //梳理arr[i]\n}</code></pre>\n<blockquote>\n<p>我们提倡用正常的for循环来处理数组 , 用for - in 循环来处理对象</p>\n</blockquote>\n<h2 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h2><blockquote>\n<p>Object的<code>hasOwnProperty()</code>方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。 </p>\n</blockquote>\n<pre><code class=\"js\">console.log(person.hasOwnProperty(&#39;name&#39;)); //查看person对象是否包含自身(非继承)属性 : name;</code></pre>\n<h2 id=\"圣杯模式\"><a href=\"#圣杯模式\" class=\"headerlink\" title=\"圣杯模式\"></a>圣杯模式</h2><pre><code class=\"js\">function inherit(Target,Origin){\n    function F() {};  //定义一个空方法\n    F.prototype = Origin.prototype;  //让空方法的原型等于父亲的原型\n    Target.prototype = new F();      //需要实现继承的方法的原型指向 new F();  -- 这样就实现了对象值传递\n    Target.prototype.constuctor = Target;  //如果不更改构造器的话,Target的构造器会指向Origin , 所以手动更改指向为自身\n    Target.prototype.uber = Origin.prototype;  //添加 uber 属性指明真实继承自哪里\n}</code></pre>\n<blockquote>\n<p>利用闭包实现变量私有化</p>\n</blockquote>\n<pre><code class=\"js\">var inherit = (function(){\n    var F = function () {};  //利用闭包特性隐藏此方法\n    return function (Target , Origin){  //在立即执行函数中 return 此方法形成闭包\n        F.prototype = Origin.prototype;\n        Target.prototype = new F();\n        Target.prototype.constuctor = Target;\n        Target.prototype.uber = Origin.prototype;\n    }\n});</code></pre>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><blockquote>\n<p><code>instanceof</code> A 对象 是不是 B 构造函数构造出来的</p>\n</blockquote>\n<pre><code class=\"js\">A instanceof B\n// 看A对象的原型链上 有没有 B 的原型</code></pre>\n<h2 id=\"区分数组还是对象\"><a href=\"#区分数组还是对象\" class=\"headerlink\" title=\"区分数组还是对象\"></a>区分数组还是对象</h2><blockquote>\n<p>通过<code>constructor</code> 构造器来区分</p>\n</blockquote>\n<pre><code class=\"js\">var arr = [];\narr.constructor;  // function Array(){};\nvar obj = {};\nobj.constructor;  // function Object(){};</code></pre>\n<blockquote>\n<p><code>instanceof</code></p>\n</blockquote>\n<pre><code class=\"js\">arr instanceof Array; //true\nobj instanceof Object; //true</code></pre>\n<blockquote>\n<p><code>toString</code></p>\n</blockquote>\n<pre><code class=\"js\">Object.prototype.toString.call(arr); // &quot;[object Array]&quot;\nObject.prototype.toString.call(obj); // &quot;[object Object]&quot;</code></pre>\n<blockquote>\n<p>ES 5 新增 <code>Array.isArray([]); //true</code>  参数为数组时返回 <code>true</code></p>\n</blockquote>\n<h2 id=\"命名模式\"><a href=\"#命名模式\" class=\"headerlink\" title=\"命名模式\"></a>命名模式</h2><blockquote>\n<p>构造函数首字母大写</p>\n<p>函数名是多个单词的时候 , 构造函数使用大驼峰命名法 , 普通函数使用小驼峰命名法</p>\n<p>变量是多个单词 , 使用小写用<code>_</code>隔开 ,  或者也使用小驼峰命名法</p>\n<p>使用全部大写的方式表示一个常量 , 来表示不要进行修改 , 或者通过全部大写来表示全局变量</p>\n<p>使用下划线前缀声明私有函数[方法] 和 属性.</p>\n</blockquote>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><blockquote>\n<p>当以<code>new</code>操作符调用构造函数时 , 函数内部将会发生以下情况 : </p>\n<ol>\n<li>创建一个空对象并且<code>this</code>变量引用了该对象 , 同时还继承了该函数的原型.</li>\n<li>属性和方法被加入到<code>this</code>引用的对象中.</li>\n<li>新创建的对象由<code>this</code>所引用 , 并且最后隐式地返回<code>this</code> (如果没有显式的返回其他对象).</li>\n</ol>\n<pre><code class=\"js\">//以上情况看起来就像是在后台发生了如下事情: \nvar Person = function (name) {\n    var this = {}; // 使用对象字面量模式创建一个新对象\n    this.name = name; // 向this添加属性和方法\n    return this;\n}</code></pre>\n</blockquote>\n<h2 id=\"arguments-callee\"><a href=\"#arguments-callee\" class=\"headerlink\" title=\"arguments.callee\"></a>arguments.callee</h2><blockquote>\n<p>指向函数自身的引用</p>\n</blockquote>\n<pre><code class=\"js\">function test () {\n    console.log(argument.callee); //test 这个函数本身\n}</code></pre>\n<h2 id=\"caller\"><a href=\"#caller\" class=\"headerlink\" title=\"caller\"></a>caller</h2><blockquote>\n<p>被调用环境的引用</p>\n</blockquote>\n<pre><code class=\"js\">function test (){\n    demo();\n}\nfunction demo (){\n    console.log(demo.caller); // test这个函数自身\n}\ntest();</code></pre>\n<h2 id=\"clone-复制-浅拷贝-深拷贝\"><a href=\"#clone-复制-浅拷贝-深拷贝\" class=\"headerlink\" title=\"clone - 复制-浅拷贝-深拷贝\"></a>clone - 复制-浅拷贝-深拷贝</h2><blockquote>\n<p>clone - 浅拷贝</p>\n</blockquote>\n<pre><code class=\"js\">   var obj = {\n       name : &quot;zhanglei&quot;,\n       age : 18\n   };\n   var obj1 = {};\n   function clone(origin , target){\n       var target = target || {}; //如果传入了target则使用target,否则使用{}\n       for(key in origin) {\n            target[key] = origin[key];\n       }\n       return target;\n   }\n   clone(obj, obj1);\n   console.log(obj1);</code></pre>\n<blockquote>\n<p>clone - 深拷贝</p>\n</blockquote>\n<pre><code class=\"js\">var obj = {\n    name: &quot;zhanglei&quot;,\n    age: 18,\n    hobby: [1, 2, 3]\n};\nvar obj2 = {}; //空对象\n// 通过函数实现 , 把对象 a 中的所有的数据深拷贝到 b 中\nfunction extend (a, b) {\n    for (var key in a) {\n        //先获取 a 对象中每个属性的值\n        var item = a[key];\n        //判断这个属性的值是不是数组\n        if (item instenceof Array){\n            //如果是数组 , 那么在 b 对象中添加一个新的属性,并且这个属性值也是数组\n            b[key] = [];\n            //调用这个方法, 把 a 对象中这个数组的属性一个一个的复制到 b 对象的这个数组属性中\n            extend(item,b[key]);\n        } else if(item instenceof Object){\n            b[key] = {};\n            extend(item, b[key]);\n        }else{\n            //如果是普通的数据 , 直接复制到 b 对象的这个属性中\n            b[key] = item;\n        }\n    }\n};\nextend(obj,obj2);</code></pre>\n<h2 id=\"数组中的常用方法\"><a href=\"#数组中的常用方法\" class=\"headerlink\" title=\"数组中的常用方法\"></a>数组中的常用方法</h2><h3 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h3><blockquote>\n<p><code>push</code> 从后边添加,并返回添加后的数组长度,可以添加多个,用<code>,</code>隔开</p>\n<pre><code class=\"js\">var arr = [];\narr.push(1);\narr.push(2,3);\narr; //[1,2,3]\n//手写push方法\nArray.prototype.push = function () {\n    for (var i = 0 ; i &lt; arguments.length ; i++){\n        this[this.length] = arguments[i];\n    }\n    return this.length;\n}</code></pre>\n<p><code>pop</code>把数组的最后一位剪切出来.返回剪切的值,和<code>push</code>相对应</p>\n<p><code>shift</code>从前边减</p>\n<p><code>unshift</code> 从前边加</p>\n<p><code>sort</code>排序 , 默认按照 ASCII码排序  视频第27个 ,时间50分钟</p>\n<pre><code class=\"js\">//1. 必须写俩形参\n//2. 看返回值\n    //1.当返回值为负数时,那么前面的数放在前面\n    //2.为正数 , 那么后面的数在前\n    //3.为0 . 不动\nvar arr = [1,3,5,4,10];\narr.sort(function (a,b){\n    //return a - b; 升序\n    //return b - a; 降序\n    //return Math.random() - 0.5; 打乱顺序\n    return a - b;\n});\narr; //[1,3,4,5,10];\n</code></pre>\n<p><code>reverse</code> 翻转顺序</p>\n<pre><code class=\"js\">var arr = [1,2,3];\narr.reverse(); \narr; // [3,2,1]</code></pre>\n<p><code>splice</code> 切片</p>\n<blockquote>\n<p>参数: 从第几位开始 , 截取多少长度 , 在切口处添加数据</p>\n</blockquote>\n<pre><code class=\"js\">var arr = [1,2,3,5];\narr.splice(3,0,4);\narr; //[1,2,3,4,5]</code></pre>\n</blockquote>\n<h3 id=\"不改变原数组\"><a href=\"#不改变原数组\" class=\"headerlink\" title=\"不改变原数组\"></a>不改变原数组</h3><blockquote>\n<p><code>concat</code> 连接两个数组</p>\n<pre><code class=\"js\">var arr = [1,2];\nvar arr2 = [3,4];\narr.concat(arr2); //[1,2,3,4]</code></pre>\n<p><code>join</code>数组转换成字符串</p>\n<pre><code class=\"js\">var arr = [1,2,3]\nvar str = arr.join(&quot;-&quot;);\nstr;//&quot;1-2-3&quot;;</code></pre>\n<p><code>split</code>字符串的方法,把字符串按照参数拆分成数组,与<code>join</code>互逆</p>\n<pre><code class=\"js\">var str = &quot;1-2-3&quot;;\nvar arr = str.split(&quot;-&quot;);\narr; //[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</code></pre>\n<p><code>toString</code></p>\n<p><code>slice</code></p>\n<blockquote>\n<p>参数1  从该位开始截取</p>\n<p>参数2  截取到该位</p>\n<blockquote>\n<p>不写第二个参数 , 则截取到最后</p>\n<p>不写参数,则整个截取</p>\n</blockquote>\n</blockquote>\n<pre><code class=\"js\">var arr = [1,2,3,4,5];\nvar newArr = arr.slice(1,3);\nnewArr; //[2,3]</code></pre>\n</blockquote>\n<h2 id=\"charCodeAt\"><a href=\"#charCodeAt\" class=\"headerlink\" title=\"charCodeAt\"></a>charCodeAt</h2><blockquote>\n<p>作用：返回指定位置的字符的Unicode编码。这个返回值在0~65535之间的整数。</p>\n<p>可以判断返回值是否大于255,来判断时候是中文 </p>\n</blockquote>\n<pre><code class=\"js\">var str = &quot;zl张磊&quot;;\nfunction retBytes(str){\n    var mun = str.length;\n    for(var i = 0; i &lt; str.length; i++){\n        if(str.chatCodeAt(i) &gt; 255){\n           num++;\n        }\n    }\n    return num;\n}\nreBytes(str);//6</code></pre>\n<h2 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h2><blockquote>\n<p>看起来像数组 , 但是不具有数组操作的一些方法  视频第28个 </p>\n<p>DOM元素全是类数组</p>\n</blockquote>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><blockquote>\n<p>利用对象 , 让数组的值为对象的属性名循环添加属性,最后取出对象名就可以</p>\n</blockquote>\n<pre><code class=\"js\">var arr = [1,2,1,1,1,2,2,2];\nvar obj = {};\nfor (var i = 0 ,max = arr.length; i&lt;max; i++){\n    obj[arr[i]] = arr[i];\n}\nconsole.log(obj);\narr = [];\nfor(key in obj){\n    arr.push(key);\n};\nconsole.log(arr);\n\n// 添加到数组的原型方法中\nArray.prototype.unique = function () {\n    var obj =  {}, //声明一个空对象用来存放\n        arr = [];  //声明一个空数组\n    for(var i = this.length;i--;){\n        if(!obj[this[i]]){\n           obj[this[i]] = this[i];\n           arr.push(this[i]);\n        }\n    }\n    return arr;\n}</code></pre>\n<h2 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h2><blockquote>\n<p>把原始值包装成对象</p>\n<p>原始值本身没有属性 , 但是原始值调用属性时会 根据原始值类型 </p>\n</blockquote>\n<pre><code class=\"js\">var str = &quot;abc&quot;;\nconsole.log(str.length);  // 实际执行是: `new String(&#39;abc&#39;).length` 执行完之后就会进行删除\nconsole.log(new String(&#39;abc&#39;).length);  </code></pre>\n<h2 id=\"Object-create-创建对象\"><a href=\"#Object-create-创建对象\" class=\"headerlink\" title=\"Object.create() - 创建对象\"></a>Object.create() - 创建对象</h2><blockquote>\n<p>Object.create(prototype, definedProperty);</p>\n</blockquote>\n<pre><code class=\"js\">var demo = {\n    name = &quot;张磊&quot;;\n};\nvar obj = Objgect.create(demo);  // 创建一个空对象 , 对象的原型就是`demo` , 并返回</code></pre>\n<blockquote>\n<p>一旦经历了<code>var</code>的操作 , 所得出的属性 , window ,这种属性叫做不可配置的属性(不能delete)</p>\n<p>形参也相当于是<code>var</code>声明的变量</p>\n</blockquote>\n<pre><code class=\"js\">var mun = 123;\ndelete mun; //false\nwindow.num = 123;\ndelete num; //true</code></pre>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>视频第30个 , 15分</p>\n<blockquote>\n<ol>\n<li>预编译 <code>this</code>指向<code>window</code></li>\n<li>谁调用的 <code>this</code>就指向谁</li>\n<li><code>call</code> <code>apply</code> 改变<code>this</code>指向</li>\n<li>全局 中  <code>this</code> 指向 <code>window</code></li>\n</ol>\n</blockquote>\n<pre><code class=\"js\">function Person (name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nfunction Student (name, age, sex){\n    //隐式把函数的原型赋值给this\n    //var this = Object.create(Student.prototype);\n    Person.call(this   , name, age); // 改变Person的this指向调用Person\n    this.sex = sex\n}\n</code></pre>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>a 函数中包含 b 函数 , 只要 b 函数被返回到 a 函数的外边 , 就会形成闭包 , b 就会拿到 a 的执行上下文</p>\n</blockquote>\n<h2 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h2><blockquote>\n<ol>\n<li>变量和形参声明提升</li>\n<li>形参和实参相统一</li>\n<li>函数声明提升 - 函数名作为属性名,函数体作为属性值</li>\n<li>函数执行 - 预编译过得语句将会跳过执行 </li>\n</ol>\n</blockquote>\n<h2 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try {} catch {} finally {}\"></a>try {} catch {} finally {}</h2><h3 id=\"错误类型\"><a href=\"#错误类型\" class=\"headerlink\" title=\"错误类型\"></a>错误类型</h3><blockquote>\n<ol>\n<li>EvalError : eval() 的使用与定义不一致</li>\n<li>RangeError :数值越界</li>\n<li>ReferenceError :非法或不能识别的引用数值</li>\n<li>SyntaxError : 发生语法解析错误</li>\n<li>TypeError : 操作数类型错误</li>\n<li>URLError : URL 处理函数使用不当</li>\n</ol>\n</blockquote>\n<h2 id=\"es-5-严格模式\"><a href=\"#es-5-严格模式\" class=\"headerlink\" title=\"es 5 严格模式\"></a>es 5 严格模式</h2><blockquote>\n<p>如果使用<code>es5</code>严格模式, name<code>es3</code> 和     <code>es5</code> 产生的冲突部分就用<code>es5</code> , 否则会用<code>es3</code></p>\n</blockquote>\n<blockquote>\n<p>启用方式 : </p>\n<p><code>&quot;use strict&quot;</code></p>\n<blockquote>\n<p>变量必须声明</p>\n<p>局部方法预编译的时候里面的<code>this</code>不再指向<code>window</code> , 必须被赋值<code>new</code> 或者<code>.call</code></p>\n<p>拒绝重复的属性和参数</p>\n</blockquote>\n<blockquote>\n<p>为什么使用字符串, 而不是用方法调用呢?</p>\n<blockquote>\n<p>为了兼容老版本浏览器, 因为直接写<code>es5</code> 的方法会报错 , 而字符串老版本不能识别的情况下也不会报错</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with(){}\"></a>with(){}</h3><blockquote>\n<p>改变作用域链最顶端 , 找变量最先往这里找, 简化代码</p>\n</blockquote>\n<pre><code class=\"ja\">document.write(&quot;a&quot;);\nwith(document){\n    write(&quot;a&quot;); // 在with里边就可以直接写write了.\n}</code></pre>\n<blockquote>\n<p>修改原型链如果原型链很长会整个修改, 影响效率 <code>es5</code>不能使用 ,</p>\n<p><code>arguments</code> 的一些属性和方法 :  <code>caller</code> <code>callee</code> 也不可以在<code>es 5</code> 严格模式下使用</p>\n</blockquote>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h3><blockquote>\n<p>能把字符串当成代码执行</p>\n</blockquote>\n<pre><code class=\"js\">eval(&#39;console.log(a));</code></pre>\n"},{"title":"JS定时器","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-12T16:03:06.000Z","password":null,"summary":null,"_content":"\n# 定时器\n\n> 都是全局对象window上的方法 , 内部函数this指向window\n>\n> 注意:\n>\n> ```js\n> setInterval(\"console.log('a');\", 1000);//每隔1000毫秒会打印一次字符串a\n> ```\n\n> 设置循环定时器\n>\n> `setInterval`\n>\n> ```js\n> setInterval(function(){\n>     \n> },1000); // 定时器时间不准\n> ```\n>\n> \n>\n> 清除循环定时器\n>\n> `clearInterval`\n>\n> ```js\n> var timer = setInterval(function(){\n>     \n> },1000);\n> clearInterval(timer);\n> ```\n>\n> 设置单次执行定时器\n>\n> `setTimeout`\n>\n> ```js\n> setTimeout(function(){\n> \n> },1000);   //延时1000毫秒执行,只执行一次\n> ```\n>\n> 清除单次执行定时器\n>\n> `clearTimeout`\n>\n> ```js\n> var timer = setTimeout(function(){\n>     \n> },1000);\n> clearTimeout(timer);\n> ```\n>\n> ","source":"_posts/JavaScript定时器.md","raw":"---\ntitle: JS定时器\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-13 00:03:06\npassword:\nsummary:\ntags:\n- JavaScripe\ncategories:\n- 前端\n---\n\n# 定时器\n\n> 都是全局对象window上的方法 , 内部函数this指向window\n>\n> 注意:\n>\n> ```js\n> setInterval(\"console.log('a');\", 1000);//每隔1000毫秒会打印一次字符串a\n> ```\n\n> 设置循环定时器\n>\n> `setInterval`\n>\n> ```js\n> setInterval(function(){\n>     \n> },1000); // 定时器时间不准\n> ```\n>\n> \n>\n> 清除循环定时器\n>\n> `clearInterval`\n>\n> ```js\n> var timer = setInterval(function(){\n>     \n> },1000);\n> clearInterval(timer);\n> ```\n>\n> 设置单次执行定时器\n>\n> `setTimeout`\n>\n> ```js\n> setTimeout(function(){\n> \n> },1000);   //延时1000毫秒执行,只执行一次\n> ```\n>\n> 清除单次执行定时器\n>\n> `clearTimeout`\n>\n> ```js\n> var timer = setTimeout(function(){\n>     \n> },1000);\n> clearTimeout(timer);\n> ```\n>\n> ","slug":"JavaScript定时器","published":1,"updated":"2020-02-13T08:04:28.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkea000kwcq48jk9u4ve","content":"<h1 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h1><blockquote>\n<p>都是全局对象window上的方法 , 内部函数this指向window</p>\n<p>注意:</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console.log('a');\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//每隔1000毫秒会打印一次字符串a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<blockquote>\n<p>设置循环定时器</p>\n<p><code>setInterval</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 定时器时间不准</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>清除循环定时器</p>\n<p><code>clearInterval</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>设置单次执行定时器</p>\n<p><code>setTimeout</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//延时1000毫秒执行,只执行一次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>清除单次执行定时器</p>\n<p><code>clearTimeout</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h1><blockquote>\n<p>都是全局对象window上的方法 , 内部函数this指向window</p>\n<p>注意:</p>\n<pre><code class=\"js\">setInterval(&quot;console.log(&#39;a&#39;);&quot;, 1000);//每隔1000毫秒会打印一次字符串a</code></pre>\n</blockquote>\n<blockquote>\n<p>设置循环定时器</p>\n<p><code>setInterval</code></p>\n<pre><code class=\"js\">setInterval(function(){\n\n},1000); // 定时器时间不准</code></pre>\n<p>清除循环定时器</p>\n<p><code>clearInterval</code></p>\n<pre><code class=\"js\">var timer = setInterval(function(){\n\n},1000);\nclearInterval(timer);</code></pre>\n<p>设置单次执行定时器</p>\n<p><code>setTimeout</code></p>\n<pre><code class=\"js\">setTimeout(function(){\n\n},1000);   //延时1000毫秒执行,只执行一次</code></pre>\n<p>清除单次执行定时器</p>\n<p><code>clearTimeout</code></p>\n<pre><code class=\"js\">var timer = setTimeout(function(){\n\n},1000);\nclearTimeout(timer);</code></pre>\n</blockquote>\n"},{"title":"Markdown语法","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-20T17:44:56.000Z","password":null,"summary":"简单介绍下Markdown语法和书写工具及快捷键","_content":"\n<div align = \"middle\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28892385&auto=1&height=66\"></iframe></div>\n\n# Markdown语法\n\n## 标题\n\n|     **语法**     |\n| :--------------: |\n|   `#`一级标题    |\n|   `##`二级标题   |\n|  `###`三级标题   |\n|  `####`四级标题  |\n| `#####`五级标题  |\n| `######`六级标题 |\n\n![png](2.png)\n\n\n\n\n\n## 字体样式\n\n`*斜体*`  *斜体*\n\n`_斜体_ `  _斜体_\n\n`**粗体**`  **粗体**\n\n`***加粗斜体***`***加粗斜体***\n\n`~~删除线~~`  ~~删除线~~\n\n## 插入图片或连接\n\n> 插入链接与插入图片的语法很像，区别在一个 `!`号\n>\n> 图片为：`![]()`\n>\n> 链接为：`[]()`\n\n`[描述](图片路径或者URL)`  描述可以不写\n\n\n\n## 分割线三种方式\n\n你可以在一行中用三个以上的星号`*`、减号`-`、底线`_`来建立一个分隔线，行内不能有其他东西。 \n\n`---`\n\n---\n\n`***`\n\n***\n\n`___`\n\n___\n\n\n\n## 代码块\n\n\n\n**行内式**：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键） \n\n\\`用两个反引号\\` `行内/单行代码块`\n\n\n\n**多行代码块与语法高亮**：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹 \n\n\\`\\`\\`js\n\n三个反引号可以表明代码语言,这里写的js\n\n\\`\\`\\`\\`\n\n```js\n<script>\n    console.log(\"我是js代码块\");\n</script>\n```\n\n\n\n## 引用\n\n在被引用的文本前加上`>`符号，以及一个空格就可以了，如一个`>`符号会产生一次缩进\n\n`>引用` \n\n> 引用\n\n`>>引用`\n\n> > 引用\n\n`>>>引用`\n\n> > > 引用\n\n\n\n## 列表\n\n**无序列表**\n\n使用 *，+，- 都可以表示无序列表。任意选用一个即可, 注意：符号后面一定要有一个空格，起到缩进的作用。 \n\n`- 无序列表`- \n\n`* 无序列表`\n\n`+ 无序列表`\n\n- 无序列表\n- 无序列表\n- 无序列表\n\n**有序列表**\n\n使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 \n\n`1.有序列表`\n\n`2.有序列表`\n\n`3.有序列表`\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n## 转义字符`\\`\n\n如果在使用符号时与Markdown语法冲突,可以在符号前面加上`\\`即可正常显示\n\n如在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\\就可以了\n\n##  表格\n\n`|姓名|性别|分数|`\n\n`|:-:|:-:|:-:|`\n\n`|小明|男|100|`\n\n`|小明|男|100|`\n\n\n\n表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中 \n\n| 姓名 | 性别 | 分数 |\n| :--: | :--: | :--: |\n| 小明 |  男  | 100  |\n| 小明 |  男  | 100  |\n\n## 结束语\n\nMarkdown语法学到这里日常已经够用了,下面介绍一款实时预览的 Markdown 文本编辑器\n\n# Typora\n\nTypora 是一款**支持实时预览的 Markdown 文本编辑器**。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是**完全免费**的。 \n\n点击下载:[Typora](https://www.typora.io/ )\n\n##  GFM 标准\n\n [GFM 标准](https://github.github.com/gfm/)，它是由著名代码托管网站 [GitHub](https://github.com/) 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 `文件 - 偏好设置 - Markdown 语法偏好 - 严格模式` 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 [这篇文档](http://support.typora.io/Strict-Mode/) 中查看。\n\n##  设置图片\n\nTypora 支持在拖动或 `Ctrl + V` 网络图片后自动将其保存到本地。你可以在 `文件 - 偏好设置 - 编辑器 - 图片插入` 中选择复制到哪个路径，什么情况下需要复制。\n\n![](3.png)\n\n","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-21 01:44:56\npassword:\nsummary: 简单介绍下Markdown语法和书写工具及快捷键\ntags:\n- 工具\ncategories:\n- 效率\n---\n\n<div align = \"middle\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28892385&auto=1&height=66\"></iframe></div>\n\n# Markdown语法\n\n## 标题\n\n|     **语法**     |\n| :--------------: |\n|   `#`一级标题    |\n|   `##`二级标题   |\n|  `###`三级标题   |\n|  `####`四级标题  |\n| `#####`五级标题  |\n| `######`六级标题 |\n\n![png](2.png)\n\n\n\n\n\n## 字体样式\n\n`*斜体*`  *斜体*\n\n`_斜体_ `  _斜体_\n\n`**粗体**`  **粗体**\n\n`***加粗斜体***`***加粗斜体***\n\n`~~删除线~~`  ~~删除线~~\n\n## 插入图片或连接\n\n> 插入链接与插入图片的语法很像，区别在一个 `!`号\n>\n> 图片为：`![]()`\n>\n> 链接为：`[]()`\n\n`[描述](图片路径或者URL)`  描述可以不写\n\n\n\n## 分割线三种方式\n\n你可以在一行中用三个以上的星号`*`、减号`-`、底线`_`来建立一个分隔线，行内不能有其他东西。 \n\n`---`\n\n---\n\n`***`\n\n***\n\n`___`\n\n___\n\n\n\n## 代码块\n\n\n\n**行内式**：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键） \n\n\\`用两个反引号\\` `行内/单行代码块`\n\n\n\n**多行代码块与语法高亮**：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹 \n\n\\`\\`\\`js\n\n三个反引号可以表明代码语言,这里写的js\n\n\\`\\`\\`\\`\n\n```js\n<script>\n    console.log(\"我是js代码块\");\n</script>\n```\n\n\n\n## 引用\n\n在被引用的文本前加上`>`符号，以及一个空格就可以了，如一个`>`符号会产生一次缩进\n\n`>引用` \n\n> 引用\n\n`>>引用`\n\n> > 引用\n\n`>>>引用`\n\n> > > 引用\n\n\n\n## 列表\n\n**无序列表**\n\n使用 *，+，- 都可以表示无序列表。任意选用一个即可, 注意：符号后面一定要有一个空格，起到缩进的作用。 \n\n`- 无序列表`- \n\n`* 无序列表`\n\n`+ 无序列表`\n\n- 无序列表\n- 无序列表\n- 无序列表\n\n**有序列表**\n\n使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 \n\n`1.有序列表`\n\n`2.有序列表`\n\n`3.有序列表`\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n## 转义字符`\\`\n\n如果在使用符号时与Markdown语法冲突,可以在符号前面加上`\\`即可正常显示\n\n如在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\\就可以了\n\n##  表格\n\n`|姓名|性别|分数|`\n\n`|:-:|:-:|:-:|`\n\n`|小明|男|100|`\n\n`|小明|男|100|`\n\n\n\n表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中 \n\n| 姓名 | 性别 | 分数 |\n| :--: | :--: | :--: |\n| 小明 |  男  | 100  |\n| 小明 |  男  | 100  |\n\n## 结束语\n\nMarkdown语法学到这里日常已经够用了,下面介绍一款实时预览的 Markdown 文本编辑器\n\n# Typora\n\nTypora 是一款**支持实时预览的 Markdown 文本编辑器**。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是**完全免费**的。 \n\n点击下载:[Typora](https://www.typora.io/ )\n\n##  GFM 标准\n\n [GFM 标准](https://github.github.com/gfm/)，它是由著名代码托管网站 [GitHub](https://github.com/) 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 `文件 - 偏好设置 - Markdown 语法偏好 - 严格模式` 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 [这篇文档](http://support.typora.io/Strict-Mode/) 中查看。\n\n##  设置图片\n\nTypora 支持在拖动或 `Ctrl + V` 网络图片后自动将其保存到本地。你可以在 `文件 - 偏好设置 - 编辑器 - 图片插入` 中选择复制到哪个路径，什么情况下需要复制。\n\n![](3.png)\n\n","slug":"Markdown语法","published":1,"updated":"2020-02-29T17:00:43.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkec000mwcq4u30p19kw","content":"<div align=\"middle\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28892385&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>语法</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>#</code>一级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>##</code>二级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>###</code>三级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>####</code>四级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>#####</code>五级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>######</code>六级标题</td>\n</tr>\n</tbody></table>\n<p><img src=\"2.png\" alt=\"png\"></p>\n<h2 id=\"字体样式\"><a href=\"#字体样式\" class=\"headerlink\" title=\"字体样式\"></a>字体样式</h2><p><code>*斜体*</code>  <em>斜体</em></p>\n<p><code>_斜体_</code>  _斜体_</p>\n<p><code>**粗体**</code>  <strong>粗体</strong></p>\n<p><code>***加粗斜体***</code><strong><em>加粗斜体</em></strong></p>\n<p><code>~~删除线~~</code>  <del>删除线</del></p>\n<h2 id=\"插入图片或连接\"><a href=\"#插入图片或连接\" class=\"headerlink\" title=\"插入图片或连接\"></a>插入图片或连接</h2><blockquote>\n<p>插入链接与插入图片的语法很像，区别在一个 <code>!</code>号</p>\n<p>图片为：<code>![]()</code></p>\n<p>链接为：<code>[]()</code></p>\n</blockquote>\n<p><code>[描述](图片路径或者URL)</code>  描述可以不写</p>\n<h2 id=\"分割线三种方式\"><a href=\"#分割线三种方式\" class=\"headerlink\" title=\"分割线三种方式\"></a>分割线三种方式</h2><p>你可以在一行中用三个以上的星号<code>*</code>、减号<code>-</code>、底线<code>_</code>来建立一个分隔线，行内不能有其他东西。 </p>\n<p><code>---</code></p>\n<hr>\n<p><code>***</code></p>\n<hr>\n<p><code>___</code></p>\n<hr>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><p><strong>行内式</strong>：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键） </p>\n<p>`用两个反引号` <code>行内/单行代码块</code></p>\n<p><strong>多行代码块与语法高亮</strong>：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹 </p>\n<p>```js</p>\n<p>三个反引号可以表明代码语言,这里写的js</p>\n<p>````</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是js代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>在被引用的文本前加上<code>&gt;</code>符号，以及一个空格就可以了，如一个<code>&gt;</code>符号会产生一次缩进</p>\n<p><code>&gt;引用</code> </p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<p><code>&gt;&gt;引用</code></p>\n<blockquote>\n<blockquote>\n<p>引用</p>\n</blockquote>\n</blockquote>\n<p><code>&gt;&gt;&gt;引用</code></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>无序列表</strong></p>\n<p>使用 *，+，- 都可以表示无序列表。任意选用一个即可, 注意：符号后面一定要有一个空格，起到缩进的作用。 </p>\n<p><code>- 无序列表</code>- </p>\n<p><code>* 无序列表</code></p>\n<p><code>+ 无序列表</code></p>\n<ul>\n<li>无序列表</li>\n<li>无序列表</li>\n<li>无序列表</li>\n</ul>\n<p><strong>有序列表</strong></p>\n<p>使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 </p>\n<p><code>1.有序列表</code></p>\n<p><code>2.有序列表</code></p>\n<p><code>3.有序列表</code></p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\\\"></a>转义字符<code>\\</code></h2><p>如果在使用符号时与Markdown语法冲突,可以在符号前面加上<code>\\</code>即可正常显示</p>\n<p>如在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\\就可以了</p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p><code>|姓名|性别|分数|</code></p>\n<p><code>|:-:|:-:|:-:|</code></p>\n<p><code>|小明|男|100|</code></p>\n<p><code>|小明|男|100|</code></p>\n<p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中 </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"center\">分数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">小明</td>\n<td align=\"center\">男</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">小明</td>\n<td align=\"center\">男</td>\n<td align=\"center\">100</td>\n</tr>\n</tbody></table>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>Markdown语法学到这里日常已经够用了,下面介绍一款实时预览的 Markdown 文本编辑器</p>\n<h1 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h1><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。 </p>\n<p>点击下载:<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></p>\n<h2 id=\"GFM-标准\"><a href=\"#GFM-标准\" class=\"headerlink\" title=\"GFM 标准\"></a>GFM 标准</h2><p> <a href=\"https://github.github.com/gfm/\" target=\"_blank\" rel=\"noopener\">GFM 标准</a>，它是由著名代码托管网站 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href=\"http://support.typora.io/Strict-Mode/\" target=\"_blank\" rel=\"noopener\">这篇文档</a> 中查看。</p>\n<h2 id=\"设置图片\"><a href=\"#设置图片\" class=\"headerlink\" title=\"设置图片\"></a>设置图片</h2><p>Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p>\n<p><img src=\"3.png\" alt></p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28892385&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>语法</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>#</code>一级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>##</code>二级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>###</code>三级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>####</code>四级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>#####</code>五级标题</td>\n</tr>\n<tr>\n<td align=\"center\"><code>######</code>六级标题</td>\n</tr>\n</tbody></table>\n<p><img src=\"2.png\" alt=\"png\"></p>\n<h2 id=\"字体样式\"><a href=\"#字体样式\" class=\"headerlink\" title=\"字体样式\"></a>字体样式</h2><p><code>*斜体*</code>  <em>斜体</em></p>\n<p><code>_斜体_</code>  _斜体_</p>\n<p><code>**粗体**</code>  <strong>粗体</strong></p>\n<p><code>***加粗斜体***</code><strong><em>加粗斜体</em></strong></p>\n<p><code>~~删除线~~</code>  <del>删除线</del></p>\n<h2 id=\"插入图片或连接\"><a href=\"#插入图片或连接\" class=\"headerlink\" title=\"插入图片或连接\"></a>插入图片或连接</h2><blockquote>\n<p>插入链接与插入图片的语法很像，区别在一个 <code>!</code>号</p>\n<p>图片为：<code>![]()</code></p>\n<p>链接为：<code>[]()</code></p>\n</blockquote>\n<p><code>[描述](图片路径或者URL)</code>  描述可以不写</p>\n<h2 id=\"分割线三种方式\"><a href=\"#分割线三种方式\" class=\"headerlink\" title=\"分割线三种方式\"></a>分割线三种方式</h2><p>你可以在一行中用三个以上的星号<code>*</code>、减号<code>-</code>、底线<code>_</code>来建立一个分隔线，行内不能有其他东西。 </p>\n<p><code>---</code></p>\n<hr>\n<p><code>***</code></p>\n<hr>\n<p><code>___</code></p>\n<hr>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><p><strong>行内式</strong>：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键） </p>\n<p>`用两个反引号` <code>行内/单行代码块</code></p>\n<p><strong>多行代码块与语法高亮</strong>：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹 </p>\n<p>```js</p>\n<p>三个反引号可以表明代码语言,这里写的js</p>\n<p>````</p>\n<pre><code class=\"js\">&lt;script&gt;\n    console.log(&quot;我是js代码块&quot;);\n&lt;/script&gt;</code></pre>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>在被引用的文本前加上<code>&gt;</code>符号，以及一个空格就可以了，如一个<code>&gt;</code>符号会产生一次缩进</p>\n<p><code>&gt;引用</code> </p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<p><code>&gt;&gt;引用</code></p>\n<blockquote>\n<blockquote>\n<p>引用</p>\n</blockquote>\n</blockquote>\n<p><code>&gt;&gt;&gt;引用</code></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>无序列表</strong></p>\n<p>使用 *，+，- 都可以表示无序列表。任意选用一个即可, 注意：符号后面一定要有一个空格，起到缩进的作用。 </p>\n<p><code>- 无序列表</code>- </p>\n<p><code>* 无序列表</code></p>\n<p><code>+ 无序列表</code></p>\n<ul>\n<li>无序列表</li>\n<li>无序列表</li>\n<li>无序列表</li>\n</ul>\n<p><strong>有序列表</strong></p>\n<p>使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 </p>\n<p><code>1.有序列表</code></p>\n<p><code>2.有序列表</code></p>\n<p><code>3.有序列表</code></p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\\\"></a>转义字符<code>\\</code></h2><p>如果在使用符号时与Markdown语法冲突,可以在符号前面加上<code>\\</code>即可正常显示</p>\n<p>如在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\\就可以了</p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p><code>|姓名|性别|分数|</code></p>\n<p><code>|:-:|:-:|:-:|</code></p>\n<p><code>|小明|男|100|</code></p>\n<p><code>|小明|男|100|</code></p>\n<p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中 </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"center\">分数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">小明</td>\n<td align=\"center\">男</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"center\">小明</td>\n<td align=\"center\">男</td>\n<td align=\"center\">100</td>\n</tr>\n</tbody></table>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>Markdown语法学到这里日常已经够用了,下面介绍一款实时预览的 Markdown 文本编辑器</p>\n<h1 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h1><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。 </p>\n<p>点击下载:<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></p>\n<h2 id=\"GFM-标准\"><a href=\"#GFM-标准\" class=\"headerlink\" title=\"GFM 标准\"></a>GFM 标准</h2><p> <a href=\"https://github.github.com/gfm/\" target=\"_blank\" rel=\"noopener\">GFM 标准</a>，它是由著名代码托管网站 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href=\"http://support.typora.io/Strict-Mode/\" target=\"_blank\" rel=\"noopener\">这篇文档</a> 中查看。</p>\n<h2 id=\"设置图片\"><a href=\"#设置图片\" class=\"headerlink\" title=\"设置图片\"></a>设置图片</h2><p>Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p>\n<p><img src=\"3.png\" alt></p>\n"},{"title":"Vue-router","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-06T17:01:56.000Z","password":null,"summary":null,"_content":"# Vue-router\n\n## 路由的概念与原理\n\n> 路由的本质就是对应关系\n\n### 后端路由\n\n> 概念: 根据不同的URL请求, 返回不同的内容\n>\n> 本质: URL 请求地址与服务器资源之间的对应关系\n\n### SPA ( Single Page Application)\n\n> 后端渲染 会造成页面的频繁刷新\n>\n> Ajax前端渲染 提高性能, 但是不支持浏览器的前进后退\n>\n> SPA 单页面应用程序: 整个网站只有一个页面, 内容变化通过Ajax实现, 同时支持浏览器前进后退操作\n>\n> SPA实现原理之一: 基于URL地址的`hash(锚链接)` (hash的变化会导致浏览器记录访问历史变化, 但是hash的变化不会触发新的URL请求)\n>\n> 实现SPA过程中, 最核心的技术点就是前端路由\n\n### 前端路由\n\n> 概念: 根据不同的`用户事件`, 显示不同的页面内容\n>\n> 本质: `用户事件`与`事件处理函数`之间的对应关系\n\n####  简易前端路由\n\n```js\n// 监听 window 的 onhashchange 事件, 根据获取到的最新的 hash 值, 切换要显示的组件的名称\nwindow.onhashchange = function(){\n\t//通过 location.hash 获取到最新的 hash 值\n    location.hash.slice(1)// 去掉第一个字符 #\n}\n```\n\n#### Vue Router\n\n##### 介绍\n\n> Vue.js 官方的`路由管理器`\n>\n> 它和Vue.js 的核心深度集成\n\n> Vue Router 支持的功能有:\n>\n> > HTML5历史模式或hash模式\n> >\n> > 嵌套路由\n> >\n> > 路由参数\n> >\n> > 编程式路由\n> >\n> > 命名路由\n\n##### 使用步骤\n\n> **引入相关的库文件**\n>\n> > 导入vue文件 , 为全局window 对象挂载 Vue 构造函数\n> >\n> > `<script src=\"\"></script>`\n> >\n> > 导入 vue-router 文件, 为全局 window 对象挂载 VueRouter 构造函数\n>\n> **添加路由连接**\n>\n> > router-link 是 vue 中提供的标签, 默认会被渲染为 a 标签\n> >\n> > to 属性默认会被渲染为 href属性\n> >\n> > to 属性的值默认会被渲染为 # 开头的hash 地址\n> >\n> > `<router-link to=\"/user\">User</router-link`\n>\n> **添加路由填充位**\n>\n> > 路由填充位(也叫`路由占位符`)\n> >\n> > 将来通过路由规则匹配到的组件, 将会被渲染到 router-view 所在的位置\n> >\n> > `<router-view></router-view>`\n>\n> **定义路由组件**\n>\n> ```\n> const User = {\n> \ttemplate: '<div>User</div>'\n> }\n> ```\n>\n> \n>\n> **配置路由规则并创建路由实例**\n>\n> ```\n> // 创建路由实例对象\n> var router = new VueRouter({\n> \t// routers 是路由规则数组\n> \troutes: [\n> \t// 每个路由规则都是一个配置对象. 至少包含 path 和 component 两个属性:\n> \t// path 表示当前路由规则匹配的 hash 地址\n> \t// component 表示当前路由规则对应要展示的组件\n> \t{path: '/user', component: User}\n> \t]\n> })\n> ```\n>\n> \n>\n> **把路由挂载到Vue 根实例中** \n>\n> ```\n> new Vue ({\n> \tel: '#app',\n> \t// 为了能够让路由规则生效, 必须把路由对象挂载到 vue 实例对象上\n> \trouter: router //把创建的实例对象赋值给 Vue 实例的属性router , 也可以直接简写成一个 router\n> })\n> ```\n>\n> \n\n##### 路由重定向\n\n> 访问 地址 A 的时候 , 强制跳转到 B   -- redirect\n>\n> ```\n> var router = new VueRouter({\n> \troutes:[\n> \t\t{path: '/', redirect: '/user'},\n> \t\t{path: '/', component: User}\n> \t]\n> })\n> ```\n>\n> \n\n##### 嵌套路由\n\n> 父级路由连接显示的模板内容中又有子级路由连接, 点击子路由连接显示子级模板内容\n>\n> > 先在父路由组件中添加子路由连接和容器\n> >\n> > 然后定义子路由组件\n> >\n> > 最后将子路由组件添加到父路由规则的 children 属性中\n>\n> ```\n> \n> const User = {\n> \ttemplate: `<div>\n> \t\t<h1>User 组件</h1>\n> \t\t<hr/>\n> \t\t<!-- 子路由连接 -->\n> \t\t<router-link to = \"/user/tab1\">tab1</router-link>\n> \t\t<router-link to = \"/user/tab2\">tab2</router-link>\n> \t\t<!-- 子路由占位符 -->\n> \t\t<router-view/>\n> \t</div>`\n> }\n> ```\n>\n> ```\n> const Tab1= {\n> \ttemplate: '<h3>Tab1子组件</h3>'\n> }\n> const Tab2= {\n> \ttemplate: '<h3>Tab2子组件</h3>'\n> }\n> ```\n>\n> ```\n> const router = new VueRouter({\n> \troutes:[\n> \t\t{path: '/', redirect: '/user'},\n> \t\t// children 数组表示子路由规则\n> \t\t{path: '/', component: User, children:[\n> \t\t{path:'user/tab1',component: Tab1},\n> \t\t{path:'user/tab2', component: Tab2}\n> \t\t]}\n> \t]\n> })\n> ```\n>\n> \n\n##### 动态路由匹配\n\n> 如果路由连接一部分相同一部分是变化的, 我们可以把变化的部分设置成路由参数, \n>\n> 多个路由共用一个规则,  减少路由规则定义的数量\n>\n> 设置路由规则:\n>\n> ```\n> var router = new VueRouter({\n> \troutes: [\n> \t\t//动态路径参数, 以冒号开头\n> \t\t{path: '/user/:id', component: User}\n> \t]\n> })\n> ```\n>\n> 获取路由参数\n>\n> ```\n> const User = {\n> \t// 路由组件中通过$route.params 获取路由参数\n> \ttemplate : '<div>User {{ $route.params.id }} </div>'\n> }\n> ```\n>\n> 使用 props \n>\n> ```\n> const router = new VueRouter({\n> \troutes: [\n> \t\t// 如果props 被设置为 true, route.params 将会被设置为组件属性\n> \t\t{ path: '/user/:id, component: User, props: true}\n> \t\t//props 也可以传递动态参数 props: { uname: 'list', age: 20}\n> \t]\n> })\n> \n> const User= {\n> \tprops: ['id'], // 使用props 接收路由参数\n> \t// props: ['name','age']\n> \ttemplata: '<div>用户ID:{{id}}</div>' //使用路由参数\n> }\n> ```\n>\n> \n\nprops 的值为函数类型\n\n> ```\n> const router = newVueRouter({\n> \ttoutes: [\n> \t\t//如果 props 是一个函数, 则这个函数接收route 对象为自己的形参\n> \t\t{\n> \t\tpath: '/user/:id',\n> \t\tcomponent: User,\n> \t\tprops: route => ({ uname:'zs, age: 20, id: route.params.id})\n> \t\t}\n> \t]\n> })\n> \n> const User = { \n> \tprops: ['uname','age','id'],\n> \ttemplate: `<div>用户信息:{{uname + age + id}}</div>\n> }\n> ```\n>\n> \n\n##### 命名路由导航\n\n> ```\n> <router-link :to: \"{ name: 'user', params: { id: 3} }\">User3</router-link>\n> ```\n>\n> ```\n> 给路由规则添加一个 name: 'user' 属性\n> ```\n>\n> \n\n##### 编程式导航\n\n> 通过点击链接试下导航的方式, 叫做声明式导航\n>\n> 例如 : a 连接 或者 vue 中的<router-link></router-link> \n>\n> 通过调用 JavaScript 形式的API 实现导航的方式, 叫做编程式导航\n>\n> 例如 : 普通网页中的 location.href\n>\n> > this.$router.push('hash地址') // 跳转到对应的地址\n> >\n> > this.$router.go(1)  // 前进或者后退 , 正数表示前进, 负数表示后退\n>\n> ```\n> //字符串(路径名称)\n> router.push('/home')\n> //对象\n> router.push({ path: '/home'})\n> //命名路由(传递参数)\n> router.push({ name: '/user', params: {userid: 123}})\n> //带查询参数, 变成 /user?uname=zhanglei\n> router.push({ path: '/user', query: { uname: 'zhanglei'}})\n> ```\n>\n> ","source":"_posts/VueRouter-路由.md","raw":"---\ntitle: Vue-router\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-7 01:01:56\npassword:\nsummary: \ntags:\n- Vue\ncategories:\n- 前端\n---\n# Vue-router\n\n## 路由的概念与原理\n\n> 路由的本质就是对应关系\n\n### 后端路由\n\n> 概念: 根据不同的URL请求, 返回不同的内容\n>\n> 本质: URL 请求地址与服务器资源之间的对应关系\n\n### SPA ( Single Page Application)\n\n> 后端渲染 会造成页面的频繁刷新\n>\n> Ajax前端渲染 提高性能, 但是不支持浏览器的前进后退\n>\n> SPA 单页面应用程序: 整个网站只有一个页面, 内容变化通过Ajax实现, 同时支持浏览器前进后退操作\n>\n> SPA实现原理之一: 基于URL地址的`hash(锚链接)` (hash的变化会导致浏览器记录访问历史变化, 但是hash的变化不会触发新的URL请求)\n>\n> 实现SPA过程中, 最核心的技术点就是前端路由\n\n### 前端路由\n\n> 概念: 根据不同的`用户事件`, 显示不同的页面内容\n>\n> 本质: `用户事件`与`事件处理函数`之间的对应关系\n\n####  简易前端路由\n\n```js\n// 监听 window 的 onhashchange 事件, 根据获取到的最新的 hash 值, 切换要显示的组件的名称\nwindow.onhashchange = function(){\n\t//通过 location.hash 获取到最新的 hash 值\n    location.hash.slice(1)// 去掉第一个字符 #\n}\n```\n\n#### Vue Router\n\n##### 介绍\n\n> Vue.js 官方的`路由管理器`\n>\n> 它和Vue.js 的核心深度集成\n\n> Vue Router 支持的功能有:\n>\n> > HTML5历史模式或hash模式\n> >\n> > 嵌套路由\n> >\n> > 路由参数\n> >\n> > 编程式路由\n> >\n> > 命名路由\n\n##### 使用步骤\n\n> **引入相关的库文件**\n>\n> > 导入vue文件 , 为全局window 对象挂载 Vue 构造函数\n> >\n> > `<script src=\"\"></script>`\n> >\n> > 导入 vue-router 文件, 为全局 window 对象挂载 VueRouter 构造函数\n>\n> **添加路由连接**\n>\n> > router-link 是 vue 中提供的标签, 默认会被渲染为 a 标签\n> >\n> > to 属性默认会被渲染为 href属性\n> >\n> > to 属性的值默认会被渲染为 # 开头的hash 地址\n> >\n> > `<router-link to=\"/user\">User</router-link`\n>\n> **添加路由填充位**\n>\n> > 路由填充位(也叫`路由占位符`)\n> >\n> > 将来通过路由规则匹配到的组件, 将会被渲染到 router-view 所在的位置\n> >\n> > `<router-view></router-view>`\n>\n> **定义路由组件**\n>\n> ```\n> const User = {\n> \ttemplate: '<div>User</div>'\n> }\n> ```\n>\n> \n>\n> **配置路由规则并创建路由实例**\n>\n> ```\n> // 创建路由实例对象\n> var router = new VueRouter({\n> \t// routers 是路由规则数组\n> \troutes: [\n> \t// 每个路由规则都是一个配置对象. 至少包含 path 和 component 两个属性:\n> \t// path 表示当前路由规则匹配的 hash 地址\n> \t// component 表示当前路由规则对应要展示的组件\n> \t{path: '/user', component: User}\n> \t]\n> })\n> ```\n>\n> \n>\n> **把路由挂载到Vue 根实例中** \n>\n> ```\n> new Vue ({\n> \tel: '#app',\n> \t// 为了能够让路由规则生效, 必须把路由对象挂载到 vue 实例对象上\n> \trouter: router //把创建的实例对象赋值给 Vue 实例的属性router , 也可以直接简写成一个 router\n> })\n> ```\n>\n> \n\n##### 路由重定向\n\n> 访问 地址 A 的时候 , 强制跳转到 B   -- redirect\n>\n> ```\n> var router = new VueRouter({\n> \troutes:[\n> \t\t{path: '/', redirect: '/user'},\n> \t\t{path: '/', component: User}\n> \t]\n> })\n> ```\n>\n> \n\n##### 嵌套路由\n\n> 父级路由连接显示的模板内容中又有子级路由连接, 点击子路由连接显示子级模板内容\n>\n> > 先在父路由组件中添加子路由连接和容器\n> >\n> > 然后定义子路由组件\n> >\n> > 最后将子路由组件添加到父路由规则的 children 属性中\n>\n> ```\n> \n> const User = {\n> \ttemplate: `<div>\n> \t\t<h1>User 组件</h1>\n> \t\t<hr/>\n> \t\t<!-- 子路由连接 -->\n> \t\t<router-link to = \"/user/tab1\">tab1</router-link>\n> \t\t<router-link to = \"/user/tab2\">tab2</router-link>\n> \t\t<!-- 子路由占位符 -->\n> \t\t<router-view/>\n> \t</div>`\n> }\n> ```\n>\n> ```\n> const Tab1= {\n> \ttemplate: '<h3>Tab1子组件</h3>'\n> }\n> const Tab2= {\n> \ttemplate: '<h3>Tab2子组件</h3>'\n> }\n> ```\n>\n> ```\n> const router = new VueRouter({\n> \troutes:[\n> \t\t{path: '/', redirect: '/user'},\n> \t\t// children 数组表示子路由规则\n> \t\t{path: '/', component: User, children:[\n> \t\t{path:'user/tab1',component: Tab1},\n> \t\t{path:'user/tab2', component: Tab2}\n> \t\t]}\n> \t]\n> })\n> ```\n>\n> \n\n##### 动态路由匹配\n\n> 如果路由连接一部分相同一部分是变化的, 我们可以把变化的部分设置成路由参数, \n>\n> 多个路由共用一个规则,  减少路由规则定义的数量\n>\n> 设置路由规则:\n>\n> ```\n> var router = new VueRouter({\n> \troutes: [\n> \t\t//动态路径参数, 以冒号开头\n> \t\t{path: '/user/:id', component: User}\n> \t]\n> })\n> ```\n>\n> 获取路由参数\n>\n> ```\n> const User = {\n> \t// 路由组件中通过$route.params 获取路由参数\n> \ttemplate : '<div>User {{ $route.params.id }} </div>'\n> }\n> ```\n>\n> 使用 props \n>\n> ```\n> const router = new VueRouter({\n> \troutes: [\n> \t\t// 如果props 被设置为 true, route.params 将会被设置为组件属性\n> \t\t{ path: '/user/:id, component: User, props: true}\n> \t\t//props 也可以传递动态参数 props: { uname: 'list', age: 20}\n> \t]\n> })\n> \n> const User= {\n> \tprops: ['id'], // 使用props 接收路由参数\n> \t// props: ['name','age']\n> \ttemplata: '<div>用户ID:{{id}}</div>' //使用路由参数\n> }\n> ```\n>\n> \n\nprops 的值为函数类型\n\n> ```\n> const router = newVueRouter({\n> \ttoutes: [\n> \t\t//如果 props 是一个函数, 则这个函数接收route 对象为自己的形参\n> \t\t{\n> \t\tpath: '/user/:id',\n> \t\tcomponent: User,\n> \t\tprops: route => ({ uname:'zs, age: 20, id: route.params.id})\n> \t\t}\n> \t]\n> })\n> \n> const User = { \n> \tprops: ['uname','age','id'],\n> \ttemplate: `<div>用户信息:{{uname + age + id}}</div>\n> }\n> ```\n>\n> \n\n##### 命名路由导航\n\n> ```\n> <router-link :to: \"{ name: 'user', params: { id: 3} }\">User3</router-link>\n> ```\n>\n> ```\n> 给路由规则添加一个 name: 'user' 属性\n> ```\n>\n> \n\n##### 编程式导航\n\n> 通过点击链接试下导航的方式, 叫做声明式导航\n>\n> 例如 : a 连接 或者 vue 中的<router-link></router-link> \n>\n> 通过调用 JavaScript 形式的API 实现导航的方式, 叫做编程式导航\n>\n> 例如 : 普通网页中的 location.href\n>\n> > this.$router.push('hash地址') // 跳转到对应的地址\n> >\n> > this.$router.go(1)  // 前进或者后退 , 正数表示前进, 负数表示后退\n>\n> ```\n> //字符串(路径名称)\n> router.push('/home')\n> //对象\n> router.push({ path: '/home'})\n> //命名路由(传递参数)\n> router.push({ name: '/user', params: {userid: 123}})\n> //带查询参数, 变成 /user?uname=zhanglei\n> router.push({ path: '/user', query: { uname: 'zhanglei'}})\n> ```\n>\n> ","slug":"VueRouter-路由","published":1,"updated":"2020-04-09T17:56:29.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkef000qwcq4ajqrcs92","content":"<h1 id=\"Vue-router\"><a href=\"#Vue-router\" class=\"headerlink\" title=\"Vue-router\"></a>Vue-router</h1><h2 id=\"路由的概念与原理\"><a href=\"#路由的概念与原理\" class=\"headerlink\" title=\"路由的概念与原理\"></a>路由的概念与原理</h2><blockquote>\n<p>路由的本质就是对应关系</p>\n</blockquote>\n<h3 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h3><blockquote>\n<p>概念: 根据不同的URL请求, 返回不同的内容</p>\n<p>本质: URL 请求地址与服务器资源之间的对应关系</p>\n</blockquote>\n<h3 id=\"SPA-Single-Page-Application\"><a href=\"#SPA-Single-Page-Application\" class=\"headerlink\" title=\"SPA ( Single Page Application)\"></a>SPA ( Single Page Application)</h3><blockquote>\n<p>后端渲染 会造成页面的频繁刷新</p>\n<p>Ajax前端渲染 提高性能, 但是不支持浏览器的前进后退</p>\n<p>SPA 单页面应用程序: 整个网站只有一个页面, 内容变化通过Ajax实现, 同时支持浏览器前进后退操作</p>\n<p>SPA实现原理之一: 基于URL地址的<code>hash(锚链接)</code> (hash的变化会导致浏览器记录访问历史变化, 但是hash的变化不会触发新的URL请求)</p>\n<p>实现SPA过程中, 最核心的技术点就是前端路由</p>\n</blockquote>\n<h3 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h3><blockquote>\n<p>概念: 根据不同的<code>用户事件</code>, 显示不同的页面内容</p>\n<p>本质: <code>用户事件</code>与<code>事件处理函数</code>之间的对应关系</p>\n</blockquote>\n<h4 id=\"简易前端路由\"><a href=\"#简易前端路由\" class=\"headerlink\" title=\"简易前端路由\"></a>简易前端路由</h4><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 监听 window 的 onhashchange 事件, 根据获取到的最新的 hash 值, 切换要显示的组件的名称</span>\nwindow<span class=\"token punctuation\">.</span>onhashchange <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过 location.hash 获取到最新的 hash 值</span>\n    location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">// 去掉第一个字符 #</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue Router\"></a>Vue Router</h4><h5 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h5><blockquote>\n<p>Vue.js 官方的<code>路由管理器</code></p>\n<p>它和Vue.js 的核心深度集成</p>\n</blockquote>\n<blockquote>\n<p>Vue Router 支持的功能有:</p>\n<blockquote>\n<p>HTML5历史模式或hash模式</p>\n<p>嵌套路由</p>\n<p>路由参数</p>\n<p>编程式路由</p>\n<p>命名路由</p>\n</blockquote>\n</blockquote>\n<h5 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h5><blockquote>\n<p><strong>引入相关的库文件</strong></p>\n<blockquote>\n<p>导入vue文件 , 为全局window 对象挂载 Vue 构造函数</p>\n<p><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></p>\n<p>导入 vue-router 文件, 为全局 window 对象挂载 VueRouter 构造函数</p>\n</blockquote>\n<p><strong>添加路由连接</strong></p>\n<blockquote>\n<p>router-link 是 vue 中提供的标签, 默认会被渲染为 a 标签</p>\n<p>to 属性默认会被渲染为 href属性</p>\n<p>to 属性的值默认会被渲染为 # 开头的hash 地址</p>\n<p><code>&lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link</code></p>\n</blockquote>\n<p><strong>添加路由填充位</strong></p>\n<blockquote>\n<p>路由填充位(也叫<code>路由占位符</code>)</p>\n<p>将来通过路由规则匹配到的组件, 将会被渲染到 router-view 所在的位置</p>\n<p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n</blockquote>\n<p><strong>定义路由组件</strong></p>\n<pre><code>const User = {\n    template: &#39;&lt;div&gt;User&lt;/div&gt;&#39;\n}</code></pre><p><strong>配置路由规则并创建路由实例</strong></p>\n<pre><code>// 创建路由实例对象\nvar router = new VueRouter({\n    // routers 是路由规则数组\n    routes: [\n    // 每个路由规则都是一个配置对象. 至少包含 path 和 component 两个属性:\n    // path 表示当前路由规则匹配的 hash 地址\n    // component 表示当前路由规则对应要展示的组件\n    {path: &#39;/user&#39;, component: User}\n    ]\n})</code></pre><p><strong>把路由挂载到Vue 根实例中</strong> </p>\n<pre><code>new Vue ({\n    el: &#39;#app&#39;,\n    // 为了能够让路由规则生效, 必须把路由对象挂载到 vue 实例对象上\n    router: router //把创建的实例对象赋值给 Vue 实例的属性router , 也可以直接简写成一个 router\n})</code></pre></blockquote>\n<h5 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h5><blockquote>\n<p>访问 地址 A 的时候 , 强制跳转到 B   – redirect</p>\n<pre><code>var router = new VueRouter({\n    routes:[\n        {path: &#39;/&#39;, redirect: &#39;/user&#39;},\n        {path: &#39;/&#39;, component: User}\n    ]\n})</code></pre></blockquote>\n<h5 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h5><blockquote>\n<p>父级路由连接显示的模板内容中又有子级路由连接, 点击子路由连接显示子级模板内容</p>\n<blockquote>\n<p>先在父路由组件中添加子路由连接和容器</p>\n<p>然后定义子路由组件</p>\n<p>最后将子路由组件添加到父路由规则的 children 属性中</p>\n</blockquote>\n<pre><code>\nconst User = {\n    template: `&lt;div&gt;\n        &lt;h1&gt;User 组件&lt;/h1&gt;\n        &lt;hr/&gt;\n        &lt;!-- 子路由连接 --&gt;\n        &lt;router-link to = &quot;/user/tab1&quot;&gt;tab1&lt;/router-link&gt;\n        &lt;router-link to = &quot;/user/tab2&quot;&gt;tab2&lt;/router-link&gt;\n        &lt;!-- 子路由占位符 --&gt;\n        &lt;router-view/&gt;\n    &lt;/div&gt;`\n}</code></pre><pre><code>const Tab1= {\n    template: &#39;&lt;h3&gt;Tab1子组件&lt;/h3&gt;&#39;\n}\nconst Tab2= {\n    template: &#39;&lt;h3&gt;Tab2子组件&lt;/h3&gt;&#39;\n}</code></pre><pre><code>const router = new VueRouter({\n    routes:[\n        {path: &#39;/&#39;, redirect: &#39;/user&#39;},\n        // children 数组表示子路由规则\n        {path: &#39;/&#39;, component: User, children:[\n        {path:&#39;user/tab1&#39;,component: Tab1},\n        {path:&#39;user/tab2&#39;, component: Tab2}\n        ]}\n    ]\n})</code></pre></blockquote>\n<h5 id=\"动态路由匹配\"><a href=\"#动态路由匹配\" class=\"headerlink\" title=\"动态路由匹配\"></a>动态路由匹配</h5><blockquote>\n<p>如果路由连接一部分相同一部分是变化的, 我们可以把变化的部分设置成路由参数, </p>\n<p>多个路由共用一个规则,  减少路由规则定义的数量</p>\n<p>设置路由规则:</p>\n<pre><code>var router = new VueRouter({\n    routes: [\n        //动态路径参数, 以冒号开头\n        {path: &#39;/user/:id&#39;, component: User}\n    ]\n})</code></pre><p>获取路由参数</p>\n<pre><code>const User = {\n    // 路由组件中通过$route.params 获取路由参数\n    template : &#39;&lt;div&gt;User {{ $route.params.id }} &lt;/div&gt;&#39;\n}</code></pre><p>使用 props </p>\n<pre><code>const router = new VueRouter({\n    routes: [\n        // 如果props 被设置为 true, route.params 将会被设置为组件属性\n        { path: &#39;/user/:id, component: User, props: true}\n        //props 也可以传递动态参数 props: { uname: &#39;list&#39;, age: 20}\n    ]\n})\n\nconst User= {\n    props: [&#39;id&#39;], // 使用props 接收路由参数\n    // props: [&#39;name&#39;,&#39;age&#39;]\n    templata: &#39;&lt;div&gt;用户ID:{{id}}&lt;/div&gt;&#39; //使用路由参数\n}</code></pre></blockquote>\n<p>props 的值为函数类型</p>\n<blockquote>\n<pre><code>const router = newVueRouter({\n    toutes: [\n        //如果 props 是一个函数, 则这个函数接收route 对象为自己的形参\n        {\n        path: &#39;/user/:id&#39;,\n        component: User,\n        props: route =&gt; ({ uname:&#39;zs, age: 20, id: route.params.id})\n        }\n    ]\n})\n\nconst User = { \n    props: [&#39;uname&#39;,&#39;age&#39;,&#39;id&#39;],\n    template: `&lt;div&gt;用户信息:{{uname + age + id}}&lt;/div&gt;\n}</code></pre></blockquote>\n<h5 id=\"命名路由导航\"><a href=\"#命名路由导航\" class=\"headerlink\" title=\"命名路由导航\"></a>命名路由导航</h5><blockquote>\n<pre><code>&lt;router-link :to: &quot;{ name: &#39;user&#39;, params: { id: 3} }&quot;&gt;User3&lt;/router-link&gt;</code></pre><pre><code>给路由规则添加一个 name: &#39;user&#39; 属性</code></pre></blockquote>\n<h5 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h5><blockquote>\n<p>通过点击链接试下导航的方式, 叫做声明式导航</p>\n<p>例如 : a 连接 或者 vue 中的<router-link></router-link> </p>\n<p>通过调用 JavaScript 形式的API 实现导航的方式, 叫做编程式导航</p>\n<p>例如 : 普通网页中的 location.href</p>\n<blockquote>\n<p>this.$router.push(‘hash地址’) // 跳转到对应的地址</p>\n<p>this.$router.go(1)  // 前进或者后退 , 正数表示前进, 负数表示后退</p>\n</blockquote>\n<pre><code>//字符串(路径名称)\nrouter.push(&#39;/home&#39;)\n//对象\nrouter.push({ path: &#39;/home&#39;})\n//命名路由(传递参数)\nrouter.push({ name: &#39;/user&#39;, params: {userid: 123}})\n//带查询参数, 变成 /user?uname=zhanglei\nrouter.push({ path: &#39;/user&#39;, query: { uname: &#39;zhanglei&#39;}})</code></pre></blockquote>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"Vue-router\"><a href=\"#Vue-router\" class=\"headerlink\" title=\"Vue-router\"></a>Vue-router</h1><h2 id=\"路由的概念与原理\"><a href=\"#路由的概念与原理\" class=\"headerlink\" title=\"路由的概念与原理\"></a>路由的概念与原理</h2><blockquote>\n<p>路由的本质就是对应关系</p>\n</blockquote>\n<h3 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h3><blockquote>\n<p>概念: 根据不同的URL请求, 返回不同的内容</p>\n<p>本质: URL 请求地址与服务器资源之间的对应关系</p>\n</blockquote>\n<h3 id=\"SPA-Single-Page-Application\"><a href=\"#SPA-Single-Page-Application\" class=\"headerlink\" title=\"SPA ( Single Page Application)\"></a>SPA ( Single Page Application)</h3><blockquote>\n<p>后端渲染 会造成页面的频繁刷新</p>\n<p>Ajax前端渲染 提高性能, 但是不支持浏览器的前进后退</p>\n<p>SPA 单页面应用程序: 整个网站只有一个页面, 内容变化通过Ajax实现, 同时支持浏览器前进后退操作</p>\n<p>SPA实现原理之一: 基于URL地址的<code>hash(锚链接)</code> (hash的变化会导致浏览器记录访问历史变化, 但是hash的变化不会触发新的URL请求)</p>\n<p>实现SPA过程中, 最核心的技术点就是前端路由</p>\n</blockquote>\n<h3 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h3><blockquote>\n<p>概念: 根据不同的<code>用户事件</code>, 显示不同的页面内容</p>\n<p>本质: <code>用户事件</code>与<code>事件处理函数</code>之间的对应关系</p>\n</blockquote>\n<h4 id=\"简易前端路由\"><a href=\"#简易前端路由\" class=\"headerlink\" title=\"简易前端路由\"></a>简易前端路由</h4><pre><code class=\"js\">// 监听 window 的 onhashchange 事件, 根据获取到的最新的 hash 值, 切换要显示的组件的名称\nwindow.onhashchange = function(){\n    //通过 location.hash 获取到最新的 hash 值\n    location.hash.slice(1)// 去掉第一个字符 #\n}</code></pre>\n<h4 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue Router\"></a>Vue Router</h4><h5 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h5><blockquote>\n<p>Vue.js 官方的<code>路由管理器</code></p>\n<p>它和Vue.js 的核心深度集成</p>\n</blockquote>\n<blockquote>\n<p>Vue Router 支持的功能有:</p>\n<blockquote>\n<p>HTML5历史模式或hash模式</p>\n<p>嵌套路由</p>\n<p>路由参数</p>\n<p>编程式路由</p>\n<p>命名路由</p>\n</blockquote>\n</blockquote>\n<h5 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h5><blockquote>\n<p><strong>引入相关的库文件</strong></p>\n<blockquote>\n<p>导入vue文件 , 为全局window 对象挂载 Vue 构造函数</p>\n<p><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></p>\n<p>导入 vue-router 文件, 为全局 window 对象挂载 VueRouter 构造函数</p>\n</blockquote>\n<p><strong>添加路由连接</strong></p>\n<blockquote>\n<p>router-link 是 vue 中提供的标签, 默认会被渲染为 a 标签</p>\n<p>to 属性默认会被渲染为 href属性</p>\n<p>to 属性的值默认会被渲染为 # 开头的hash 地址</p>\n<p><code>&lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link</code></p>\n</blockquote>\n<p><strong>添加路由填充位</strong></p>\n<blockquote>\n<p>路由填充位(也叫<code>路由占位符</code>)</p>\n<p>将来通过路由规则匹配到的组件, 将会被渲染到 router-view 所在的位置</p>\n<p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n</blockquote>\n<p><strong>定义路由组件</strong></p>\n<pre><code>const User = {\n    template: &#39;&lt;div&gt;User&lt;/div&gt;&#39;\n}</code></pre><p><strong>配置路由规则并创建路由实例</strong></p>\n<pre><code>// 创建路由实例对象\nvar router = new VueRouter({\n    // routers 是路由规则数组\n    routes: [\n    // 每个路由规则都是一个配置对象. 至少包含 path 和 component 两个属性:\n    // path 表示当前路由规则匹配的 hash 地址\n    // component 表示当前路由规则对应要展示的组件\n    {path: &#39;/user&#39;, component: User}\n    ]\n})</code></pre><p><strong>把路由挂载到Vue 根实例中</strong> </p>\n<pre><code>new Vue ({\n    el: &#39;#app&#39;,\n    // 为了能够让路由规则生效, 必须把路由对象挂载到 vue 实例对象上\n    router: router //把创建的实例对象赋值给 Vue 实例的属性router , 也可以直接简写成一个 router\n})</code></pre></blockquote>\n<h5 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h5><blockquote>\n<p>访问 地址 A 的时候 , 强制跳转到 B   – redirect</p>\n<pre><code>var router = new VueRouter({\n    routes:[\n        {path: &#39;/&#39;, redirect: &#39;/user&#39;},\n        {path: &#39;/&#39;, component: User}\n    ]\n})</code></pre></blockquote>\n<h5 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h5><blockquote>\n<p>父级路由连接显示的模板内容中又有子级路由连接, 点击子路由连接显示子级模板内容</p>\n<blockquote>\n<p>先在父路由组件中添加子路由连接和容器</p>\n<p>然后定义子路由组件</p>\n<p>最后将子路由组件添加到父路由规则的 children 属性中</p>\n</blockquote>\n<pre><code>\nconst User = {\n    template: `&lt;div&gt;\n        &lt;h1&gt;User 组件&lt;/h1&gt;\n        &lt;hr/&gt;\n        &lt;!-- 子路由连接 --&gt;\n        &lt;router-link to = &quot;/user/tab1&quot;&gt;tab1&lt;/router-link&gt;\n        &lt;router-link to = &quot;/user/tab2&quot;&gt;tab2&lt;/router-link&gt;\n        &lt;!-- 子路由占位符 --&gt;\n        &lt;router-view/&gt;\n    &lt;/div&gt;`\n}</code></pre><pre><code>const Tab1= {\n    template: &#39;&lt;h3&gt;Tab1子组件&lt;/h3&gt;&#39;\n}\nconst Tab2= {\n    template: &#39;&lt;h3&gt;Tab2子组件&lt;/h3&gt;&#39;\n}</code></pre><pre><code>const router = new VueRouter({\n    routes:[\n        {path: &#39;/&#39;, redirect: &#39;/user&#39;},\n        // children 数组表示子路由规则\n        {path: &#39;/&#39;, component: User, children:[\n        {path:&#39;user/tab1&#39;,component: Tab1},\n        {path:&#39;user/tab2&#39;, component: Tab2}\n        ]}\n    ]\n})</code></pre></blockquote>\n<h5 id=\"动态路由匹配\"><a href=\"#动态路由匹配\" class=\"headerlink\" title=\"动态路由匹配\"></a>动态路由匹配</h5><blockquote>\n<p>如果路由连接一部分相同一部分是变化的, 我们可以把变化的部分设置成路由参数, </p>\n<p>多个路由共用一个规则,  减少路由规则定义的数量</p>\n<p>设置路由规则:</p>\n<pre><code>var router = new VueRouter({\n    routes: [\n        //动态路径参数, 以冒号开头\n        {path: &#39;/user/:id&#39;, component: User}\n    ]\n})</code></pre><p>获取路由参数</p>\n<pre><code>const User = {\n    // 路由组件中通过$route.params 获取路由参数\n    template : &#39;&lt;div&gt;User {{ $route.params.id }} &lt;/div&gt;&#39;\n}</code></pre><p>使用 props </p>\n<pre><code>const router = new VueRouter({\n    routes: [\n        // 如果props 被设置为 true, route.params 将会被设置为组件属性\n        { path: &#39;/user/:id, component: User, props: true}\n        //props 也可以传递动态参数 props: { uname: &#39;list&#39;, age: 20}\n    ]\n})\n\nconst User= {\n    props: [&#39;id&#39;], // 使用props 接收路由参数\n    // props: [&#39;name&#39;,&#39;age&#39;]\n    templata: &#39;&lt;div&gt;用户ID:{{id}}&lt;/div&gt;&#39; //使用路由参数\n}</code></pre></blockquote>\n<p>props 的值为函数类型</p>\n<blockquote>\n<pre><code>const router = newVueRouter({\n    toutes: [\n        //如果 props 是一个函数, 则这个函数接收route 对象为自己的形参\n        {\n        path: &#39;/user/:id&#39;,\n        component: User,\n        props: route =&gt; ({ uname:&#39;zs, age: 20, id: route.params.id})\n        }\n    ]\n})\n\nconst User = { \n    props: [&#39;uname&#39;,&#39;age&#39;,&#39;id&#39;],\n    template: `&lt;div&gt;用户信息:{{uname + age + id}}&lt;/div&gt;\n}</code></pre></blockquote>\n<h5 id=\"命名路由导航\"><a href=\"#命名路由导航\" class=\"headerlink\" title=\"命名路由导航\"></a>命名路由导航</h5><blockquote>\n<pre><code>&lt;router-link :to: &quot;{ name: &#39;user&#39;, params: { id: 3} }&quot;&gt;User3&lt;/router-link&gt;</code></pre><pre><code>给路由规则添加一个 name: &#39;user&#39; 属性</code></pre></blockquote>\n<h5 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h5><blockquote>\n<p>通过点击链接试下导航的方式, 叫做声明式导航</p>\n<p>例如 : a 连接 或者 vue 中的<router-link></router-link> </p>\n<p>通过调用 JavaScript 形式的API 实现导航的方式, 叫做编程式导航</p>\n<p>例如 : 普通网页中的 location.href</p>\n<blockquote>\n<p>this.$router.push(‘hash地址’) // 跳转到对应的地址</p>\n<p>this.$router.go(1)  // 前进或者后退 , 正数表示前进, 负数表示后退</p>\n</blockquote>\n<pre><code>//字符串(路径名称)\nrouter.push(&#39;/home&#39;)\n//对象\nrouter.push({ path: &#39;/home&#39;})\n//命名路由(传递参数)\nrouter.push({ name: &#39;/user&#39;, params: {userid: 123}})\n//带查询参数, 变成 /user?uname=zhanglei\nrouter.push({ path: &#39;/user&#39;, query: { uname: &#39;zhanglei&#39;}})</code></pre></blockquote>\n"},{"title":"Vuex","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-06T17:01:56.000Z","password":null,"summary":null,"_content":"\n# Vuex\n\n## 安装\n\n`npm install vues --save`\n\n## 导入\n\n`import Vuex from 'vuex'`\n\n`Vue.use(Vuex)`\n\n## 创建store对象\n\n```js\nconst store = new Vuex.store({\n\t// state 中存放的就是全局共享的数0据\n    state: {\n    \tcount: 0\n    }\n}\n```\n\n## 将store对象挂载到 vue 实例中\n\n```js\nnew Veu({\n\tel: '#app',\n    render: h => h(app),\n    router,\n    //将创建的共享数据对象, 挂载到 Vue 实例中\n    //所有的组件, 就可以直接从 store 中获取全局的数据了\n    store\n})\n```\n\n## 创建项目\n\n> 命令行输入 `vue ui`\n>\n> 选择路径\n>\n> 点击创建 \n>\n> project folder 输入项目名称\n>\n> package manageer 选择包管理工具 `npm`\n>\n> git repository 输入首次提交git的信息\n>\n> 点击下一步\n>\n> 选择手动选择依赖包 `Manual`\n>\n> 点击下一步\n>\n> 选择 `babel -- router -- linter/formatter --use config files`\n>\n> 点击下一步\n>\n> 选择lint on save , 右侧下拉选择standard config\n>\n> 点击 create\n>\n> 是否存为预设\n\n## 组件中访问 State 中数据的方式\n\n第一种方式\n\n> `this.$store.state.数据名称`\n\n第二种方式\n\n> ```js\n> // 1. 从 vuex 中按需导入 mapState 函数\n> import { mapState } from 'vuex'\n> ```\n>\n> 通过导入的 mapState 函数, 将当前组件需要的全局数据, 映射为当前组件的computed 计算属性\n>\n> ```js\n> // 2. 将全局数据, 映射为当前组件的计算属性\n> computed: {\n> \t...mapState(['count'])\n> }\n> ```\n>\n> \n\n## 组件中变更 store 中的数据\n\n> 只能通过mutation 变更 store 数据 , 不可以直接操作 store 中的数据\n>\n> 通过这种方式虽然操作起来稍微繁琐一些, 但是可以集中监控所有的数据变化\n>\n> ```\n> // 定义 Mutation\n> const store = new Veux.Store({\n> \tstate: {\n> \t\tcount: 0\n> \t},\n> \tmutations: {\n> \t\tadd(state) {\n> \t\t\t// 变更状态\n> \t\t\tstate.count++\n> \t\t}\n> \t}\n> })\n> ```\n>\n> ```js\n> // 触发 mutation\n> methods: {\n> \thandle () {\n>     \t// 触发 mutations 的第一种方式\n>         this.$store.commit('add')\n>     }\n> }\n> ```\n> \n> \n\n\n\n## 调用 mutation 时传递参数\n\n> ```js\n> // 定义 mutation\n> const store = new Vuex.Store({\n> state: {\n>   \tcount: 0\n>   },\n>   mutations: {\n>   \taddN(state, step) {\n>       \t// 变更状态\n>           state.count += step\n>       }\n>   }\n> })\n> ```\n> ```js\n> \n> // 触发 mutation\n> methods: {\n> handle2() {\n>   \t// 调用 commit 函数,\n>       // 触发 mutations 时携带参数\n>       this.$store.commit('addN',3)  // commit 的作用就是调用某个 mutation 函数\n>   }\n> }\n> ```\n\n\n\n## 调用 mutations 的第二种方式-- mapMutations\n\n> ```js\n> // 从 vuex 中按需导入 mapMutations 函数\n> import { mapMutations } from 'vuex'\n> ```\n>\n> \n>\n> ```js\n> // 将指定的 mutations 函数, 映射为当前组件的 methods 函数\n> methods: {\n> \t...mapMutations(['add', 'addN'])\n> }\n> ```\n>\n> \n\n## Action\n\n> mutation 不支持异步操作 ,  必须通过 action 用于处理异步任务, 但是在 action 中还是要通过触发 mutation 的方式间接变更数据, 没有直接修改 state 数据的权限\n>\n> ```js\n> // 定义 action\n> const store = new Vuex.Store({\n> \t// ...省略一下其他代码\n>     mutations: {\n>     \tadd(state) {\n>         \tstate.count++\n>         }\n>     },\n>     actions: {\n>     \taddAsunc(context) {\n>         \tsetTimeout (() => {\n>             \tcontext.commit('add')\n>             },1000)\n>         }\n>     }\n> })\n> ```\n>\n> \n>\n> ```js\n> // 触发 action\n> methods: {\n> \thandle() {\n>     \t// 触发 actions 的第一种方式\n>         this.$store.dispatch('addAsync') // 这里的dispatch 函数, 专门用来触发 action\n>     }\n> }\n> ```\n>\n> \n\n## 触发 Action 异步任务时携带参数\n\n> ```js\n> // 定义 action\n> const store = new Vuex.Store({\n> \t// ...省略一下其他代码\n>     metations: {\n>     \taddN(state, step) {\n>         \tstate.count += step\n>         }\n>     },\n>     actions: {\n>     \taddNAsync(context, step) {\n>         \tsetTimeout(() => {\n>             \tcontext,commit('addN', step)\n>             },1000)\n>         }\n>     }\n> })\n> ```\n>\n> \n>\n> ```js\n> // 触发 action\n> methods: {\n> \thandle () {\n>     \t// 调用 dispatch 函数,\n>         // 触发 actions 时携带参数\n>         this.$store.dispatch('addNAsync', 5)\n>     }\n> }\n> ```\n>\n> \n\n## 触发 Action 异步任务的另外一种方式\n\n> ```js\n> // 1. 从 vuex 中按需导入 mapActions 函数\n> import { mapActions } from 'vuex'\n> ```\n>\n> \n>\n> ```js\n> // 2. 将指定的 actions 函数, 因设为当前组件的 methods 函数\n> method: {\n> \t...mapActions(['addAsync', 'addNAsync']) // 映射后就相当于组件自己的方法, 可以直接使用\n> }\n> ```\n>\n> \n\n## Getter\n\n> getter 用于对 store 中的数据进行加工处理形成新的数据\n>\n> > getter 可以对 store 中已有的数据加工处理之后形成新的数据, 类似于 Vue 的计算属性\n> >\n> > store 中数据发生变化, getter的数据也会跟着变化\n>\n> ```js\n> // 定义 getter\n> const store = new Vuex.Store({\n> \tstate: {\n>     \tcount: 0 \n>     },\n>     getters: {\n>     \tshowNum: state => {\n>         \treturn '当前最新的数量是[' + state.count +']'\n>         }\n>     }\n> })\n> ```\n>\n> ```js\n> // 使用方式第一种\n> this.$store.getters.showNum\n> ```\n>\n> ```js\n> // 使用方式第二种\n> import { mapGetters } from 'vuex'\n> \n> computed: {\n> \t...mapGetters(['showNum'])\n> }\n> ```\n>\n> ","source":"_posts/Vuex.md","raw":"---\ntitle: Vuex\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-7 01:01:56\npassword:\nsummary: \ntags:\n- Vue\ncategories:\n- 前端\n---\n\n# Vuex\n\n## 安装\n\n`npm install vues --save`\n\n## 导入\n\n`import Vuex from 'vuex'`\n\n`Vue.use(Vuex)`\n\n## 创建store对象\n\n```js\nconst store = new Vuex.store({\n\t// state 中存放的就是全局共享的数0据\n    state: {\n    \tcount: 0\n    }\n}\n```\n\n## 将store对象挂载到 vue 实例中\n\n```js\nnew Veu({\n\tel: '#app',\n    render: h => h(app),\n    router,\n    //将创建的共享数据对象, 挂载到 Vue 实例中\n    //所有的组件, 就可以直接从 store 中获取全局的数据了\n    store\n})\n```\n\n## 创建项目\n\n> 命令行输入 `vue ui`\n>\n> 选择路径\n>\n> 点击创建 \n>\n> project folder 输入项目名称\n>\n> package manageer 选择包管理工具 `npm`\n>\n> git repository 输入首次提交git的信息\n>\n> 点击下一步\n>\n> 选择手动选择依赖包 `Manual`\n>\n> 点击下一步\n>\n> 选择 `babel -- router -- linter/formatter --use config files`\n>\n> 点击下一步\n>\n> 选择lint on save , 右侧下拉选择standard config\n>\n> 点击 create\n>\n> 是否存为预设\n\n## 组件中访问 State 中数据的方式\n\n第一种方式\n\n> `this.$store.state.数据名称`\n\n第二种方式\n\n> ```js\n> // 1. 从 vuex 中按需导入 mapState 函数\n> import { mapState } from 'vuex'\n> ```\n>\n> 通过导入的 mapState 函数, 将当前组件需要的全局数据, 映射为当前组件的computed 计算属性\n>\n> ```js\n> // 2. 将全局数据, 映射为当前组件的计算属性\n> computed: {\n> \t...mapState(['count'])\n> }\n> ```\n>\n> \n\n## 组件中变更 store 中的数据\n\n> 只能通过mutation 变更 store 数据 , 不可以直接操作 store 中的数据\n>\n> 通过这种方式虽然操作起来稍微繁琐一些, 但是可以集中监控所有的数据变化\n>\n> ```\n> // 定义 Mutation\n> const store = new Veux.Store({\n> \tstate: {\n> \t\tcount: 0\n> \t},\n> \tmutations: {\n> \t\tadd(state) {\n> \t\t\t// 变更状态\n> \t\t\tstate.count++\n> \t\t}\n> \t}\n> })\n> ```\n>\n> ```js\n> // 触发 mutation\n> methods: {\n> \thandle () {\n>     \t// 触发 mutations 的第一种方式\n>         this.$store.commit('add')\n>     }\n> }\n> ```\n> \n> \n\n\n\n## 调用 mutation 时传递参数\n\n> ```js\n> // 定义 mutation\n> const store = new Vuex.Store({\n> state: {\n>   \tcount: 0\n>   },\n>   mutations: {\n>   \taddN(state, step) {\n>       \t// 变更状态\n>           state.count += step\n>       }\n>   }\n> })\n> ```\n> ```js\n> \n> // 触发 mutation\n> methods: {\n> handle2() {\n>   \t// 调用 commit 函数,\n>       // 触发 mutations 时携带参数\n>       this.$store.commit('addN',3)  // commit 的作用就是调用某个 mutation 函数\n>   }\n> }\n> ```\n\n\n\n## 调用 mutations 的第二种方式-- mapMutations\n\n> ```js\n> // 从 vuex 中按需导入 mapMutations 函数\n> import { mapMutations } from 'vuex'\n> ```\n>\n> \n>\n> ```js\n> // 将指定的 mutations 函数, 映射为当前组件的 methods 函数\n> methods: {\n> \t...mapMutations(['add', 'addN'])\n> }\n> ```\n>\n> \n\n## Action\n\n> mutation 不支持异步操作 ,  必须通过 action 用于处理异步任务, 但是在 action 中还是要通过触发 mutation 的方式间接变更数据, 没有直接修改 state 数据的权限\n>\n> ```js\n> // 定义 action\n> const store = new Vuex.Store({\n> \t// ...省略一下其他代码\n>     mutations: {\n>     \tadd(state) {\n>         \tstate.count++\n>         }\n>     },\n>     actions: {\n>     \taddAsunc(context) {\n>         \tsetTimeout (() => {\n>             \tcontext.commit('add')\n>             },1000)\n>         }\n>     }\n> })\n> ```\n>\n> \n>\n> ```js\n> // 触发 action\n> methods: {\n> \thandle() {\n>     \t// 触发 actions 的第一种方式\n>         this.$store.dispatch('addAsync') // 这里的dispatch 函数, 专门用来触发 action\n>     }\n> }\n> ```\n>\n> \n\n## 触发 Action 异步任务时携带参数\n\n> ```js\n> // 定义 action\n> const store = new Vuex.Store({\n> \t// ...省略一下其他代码\n>     metations: {\n>     \taddN(state, step) {\n>         \tstate.count += step\n>         }\n>     },\n>     actions: {\n>     \taddNAsync(context, step) {\n>         \tsetTimeout(() => {\n>             \tcontext,commit('addN', step)\n>             },1000)\n>         }\n>     }\n> })\n> ```\n>\n> \n>\n> ```js\n> // 触发 action\n> methods: {\n> \thandle () {\n>     \t// 调用 dispatch 函数,\n>         // 触发 actions 时携带参数\n>         this.$store.dispatch('addNAsync', 5)\n>     }\n> }\n> ```\n>\n> \n\n## 触发 Action 异步任务的另外一种方式\n\n> ```js\n> // 1. 从 vuex 中按需导入 mapActions 函数\n> import { mapActions } from 'vuex'\n> ```\n>\n> \n>\n> ```js\n> // 2. 将指定的 actions 函数, 因设为当前组件的 methods 函数\n> method: {\n> \t...mapActions(['addAsync', 'addNAsync']) // 映射后就相当于组件自己的方法, 可以直接使用\n> }\n> ```\n>\n> \n\n## Getter\n\n> getter 用于对 store 中的数据进行加工处理形成新的数据\n>\n> > getter 可以对 store 中已有的数据加工处理之后形成新的数据, 类似于 Vue 的计算属性\n> >\n> > store 中数据发生变化, getter的数据也会跟着变化\n>\n> ```js\n> // 定义 getter\n> const store = new Vuex.Store({\n> \tstate: {\n>     \tcount: 0 \n>     },\n>     getters: {\n>     \tshowNum: state => {\n>         \treturn '当前最新的数量是[' + state.count +']'\n>         }\n>     }\n> })\n> ```\n>\n> ```js\n> // 使用方式第一种\n> this.$store.getters.showNum\n> ```\n>\n> ```js\n> // 使用方式第二种\n> import { mapGetters } from 'vuex'\n> \n> computed: {\n> \t...mapGetters(['showNum'])\n> }\n> ```\n>\n> ","slug":"Vuex","published":1,"updated":"2020-04-09T17:54:54.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkeh000swcq4b571i091","content":"<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>npm install vues --save</code></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p><code>import Vuex from &#39;vuex&#39;</code></p>\n<p><code>Vue.use(Vuex)</code></p>\n<h2 id=\"创建store对象\"><a href=\"#创建store对象\" class=\"headerlink\" title=\"创建store对象\"></a>创建store对象</h2><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// state 中存放的就是全局共享的数0据</span>\n    state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"将store对象挂载到-vue-实例中\"><a href=\"#将store对象挂载到-vue-实例中\" class=\"headerlink\" title=\"将store对象挂载到 vue 实例中\"></a>将store对象挂载到 vue 实例中</h2><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    render<span class=\"token punctuation\">:</span> h <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    router<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">//将创建的共享数据对象, 挂载到 Vue 实例中</span>\n    <span class=\"token comment\" spellcheck=\"true\">//所有的组件, 就可以直接从 store 中获取全局的数据了</span>\n    store\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><blockquote>\n<p>命令行输入 <code>vue ui</code></p>\n<p>选择路径</p>\n<p>点击创建 </p>\n<p>project folder 输入项目名称</p>\n<p>package manageer 选择包管理工具 <code>npm</code></p>\n<p>git repository 输入首次提交git的信息</p>\n<p>点击下一步</p>\n<p>选择手动选择依赖包 <code>Manual</code></p>\n<p>点击下一步</p>\n<p>选择 <code>babel -- router -- linter/formatter --use config files</code></p>\n<p>点击下一步</p>\n<p>选择lint on save , 右侧下拉选择standard config</p>\n<p>点击 create</p>\n<p>是否存为预设</p>\n</blockquote>\n<h2 id=\"组件中访问-State-中数据的方式\"><a href=\"#组件中访问-State-中数据的方式\" class=\"headerlink\" title=\"组件中访问 State 中数据的方式\"></a>组件中访问 State 中数据的方式</h2><p>第一种方式</p>\n<blockquote>\n<p><code>this.$store.state.数据名称</code></p>\n</blockquote>\n<p>第二种方式</p>\n<blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 1. 从 vuex 中按需导入 mapState 函数</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>通过导入的 mapState 函数, 将当前组件需要的全局数据, 映射为当前组件的computed 计算属性</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 2. 将全局数据, 映射为当前组件的计算属性</span>\ncomputed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"组件中变更-store-中的数据\"><a href=\"#组件中变更-store-中的数据\" class=\"headerlink\" title=\"组件中变更 store 中的数据\"></a>组件中变更 store 中的数据</h2><blockquote>\n<p>只能通过mutation 变更 store 数据 , 不可以直接操作 store 中的数据</p>\n<p>通过这种方式虽然操作起来稍微繁琐一些, 但是可以集中监控所有的数据变化</p>\n<pre><code>// 定义 Mutation\nconst store = new Veux.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        add(state) {\n            // 变更状态\n            state.count++\n        }\n    }\n})</code></pre><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 触发 mutation</span>\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    handle <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 触发 mutations 的第一种方式</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"调用-mutation-时传递参数\"><a href=\"#调用-mutation-时传递参数\" class=\"headerlink\" title=\"调用 mutation 时传递参数\"></a>调用 mutation 时传递参数</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 定义 mutation</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nstate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">addN</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 变更状态</span>\n          state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span><span class=\"token operator\">=</span> step\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">\n<span class=\"token comment\" spellcheck=\"true\">// 触发 mutation</span>\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">handle2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 调用 commit 函数,</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 触发 mutations 时携带参数</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addN'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// commit 的作用就是调用某个 mutation 函数</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"调用-mutations-的第二种方式–-mapMutations\"><a href=\"#调用-mutations-的第二种方式–-mapMutations\" class=\"headerlink\" title=\"调用 mutations 的第二种方式– mapMutations\"></a>调用 mutations 的第二种方式– mapMutations</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 从 vuex 中按需导入 mapMutations 函数</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 将指定的 mutations 函数, 映射为当前组件的 methods 函数</span>\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'addN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><blockquote>\n<p>mutation 不支持异步操作 ,  必须通过 action 用于处理异步任务, 但是在 action 中还是要通过触发 mutation 的方式间接变更数据, 没有直接修改 state 数据的权限</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 定义 action</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...省略一下其他代码</span>\n    mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addAsunc</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            setTimeout <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 触发 action</span>\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 触发 actions 的第一种方式</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addAsync'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 这里的dispatch 函数, 专门用来触发 action</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"触发-Action-异步任务时携带参数\"><a href=\"#触发-Action-异步任务时携带参数\" class=\"headerlink\" title=\"触发 Action 异步任务时携带参数\"></a>触发 Action 异步任务时携带参数</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 定义 action</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...省略一下其他代码</span>\n    metations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addN</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span><span class=\"token operator\">=</span> step\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addNAsync</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                context<span class=\"token punctuation\">,</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addN'</span><span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 触发 action</span>\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    handle <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 调用 dispatch 函数,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 触发 actions 时携带参数</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addNAsync'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"触发-Action-异步任务的另外一种方式\"><a href=\"#触发-Action-异步任务的另外一种方式\" class=\"headerlink\" title=\"触发 Action 异步任务的另外一种方式\"></a>触发 Action 异步任务的另外一种方式</h2><blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 1. 从 vuex 中按需导入 mapActions 函数</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapActions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 2. 将指定的 actions 函数, 因设为当前组件的 methods 函数</span>\nmethod<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'addAsync'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'addNAsync'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 映射后就相当于组件自己的方法, 可以直接使用</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h2><blockquote>\n<p>getter 用于对 store 中的数据进行加工处理形成新的数据</p>\n<blockquote>\n<p>getter 可以对 store 中已有的数据加工处理之后形成新的数据, 类似于 Vue 的计算属性</p>\n<p>store 中数据发生变化, getter的数据也会跟着变化</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 定义 getter</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        showNum<span class=\"token punctuation\">:</span> state <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'当前最新的数量是['</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span><span class=\"token string\">']'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 使用方式第一种</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">.</span>showNum<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 使用方式第二种</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapGetters <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\ncomputed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'showNum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>npm install vues --save</code></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p><code>import Vuex from &#39;vuex&#39;</code></p>\n<p><code>Vue.use(Vuex)</code></p>\n<h2 id=\"创建store对象\"><a href=\"#创建store对象\" class=\"headerlink\" title=\"创建store对象\"></a>创建store对象</h2><pre><code class=\"js\">const store = new Vuex.store({\n    // state 中存放的就是全局共享的数0据\n    state: {\n        count: 0\n    }\n}</code></pre>\n<h2 id=\"将store对象挂载到-vue-实例中\"><a href=\"#将store对象挂载到-vue-实例中\" class=\"headerlink\" title=\"将store对象挂载到 vue 实例中\"></a>将store对象挂载到 vue 实例中</h2><pre><code class=\"js\">new Veu({\n    el: &#39;#app&#39;,\n    render: h =&gt; h(app),\n    router,\n    //将创建的共享数据对象, 挂载到 Vue 实例中\n    //所有的组件, 就可以直接从 store 中获取全局的数据了\n    store\n})</code></pre>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><blockquote>\n<p>命令行输入 <code>vue ui</code></p>\n<p>选择路径</p>\n<p>点击创建 </p>\n<p>project folder 输入项目名称</p>\n<p>package manageer 选择包管理工具 <code>npm</code></p>\n<p>git repository 输入首次提交git的信息</p>\n<p>点击下一步</p>\n<p>选择手动选择依赖包 <code>Manual</code></p>\n<p>点击下一步</p>\n<p>选择 <code>babel -- router -- linter/formatter --use config files</code></p>\n<p>点击下一步</p>\n<p>选择lint on save , 右侧下拉选择standard config</p>\n<p>点击 create</p>\n<p>是否存为预设</p>\n</blockquote>\n<h2 id=\"组件中访问-State-中数据的方式\"><a href=\"#组件中访问-State-中数据的方式\" class=\"headerlink\" title=\"组件中访问 State 中数据的方式\"></a>组件中访问 State 中数据的方式</h2><p>第一种方式</p>\n<blockquote>\n<p><code>this.$store.state.数据名称</code></p>\n</blockquote>\n<p>第二种方式</p>\n<blockquote>\n<pre><code class=\"js\">// 1. 从 vuex 中按需导入 mapState 函数\nimport { mapState } from &#39;vuex&#39;</code></pre>\n<p>通过导入的 mapState 函数, 将当前组件需要的全局数据, 映射为当前组件的computed 计算属性</p>\n<pre><code class=\"js\">// 2. 将全局数据, 映射为当前组件的计算属性\ncomputed: {\n    ...mapState([&#39;count&#39;])\n}</code></pre>\n</blockquote>\n<h2 id=\"组件中变更-store-中的数据\"><a href=\"#组件中变更-store-中的数据\" class=\"headerlink\" title=\"组件中变更 store 中的数据\"></a>组件中变更 store 中的数据</h2><blockquote>\n<p>只能通过mutation 变更 store 数据 , 不可以直接操作 store 中的数据</p>\n<p>通过这种方式虽然操作起来稍微繁琐一些, 但是可以集中监控所有的数据变化</p>\n<pre><code>// 定义 Mutation\nconst store = new Veux.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        add(state) {\n            // 变更状态\n            state.count++\n        }\n    }\n})</code></pre><pre><code class=\"js\">// 触发 mutation\nmethods: {\n    handle () {\n        // 触发 mutations 的第一种方式\n        this.$store.commit(&#39;add&#39;)\n    }\n}</code></pre>\n</blockquote>\n<h2 id=\"调用-mutation-时传递参数\"><a href=\"#调用-mutation-时传递参数\" class=\"headerlink\" title=\"调用 mutation 时传递参数\"></a>调用 mutation 时传递参数</h2><blockquote>\n<pre><code class=\"js\">// 定义 mutation\nconst store = new Vuex.Store({\nstate: {\n      count: 0\n  },\n  mutations: {\n      addN(state, step) {\n          // 变更状态\n          state.count += step\n      }\n  }\n})</code></pre>\n<pre><code class=\"js\">\n// 触发 mutation\nmethods: {\nhandle2() {\n      // 调用 commit 函数,\n      // 触发 mutations 时携带参数\n      this.$store.commit(&#39;addN&#39;,3)  // commit 的作用就是调用某个 mutation 函数\n  }\n}</code></pre>\n</blockquote>\n<h2 id=\"调用-mutations-的第二种方式–-mapMutations\"><a href=\"#调用-mutations-的第二种方式–-mapMutations\" class=\"headerlink\" title=\"调用 mutations 的第二种方式– mapMutations\"></a>调用 mutations 的第二种方式– mapMutations</h2><blockquote>\n<pre><code class=\"js\">// 从 vuex 中按需导入 mapMutations 函数\nimport { mapMutations } from &#39;vuex&#39;</code></pre>\n<pre><code class=\"js\">// 将指定的 mutations 函数, 映射为当前组件的 methods 函数\nmethods: {\n    ...mapMutations([&#39;add&#39;, &#39;addN&#39;])\n}</code></pre>\n</blockquote>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><blockquote>\n<p>mutation 不支持异步操作 ,  必须通过 action 用于处理异步任务, 但是在 action 中还是要通过触发 mutation 的方式间接变更数据, 没有直接修改 state 数据的权限</p>\n<pre><code class=\"js\">// 定义 action\nconst store = new Vuex.Store({\n    // ...省略一下其他代码\n    mutations: {\n        add(state) {\n            state.count++\n        }\n    },\n    actions: {\n        addAsunc(context) {\n            setTimeout (() =&gt; {\n                context.commit(&#39;add&#39;)\n            },1000)\n        }\n    }\n})</code></pre>\n<pre><code class=\"js\">// 触发 action\nmethods: {\n    handle() {\n        // 触发 actions 的第一种方式\n        this.$store.dispatch(&#39;addAsync&#39;) // 这里的dispatch 函数, 专门用来触发 action\n    }\n}</code></pre>\n</blockquote>\n<h2 id=\"触发-Action-异步任务时携带参数\"><a href=\"#触发-Action-异步任务时携带参数\" class=\"headerlink\" title=\"触发 Action 异步任务时携带参数\"></a>触发 Action 异步任务时携带参数</h2><blockquote>\n<pre><code class=\"js\">// 定义 action\nconst store = new Vuex.Store({\n    // ...省略一下其他代码\n    metations: {\n        addN(state, step) {\n            state.count += step\n        }\n    },\n    actions: {\n        addNAsync(context, step) {\n            setTimeout(() =&gt; {\n                context,commit(&#39;addN&#39;, step)\n            },1000)\n        }\n    }\n})</code></pre>\n<pre><code class=\"js\">// 触发 action\nmethods: {\n    handle () {\n        // 调用 dispatch 函数,\n        // 触发 actions 时携带参数\n        this.$store.dispatch(&#39;addNAsync&#39;, 5)\n    }\n}</code></pre>\n</blockquote>\n<h2 id=\"触发-Action-异步任务的另外一种方式\"><a href=\"#触发-Action-异步任务的另外一种方式\" class=\"headerlink\" title=\"触发 Action 异步任务的另外一种方式\"></a>触发 Action 异步任务的另外一种方式</h2><blockquote>\n<pre><code class=\"js\">// 1. 从 vuex 中按需导入 mapActions 函数\nimport { mapActions } from &#39;vuex&#39;</code></pre>\n<pre><code class=\"js\">// 2. 将指定的 actions 函数, 因设为当前组件的 methods 函数\nmethod: {\n    ...mapActions([&#39;addAsync&#39;, &#39;addNAsync&#39;]) // 映射后就相当于组件自己的方法, 可以直接使用\n}</code></pre>\n</blockquote>\n<h2 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h2><blockquote>\n<p>getter 用于对 store 中的数据进行加工处理形成新的数据</p>\n<blockquote>\n<p>getter 可以对 store 中已有的数据加工处理之后形成新的数据, 类似于 Vue 的计算属性</p>\n<p>store 中数据发生变化, getter的数据也会跟着变化</p>\n</blockquote>\n<pre><code class=\"js\">// 定义 getter\nconst store = new Vuex.Store({\n    state: {\n        count: 0 \n    },\n    getters: {\n        showNum: state =&gt; {\n            return &#39;当前最新的数量是[&#39; + state.count +&#39;]&#39;\n        }\n    }\n})</code></pre>\n<pre><code class=\"js\">// 使用方式第一种\nthis.$store.getters.showNum</code></pre>\n<pre><code class=\"js\">// 使用方式第二种\nimport { mapGetters } from &#39;vuex&#39;\n\ncomputed: {\n    ...mapGetters([&#39;showNum&#39;])\n}</code></pre>\n</blockquote>\n"},{"title":"Vue文档风格的Typora主题","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-21T09:20:20.000Z","password":null,"summary":"Typora编辑器中一款Vue文档风格的主题","_content":"\n> [typora-vue-theme](https://github.com/ThirtyZhang/ypora-vue-theme)是 Typora Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n\n## 简介\n\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题**。\n\n## 安装主题\n\n1. 下载本主题**[typora-vue-theme](https://github.com/ThirtyZhang/ypora-vue-theme)**中的`vue.css`、`vue-dark.css`文件和包含字体的`vue`文件夹；\n2. 打开 Typora，点击“**偏好设置**” => “**打开主题文件夹**”按钮，将弹出 Typora 的主题文件夹；\n3. 将下载好的`vue.css`和`vue-dark.css`文件和包含字体的`vue`文件夹放到 Typora 的主题文件夹中；\n4. 关闭并重新打开 Typora，从菜单栏中选择 “**主题**” => “**Vue**” 或者 “**Vue Dark**” 即可。","source":"_posts/Vue文档风格的Typora主题.md","raw":"---\ntitle: Vue文档风格的Typora主题\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-21 17:20:20\npassword:\nsummary: Typora编辑器中一款Vue文档风格的主题\ntags: \n- 工具\ncategories:\n- 效率\n---\n\n> [typora-vue-theme](https://github.com/ThirtyZhang/ypora-vue-theme)是 Typora Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n\n## 简介\n\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题**。\n\n## 安装主题\n\n1. 下载本主题**[typora-vue-theme](https://github.com/ThirtyZhang/ypora-vue-theme)**中的`vue.css`、`vue-dark.css`文件和包含字体的`vue`文件夹；\n2. 打开 Typora，点击“**偏好设置**” => “**打开主题文件夹**”按钮，将弹出 Typora 的主题文件夹；\n3. 将下载好的`vue.css`和`vue-dark.css`文件和包含字体的`vue`文件夹放到 Typora 的主题文件夹中；\n4. 关闭并重新打开 Typora，从菜单栏中选择 “**主题**” => “**Vue**” 或者 “**Vue Dark**” 即可。","slug":"Vue文档风格的Typora主题","published":1,"updated":"2020-02-29T17:03:31.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkep000xwcq41q3alxsu","content":"<blockquote>\n<p><a href=\"https://github.com/ThirtyZhang/ypora-vue-theme\" target=\"_blank\" rel=\"noopener\">typora-vue-theme</a>是 Typora Markdown 文档编辑器中一款类似<a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a>文档风格的主题。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。<strong>typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题</strong>。</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><ol>\n<li>下载本主题<strong><a href=\"https://github.com/ThirtyZhang/ypora-vue-theme\" target=\"_blank\" rel=\"noopener\">typora-vue-theme</a></strong>中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li>\n<li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li>\n<li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li>\n<li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li>\n</ol>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://github.com/ThirtyZhang/ypora-vue-theme\" target=\"_blank\" rel=\"noopener\">typora-vue-theme</a>是 Typora Markdown 文档编辑器中一款类似<a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a>文档风格的主题。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。<strong>typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题</strong>。</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><ol>\n<li>下载本主题<strong><a href=\"https://github.com/ThirtyZhang/ypora-vue-theme\" target=\"_blank\" rel=\"noopener\">typora-vue-theme</a></strong>中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li>\n<li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li>\n<li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li>\n<li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li>\n</ol>\n"},{"title":"Git快速上手","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-21T09:42:53.000Z","password":null,"summary":"Git是目前世界上最先进的分布式版本控制系统","_content":"\n\n\n# Git教程\n\n> 如果之前了解过想复习一下,直接看总结就可以了\n\n## 安装\n\n## 设置Name和Email地址\n\n安装完成后，还需要最后一步设置，在命令行输入：\n\n```powershell\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n> 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n>\n> 注意`git config`命令的`--global`参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n# 本地版本库\n\n选择一个合适的地方，创建一个空目录：\n\n```powershell\n$ mkdir learngit\n$ cd learngit\n$ pwd\n/Users/michael/learngit\n```\n\n> `pwd`命令用于显示当前目录。在我的Mac上，这个仓库位于`/Users/michael/learngit`。\n>\n>  **如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。** \n\n通过`git init`命令把这个目录变成Git可以管理的仓库：\n\n```powershell\n$ git init\nInitialized empty Git repository in /Users/michael/learngit/.git/\n```\n\n> 瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。\n>\n> 如果你没有看到`.git`目录，那是因为这个目录默认是隐藏的，用`ls -ah`命令就可以看见。\n>\n> **也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。** \n\n## 把文件添加到版本库\n\n> 首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n>\n> 不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。\n>\n> 因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。\n>\n> 使用Windows的童鞋要特别注意：\n>\n> 千万不要使用Windows自带的**记事本**编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载[Notepad++](http://notepad-plus-plus.org/)代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：\n\n先添加:\n\n```powershell\n# 单个文件\n$ git add readme.txt \n# 多个文件\n$ git add readme.txt readmeCN.txt\n# 全部添加\n$ git add .\n```\n\n## 把文件提交到本地版本库\n\n再提交:\n\n```powershell\n$ git commit -m \"wrote a readme file\"\n```\n\n> 简单解释一下`git commit`命令，`-m`后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。\n>\n> 嫌麻烦不想输入`-m \"xxx\"`行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。\n\n> 为什么Git添加文件需要`add`，`commit`一共两步呢？因为`commit`可以一次提交很多文件，所以你可以多次`add`不同的文件，比如：\n>\n> ```powershell\n> $ git add file1.txt\n> $ git add file2.txt file3.txt\n> $ git commit -m \"add 3 files.\"\n> ```\n\n## 撤销操作\n\n\n\n```powershell\n# 查看本地库文件状态\n$ git status\n# 文件当前文件改了什么,查看一下再提交就比较放心\n$ git diff readme.txt \n```\n\n> - 要随时掌握工作区的状态，使用`git status`命令。\n> - 如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n## 版本回退\n\n```powershell\n# 回退到上一版\n$ git reset --hard HEAD^\n# 回退到上上一版\n$ git reset --hard HEAD^^\n# 回退到指定版\n$ git reset --hard commit_id\n```\n\n> - `HEAD`指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。\n> - 穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n> - 要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n> - 用`HEAD`表示当前版本，也就是最新的提交`1094adb...`（注意我的提交ID和你的肯定不一样），上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。 \n\n## 工作区和暂存区\n\n> 前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n>\n> 第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；\n>\n> 第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n>\n> 因为我们创建Git版本库时，Git自动为我们创建了唯一一个`master`分支，所以，现在，`git commit`就是往`master`分支上提交更改。\n>\n> 你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n## 撤销修改\n\n```powershell\n$ git checkout -- readme.txt\n```\n\n> 命令`git checkout -- readme.txt`意思就是，把`readme.txt`文件在工作区的修改全部撤销，这里有两种情况：\n>\n> 一种是`readme.txt`自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n>\n> 一种是`readme.txt`已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n>\n> 总之，就是让这个文件回到最近一次`git commit`或`git add`时的状态。\n\n```powershell\n$ git reset HEAD readme.txt\n```\n\n> 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n>\n> 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD <file>`，就回到了场景1，第二步按场景1操作。\n>\n> 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考[版本回退](https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192)一节，不过前提是没有推送到远程库。\n\n\n\n## 删除\n\n```powershell\n$ rm file\n# 删除工作区 , 可以直接用用git checkout -- <file> 恢复\n$ git rm file\n# 不仅删除了工作区文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout -- <file>\n& git rm file\n& git commit -m \"说明注释\"\n# 彻底删除 , 先删除工作区和暂存区,再提交到master分支(仓库)\n```\n\n> \n>\n> 如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout -- <file>就可以 2.如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout -- <file> 3.如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了 \n\n# 本地仓库总结\n\n> Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)\n>\n> 工作区>>>>暂存区>>>>仓库\n>\n> git add把文件从工作区>>>>暂存区，git commit把文件从暂存区>>>>仓库，\n>\n> git diff查看工作区和暂存区差异，\n>\n> git diff --cached查看暂存区和仓库差异，\n>\n> git diff HEAD 查看工作区和仓库的差异，\n>\n> git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，\n>\n> git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。\n\n> **新建git本地仓库：**\n>\n> `git init` \n>\n> 新建一个.git文件，有这个文件就是一个git仓库\n>\n> **git本地仓库分三个区来区别操作（这个思路太重要了）：** \n>\n> **工作区：** 就是一个多了.git文件的文件夹，不要想太多，就按Linux操作文件夹的方法正常操作 \n>\n> **暂存区：** 暂时讲了两种操作暂存区的方法：\n>\n>  1.存入暂存区:\n>\n> `git add filename`  //添加文件\n>\n> `git rm filename`   //删除文件\n>\n>  这两条都是修改暂存区 \n>\n> 2.递交暂存区\n>\n>  `git commit -m \"log说明一般写改动是什么\"` \n>\n> 别忘了正常来说一般对暂存区修改以后一定要commit一下\n> **版本库：**`git commit`以后的最终版本存入地方，git最重要的一个地方，因为只有版本库的修改才可以跟踪\n>\n> 另外有几个命令查看状态也很重要： \n>\n> `git status`\n>\n> 查看当前git仓库与上一次commit之后的版本库的一切修改，包括工作区的修改和暂存区的修改（这种信息是不详细的） 很人性化的是，`git status`会提示你下一步可能会做的事，比如你对工作区做了修改，他可能会提示下一步要git add或者\n>\n> `git checkout  filename `\n>\n> ， 你刚执行完git add以后，git status跟踪的暂存区的修改，他又会提示你下一步可能要提交git commit或者\n>\n> `git reset HEAD < filename >` \n>\n> `git diff filename`\n>\n> 这个命令返回的是你对工作区的修改，别想太多，和什么对比并不重要，你只要知道什么时候他会有信息返回，返回什么信息！什么时候有返回呢！你对工作区已经存在的文件修改<!--（但是没有存入暂存区，也就是说没有git add或者git rm，所以一定要纠结的话，他比较的的确是暂存区和工作区的区别）-->的话有返回**（新建文件git diff看不到）**，返回什么，返回修改的详细信息，+是新添的行-是删去的行\n>\n>  `git diff --cached filename`\n>\n> 这个命令是查看你对暂存区的修改，也就是你`git add`或者`git rm`以后，`git diff`的返回信息就用`git diff --cached`来用了（这也是为什么这两个命令一样，只有参数不一样的原因，因为其实干的都是一件事，只是`git diff`针对的对象是工作区，`git diff --cached`针对的对象是暂存区） \n>\n> `git log`\n>\n> **当前版本之前**的commit日志记录，也就是说当前版本是回退回来的版本的话，当前版本之后的提交与回退都看不到（有个很重要的commit ID）\n>\n> `git reflog`\n>\n> 包括版本回退、版本提交的日志，信息相较于`git log`会比较简单 \n>\n> **这样把命令的针对对象分为三个区来理解，现在看撤销操作就很容易了：**\n>\n>  1.针对工作区的撤销（必须保证没有git add/git rm之前）： \n>\n> `git checkout -- filename` \n>\n> 2.针对暂存区的撤销（必须是git add/git rm以后才行） \n>\n> `git reset HEAD filename` \n>\n> 顺便想起git reset的另一种用法，参数不一样啦，那肯定也是撤销操作，当然就是撤销提交，回退版本啦\n>\n> `git reset --hard （HEAD^^^^）/commit id`\n\n# 远程仓库\n\n> Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。 \n\n[GitHub](https://github.com/) 提供Git仓库托管服务 , 注册一个GitHub账号，就可以免费获得Git远程仓库 ,自行点击链接注册\n\n> 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 ,所以需要设置下SSH Key\n\n> 第1步：**创建SSH Key**。在用户主目录下`C:\\Users\\zl`<!--用户主目录在windows中就是 C:\\Users\\Administrator\\，或者你新建了一个用户，那就是 C:\\Users\\用户名\\--> ，看看有没有.ssh目录，如果有，再看看这个目录下有没有`id_rsa`和`id_rsa.pub`这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n```powershell\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n> 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n>\n> 如果一切顺利的话，可以在用户主目录里找到`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥，可以放心地告诉任何人。\n>\n> 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n>\n> 然后，点“**Add SSH Key”**，填上任意Title，在Key文本框里粘贴`id_rsa.pub`文件的内容：\n\n## 本地文件添加到远程仓库\n\n* 找到“Create a new repo”按钮，创建一个新的仓库： \n* 在Repository name填入名称\n* 其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 \n\n在本地的`learngit`仓库下运行命令：\n\n```powershell\n$ git remote add origin git@github.com:michaelliao/learngit.git\n```\n\n> 请千万注意，把上面的`michaelliao`替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。\n>\n> 添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。\n>\n> 下一步，就可以把本地库的所有内容推送到远程库上：\n\n```powershell\n$ git push -u origin master\n```\n\n> 把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支`master`推送到远程。\n>\n> 由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。\n>\n> 推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样 \n\n> 从现在起，只要本地作了提交，就可以通过命令：\n\n```powershell\n$ git push origin master\n```\n\n## 克隆别人的Git远程仓库到自己的仓库\n\n* 在本地新建文件夹克隆下来\n* 删除`.git`文件\n* 然后在自己的GitHub上新建一个仓库\n* 在本地仓库执行\n\n```powershell\n$ git init\n$ git remote add origin 新建的仓库地址\n$ git add .\n$ git commit -m \"提交全部\"\n$ git push -u origin master\n```\n\n## SSH警告\n\n> 当你第一次使用Git的`clone`或者`push`命令连接GitHub时，会得到一个警告：\n>\n> ```\n> The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\n> RSA key fingerprint is xx.xx.xx.xx.xx.\n> Are you sure you want to continue connecting (yes/no)?\n> ```\n>\n> 这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入`yes`回车即可。\n>\n> Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：\n>\n> ```\n> Warning: Permanently added 'github.com' (RSA) to the list of known hosts.\n> ```\n>\n> 这个警告只会出现一次，后面的操作就不会有任何警告了。\n>\n> 如果你实在担心有人冒充GitHub服务器，输入`yes`前可以对照[GitHub的RSA Key的指纹信息](https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/)是否与SSH连接给出的一致。\n\n> 要关联一个远程库，使用命令`git remote add origin git@server-name:path/repo-name.git`；\n>\n> 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n>\n> 此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n>\n> 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n\n## 从远程库克隆到本地\n\n* 第一步\n  * 新建一个仓库,勾选`Initialize this repository with a README`，这样GitHub会自动为我们创建一个`README.md`文件。创建完毕后，可以看到`README.md`文件： \n* 第二步\n  * `$ git clone 仓库的URL`\n\n> URL我们一般选取SSH 相较于 http 而言 方便不用每次都输入用户名密码,而且传输速度快\n>\n> 除非公司只支持 http 才会选用","source":"_posts/git快速上手.md","raw":"---\ntitle: Git快速上手\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-21 17:42:53\npassword:\nsummary: Git是目前世界上最先进的分布式版本控制系统\ntags:\n- 工具\ncategories:\n- 效率\n---\n\n\n\n# Git教程\n\n> 如果之前了解过想复习一下,直接看总结就可以了\n\n## 安装\n\n## 设置Name和Email地址\n\n安装完成后，还需要最后一步设置，在命令行输入：\n\n```powershell\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n> 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n>\n> 注意`git config`命令的`--global`参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n# 本地版本库\n\n选择一个合适的地方，创建一个空目录：\n\n```powershell\n$ mkdir learngit\n$ cd learngit\n$ pwd\n/Users/michael/learngit\n```\n\n> `pwd`命令用于显示当前目录。在我的Mac上，这个仓库位于`/Users/michael/learngit`。\n>\n>  **如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。** \n\n通过`git init`命令把这个目录变成Git可以管理的仓库：\n\n```powershell\n$ git init\nInitialized empty Git repository in /Users/michael/learngit/.git/\n```\n\n> 瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。\n>\n> 如果你没有看到`.git`目录，那是因为这个目录默认是隐藏的，用`ls -ah`命令就可以看见。\n>\n> **也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。** \n\n## 把文件添加到版本库\n\n> 首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n>\n> 不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。\n>\n> 因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。\n>\n> 使用Windows的童鞋要特别注意：\n>\n> 千万不要使用Windows自带的**记事本**编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载[Notepad++](http://notepad-plus-plus.org/)代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：\n\n先添加:\n\n```powershell\n# 单个文件\n$ git add readme.txt \n# 多个文件\n$ git add readme.txt readmeCN.txt\n# 全部添加\n$ git add .\n```\n\n## 把文件提交到本地版本库\n\n再提交:\n\n```powershell\n$ git commit -m \"wrote a readme file\"\n```\n\n> 简单解释一下`git commit`命令，`-m`后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。\n>\n> 嫌麻烦不想输入`-m \"xxx\"`行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。\n\n> 为什么Git添加文件需要`add`，`commit`一共两步呢？因为`commit`可以一次提交很多文件，所以你可以多次`add`不同的文件，比如：\n>\n> ```powershell\n> $ git add file1.txt\n> $ git add file2.txt file3.txt\n> $ git commit -m \"add 3 files.\"\n> ```\n\n## 撤销操作\n\n\n\n```powershell\n# 查看本地库文件状态\n$ git status\n# 文件当前文件改了什么,查看一下再提交就比较放心\n$ git diff readme.txt \n```\n\n> - 要随时掌握工作区的状态，使用`git status`命令。\n> - 如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n## 版本回退\n\n```powershell\n# 回退到上一版\n$ git reset --hard HEAD^\n# 回退到上上一版\n$ git reset --hard HEAD^^\n# 回退到指定版\n$ git reset --hard commit_id\n```\n\n> - `HEAD`指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。\n> - 穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n> - 要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n> - 用`HEAD`表示当前版本，也就是最新的提交`1094adb...`（注意我的提交ID和你的肯定不一样），上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。 \n\n## 工作区和暂存区\n\n> 前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n>\n> 第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；\n>\n> 第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n>\n> 因为我们创建Git版本库时，Git自动为我们创建了唯一一个`master`分支，所以，现在，`git commit`就是往`master`分支上提交更改。\n>\n> 你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n## 撤销修改\n\n```powershell\n$ git checkout -- readme.txt\n```\n\n> 命令`git checkout -- readme.txt`意思就是，把`readme.txt`文件在工作区的修改全部撤销，这里有两种情况：\n>\n> 一种是`readme.txt`自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n>\n> 一种是`readme.txt`已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n>\n> 总之，就是让这个文件回到最近一次`git commit`或`git add`时的状态。\n\n```powershell\n$ git reset HEAD readme.txt\n```\n\n> 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n>\n> 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD <file>`，就回到了场景1，第二步按场景1操作。\n>\n> 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考[版本回退](https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192)一节，不过前提是没有推送到远程库。\n\n\n\n## 删除\n\n```powershell\n$ rm file\n# 删除工作区 , 可以直接用用git checkout -- <file> 恢复\n$ git rm file\n# 不仅删除了工作区文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout -- <file>\n& git rm file\n& git commit -m \"说明注释\"\n# 彻底删除 , 先删除工作区和暂存区,再提交到master分支(仓库)\n```\n\n> \n>\n> 如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout -- <file>就可以 2.如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout -- <file> 3.如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了 \n\n# 本地仓库总结\n\n> Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)\n>\n> 工作区>>>>暂存区>>>>仓库\n>\n> git add把文件从工作区>>>>暂存区，git commit把文件从暂存区>>>>仓库，\n>\n> git diff查看工作区和暂存区差异，\n>\n> git diff --cached查看暂存区和仓库差异，\n>\n> git diff HEAD 查看工作区和仓库的差异，\n>\n> git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，\n>\n> git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。\n\n> **新建git本地仓库：**\n>\n> `git init` \n>\n> 新建一个.git文件，有这个文件就是一个git仓库\n>\n> **git本地仓库分三个区来区别操作（这个思路太重要了）：** \n>\n> **工作区：** 就是一个多了.git文件的文件夹，不要想太多，就按Linux操作文件夹的方法正常操作 \n>\n> **暂存区：** 暂时讲了两种操作暂存区的方法：\n>\n>  1.存入暂存区:\n>\n> `git add filename`  //添加文件\n>\n> `git rm filename`   //删除文件\n>\n>  这两条都是修改暂存区 \n>\n> 2.递交暂存区\n>\n>  `git commit -m \"log说明一般写改动是什么\"` \n>\n> 别忘了正常来说一般对暂存区修改以后一定要commit一下\n> **版本库：**`git commit`以后的最终版本存入地方，git最重要的一个地方，因为只有版本库的修改才可以跟踪\n>\n> 另外有几个命令查看状态也很重要： \n>\n> `git status`\n>\n> 查看当前git仓库与上一次commit之后的版本库的一切修改，包括工作区的修改和暂存区的修改（这种信息是不详细的） 很人性化的是，`git status`会提示你下一步可能会做的事，比如你对工作区做了修改，他可能会提示下一步要git add或者\n>\n> `git checkout  filename `\n>\n> ， 你刚执行完git add以后，git status跟踪的暂存区的修改，他又会提示你下一步可能要提交git commit或者\n>\n> `git reset HEAD < filename >` \n>\n> `git diff filename`\n>\n> 这个命令返回的是你对工作区的修改，别想太多，和什么对比并不重要，你只要知道什么时候他会有信息返回，返回什么信息！什么时候有返回呢！你对工作区已经存在的文件修改<!--（但是没有存入暂存区，也就是说没有git add或者git rm，所以一定要纠结的话，他比较的的确是暂存区和工作区的区别）-->的话有返回**（新建文件git diff看不到）**，返回什么，返回修改的详细信息，+是新添的行-是删去的行\n>\n>  `git diff --cached filename`\n>\n> 这个命令是查看你对暂存区的修改，也就是你`git add`或者`git rm`以后，`git diff`的返回信息就用`git diff --cached`来用了（这也是为什么这两个命令一样，只有参数不一样的原因，因为其实干的都是一件事，只是`git diff`针对的对象是工作区，`git diff --cached`针对的对象是暂存区） \n>\n> `git log`\n>\n> **当前版本之前**的commit日志记录，也就是说当前版本是回退回来的版本的话，当前版本之后的提交与回退都看不到（有个很重要的commit ID）\n>\n> `git reflog`\n>\n> 包括版本回退、版本提交的日志，信息相较于`git log`会比较简单 \n>\n> **这样把命令的针对对象分为三个区来理解，现在看撤销操作就很容易了：**\n>\n>  1.针对工作区的撤销（必须保证没有git add/git rm之前）： \n>\n> `git checkout -- filename` \n>\n> 2.针对暂存区的撤销（必须是git add/git rm以后才行） \n>\n> `git reset HEAD filename` \n>\n> 顺便想起git reset的另一种用法，参数不一样啦，那肯定也是撤销操作，当然就是撤销提交，回退版本啦\n>\n> `git reset --hard （HEAD^^^^）/commit id`\n\n# 远程仓库\n\n> Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。 \n\n[GitHub](https://github.com/) 提供Git仓库托管服务 , 注册一个GitHub账号，就可以免费获得Git远程仓库 ,自行点击链接注册\n\n> 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 ,所以需要设置下SSH Key\n\n> 第1步：**创建SSH Key**。在用户主目录下`C:\\Users\\zl`<!--用户主目录在windows中就是 C:\\Users\\Administrator\\，或者你新建了一个用户，那就是 C:\\Users\\用户名\\--> ，看看有没有.ssh目录，如果有，再看看这个目录下有没有`id_rsa`和`id_rsa.pub`这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n```powershell\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n> 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n>\n> 如果一切顺利的话，可以在用户主目录里找到`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥，可以放心地告诉任何人。\n>\n> 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n>\n> 然后，点“**Add SSH Key”**，填上任意Title，在Key文本框里粘贴`id_rsa.pub`文件的内容：\n\n## 本地文件添加到远程仓库\n\n* 找到“Create a new repo”按钮，创建一个新的仓库： \n* 在Repository name填入名称\n* 其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 \n\n在本地的`learngit`仓库下运行命令：\n\n```powershell\n$ git remote add origin git@github.com:michaelliao/learngit.git\n```\n\n> 请千万注意，把上面的`michaelliao`替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。\n>\n> 添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。\n>\n> 下一步，就可以把本地库的所有内容推送到远程库上：\n\n```powershell\n$ git push -u origin master\n```\n\n> 把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支`master`推送到远程。\n>\n> 由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。\n>\n> 推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样 \n\n> 从现在起，只要本地作了提交，就可以通过命令：\n\n```powershell\n$ git push origin master\n```\n\n## 克隆别人的Git远程仓库到自己的仓库\n\n* 在本地新建文件夹克隆下来\n* 删除`.git`文件\n* 然后在自己的GitHub上新建一个仓库\n* 在本地仓库执行\n\n```powershell\n$ git init\n$ git remote add origin 新建的仓库地址\n$ git add .\n$ git commit -m \"提交全部\"\n$ git push -u origin master\n```\n\n## SSH警告\n\n> 当你第一次使用Git的`clone`或者`push`命令连接GitHub时，会得到一个警告：\n>\n> ```\n> The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\n> RSA key fingerprint is xx.xx.xx.xx.xx.\n> Are you sure you want to continue connecting (yes/no)?\n> ```\n>\n> 这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入`yes`回车即可。\n>\n> Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：\n>\n> ```\n> Warning: Permanently added 'github.com' (RSA) to the list of known hosts.\n> ```\n>\n> 这个警告只会出现一次，后面的操作就不会有任何警告了。\n>\n> 如果你实在担心有人冒充GitHub服务器，输入`yes`前可以对照[GitHub的RSA Key的指纹信息](https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/)是否与SSH连接给出的一致。\n\n> 要关联一个远程库，使用命令`git remote add origin git@server-name:path/repo-name.git`；\n>\n> 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n>\n> 此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n>\n> 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n\n## 从远程库克隆到本地\n\n* 第一步\n  * 新建一个仓库,勾选`Initialize this repository with a README`，这样GitHub会自动为我们创建一个`README.md`文件。创建完毕后，可以看到`README.md`文件： \n* 第二步\n  * `$ git clone 仓库的URL`\n\n> URL我们一般选取SSH 相较于 http 而言 方便不用每次都输入用户名密码,而且传输速度快\n>\n> 除非公司只支持 http 才会选用","slug":"git快速上手","published":1,"updated":"2020-01-21T14:16:46.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frker0010wcq4mgrllrmk","content":"<h1 id=\"Git教程\"><a href=\"#Git教程\" class=\"headerlink\" title=\"Git教程\"></a>Git教程</h1><blockquote>\n<p>如果之前了解过想复习一下,直接看总结就可以了</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"设置Name和Email地址\"><a href=\"#设置Name和Email地址\" class=\"headerlink\" title=\"设置Name和Email地址\"></a>设置Name和Email地址</h2><p>安装完成后，还需要最后一步设置，在命令行输入：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"Your Name\"</span>\n$ git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"email@example.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n</blockquote>\n<h1 id=\"本地版本库\"><a href=\"#本地版本库\" class=\"headerlink\" title=\"本地版本库\"></a>本地版本库</h1><p>选择一个合适的地方，创建一个空目录：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ mkdir learngit\n$ cd learngit\n$ <span class=\"token function\">pwd</span>\n<span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>michael<span class=\"token operator\">/</span>learngit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p>\n<p> <strong>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</strong> </p>\n</blockquote>\n<p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git init\nInitialized empty Git repository in <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>michael<span class=\"token operator\">/</span>learngit<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>git<span class=\"token operator\">/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>\n<p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>\n<p><strong>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</strong> </p>\n</blockquote>\n<h2 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h2><blockquote>\n<p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>\n<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>\n<p>使用Windows的童鞋要特别注意：</p>\n<p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href=\"http://notepad-plus-plus.org/\" target=\"_blank\" rel=\"noopener\">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：</p>\n</blockquote>\n<p>先添加:</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\" spellcheck=\"true\"># 单个文件</span>\n$ git add readme<span class=\"token punctuation\">.</span>txt \n<span class=\"token comment\" spellcheck=\"true\"># 多个文件</span>\n$ git add readme<span class=\"token punctuation\">.</span>txt readmeCN<span class=\"token punctuation\">.</span>txt\n<span class=\"token comment\" spellcheck=\"true\"># 全部添加</span>\n$ git add <span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"把文件提交到本地版本库\"><a href=\"#把文件提交到本地版本库\" class=\"headerlink\" title=\"把文件提交到本地版本库\"></a>把文件提交到本地版本库</h2><p>再提交:</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"wrote a readme file\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>\n<p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p>\n</blockquote>\n<blockquote>\n<p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git add file1<span class=\"token punctuation\">.</span>txt\n$ git add file2<span class=\"token punctuation\">.</span>txt file3<span class=\"token punctuation\">.</span>txt\n$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"add 3 files.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h2><pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\" spellcheck=\"true\"># 查看本地库文件状态</span>\n$ git status\n<span class=\"token comment\" spellcheck=\"true\"># 文件当前文件改了什么,查看一下再提交就比较放心</span>\n$ git <span class=\"token function\">diff</span> readme<span class=\"token punctuation\">.</span>txt <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<ul>\n<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>\n<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>\n</ul>\n</blockquote>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\" spellcheck=\"true\"># 回退到上一版</span>\n$ git reset <span class=\"token operator\">--</span>hard HEAD^\n<span class=\"token comment\" spellcheck=\"true\"># 回退到上上一版</span>\n$ git reset <span class=\"token operator\">--</span>hard HEAD^^\n<span class=\"token comment\" spellcheck=\"true\"># 回退到指定版</span>\n$ git reset <span class=\"token operator\">--</span>hard commit_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<ul>\n<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>\n<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>\n<li>用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。 </li>\n</ul>\n</blockquote>\n<h2 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h2><blockquote>\n<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>\n<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>\n<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n</blockquote>\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2><pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git checkout <span class=\"token operator\">--</span> readme<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>\n<p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git reset HEAD readme<span class=\"token punctuation\">.</span>txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192\" target=\"_blank\" rel=\"noopener\">版本回退</a>一节，不过前提是没有推送到远程库。</p>\n</blockquote>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ <span class=\"token function\">rm</span> file\n<span class=\"token comment\" spellcheck=\"true\"># 删除工作区 , 可以直接用用git checkout -- &lt;file> 恢复</span>\n$ git <span class=\"token function\">rm</span> file\n<span class=\"token comment\" spellcheck=\"true\"># 不仅删除了工作区文件，而且还添加到了暂存区，需要先git reset HEAD &lt;file>，然后再git checkout -- &lt;file></span>\n&amp; git <span class=\"token function\">rm</span> file\n&amp; git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"说明注释\"</span>\n<span class=\"token comment\" spellcheck=\"true\"># 彻底删除 , 先删除工作区和暂存区,再提交到master分支(仓库)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout – <file>就可以 2.如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout – <file> 3.如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了 </file></file></file></p>\n</blockquote>\n<h1 id=\"本地仓库总结\"><a href=\"#本地仓库总结\" class=\"headerlink\" title=\"本地仓库总结\"></a>本地仓库总结</h1><blockquote>\n<p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p>\n<p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p>\n<p>git add把文件从工作区&gt;&gt;&gt;&gt;暂存区，git commit把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p>\n<p>git diff查看工作区和暂存区差异，</p>\n<p>git diff –cached查看暂存区和仓库差异，</p>\n<p>git diff HEAD 查看工作区和仓库的差异，</p>\n<p>git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，</p>\n<p>git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。</p>\n</blockquote>\n<blockquote>\n<p><strong>新建git本地仓库：</strong></p>\n<p><code>git init</code> </p>\n<p>新建一个.git文件，有这个文件就是一个git仓库</p>\n<p><strong>git本地仓库分三个区来区别操作（这个思路太重要了）：</strong> </p>\n<p><strong>工作区：</strong> 就是一个多了.git文件的文件夹，不要想太多，就按Linux操作文件夹的方法正常操作 </p>\n<p><strong>暂存区：</strong> 暂时讲了两种操作暂存区的方法：</p>\n<p> 1.存入暂存区:</p>\n<p><code>git add filename</code>  //添加文件</p>\n<p><code>git rm filename</code>   //删除文件</p>\n<p> 这两条都是修改暂存区 </p>\n<p>2.递交暂存区</p>\n<p> <code>git commit -m &quot;log说明一般写改动是什么&quot;</code> </p>\n<p>别忘了正常来说一般对暂存区修改以后一定要commit一下<br><strong>版本库：</strong><code>git commit</code>以后的最终版本存入地方，git最重要的一个地方，因为只有版本库的修改才可以跟踪</p>\n<p>另外有几个命令查看状态也很重要： </p>\n<p><code>git status</code></p>\n<p>查看当前git仓库与上一次commit之后的版本库的一切修改，包括工作区的修改和暂存区的修改（这种信息是不详细的） 很人性化的是，<code>git status</code>会提示你下一步可能会做的事，比如你对工作区做了修改，他可能会提示下一步要git add或者</p>\n<p><code>git checkout  filename</code></p>\n<p>， 你刚执行完git add以后，git status跟踪的暂存区的修改，他又会提示你下一步可能要提交git commit或者</p>\n<p><code>git reset HEAD &lt; filename &gt;</code> </p>\n<p><code>git diff filename</code></p>\n<p>这个命令返回的是你对工作区的修改，别想太多，和什么对比并不重要，你只要知道什么时候他会有信息返回，返回什么信息！什么时候有返回呢！你对工作区已经存在的文件修改<!--（但是没有存入暂存区，也就是说没有git add或者git rm，所以一定要纠结的话，他比较的的确是暂存区和工作区的区别）-->的话有返回<strong>（新建文件git diff看不到）</strong>，返回什么，返回修改的详细信息，+是新添的行-是删去的行</p>\n<p> <code>git diff --cached filename</code></p>\n<p>这个命令是查看你对暂存区的修改，也就是你<code>git add</code>或者<code>git rm</code>以后，<code>git diff</code>的返回信息就用<code>git diff --cached</code>来用了（这也是为什么这两个命令一样，只有参数不一样的原因，因为其实干的都是一件事，只是<code>git diff</code>针对的对象是工作区，<code>git diff --cached</code>针对的对象是暂存区） </p>\n<p><code>git log</code></p>\n<p><strong>当前版本之前</strong>的commit日志记录，也就是说当前版本是回退回来的版本的话，当前版本之后的提交与回退都看不到（有个很重要的commit ID）</p>\n<p><code>git reflog</code></p>\n<p>包括版本回退、版本提交的日志，信息相较于<code>git log</code>会比较简单 </p>\n<p><strong>这样把命令的针对对象分为三个区来理解，现在看撤销操作就很容易了：</strong></p>\n<p> 1.针对工作区的撤销（必须保证没有git add/git rm之前）： </p>\n<p><code>git checkout -- filename</code> </p>\n<p>2.针对暂存区的撤销（必须是git add/git rm以后才行） </p>\n<p><code>git reset HEAD filename</code> </p>\n<p>顺便想起git reset的另一种用法，参数不一样啦，那肯定也是撤销操作，当然就是撤销提交，回退版本啦</p>\n<p><code>git reset --hard （HEAD^^^^）/commit id</code></p>\n</blockquote>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><blockquote>\n<p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。 </p>\n</blockquote>\n<p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 提供Git仓库托管服务 , 注册一个GitHub账号，就可以免费获得Git远程仓库 ,自行点击链接注册</p>\n<blockquote>\n<p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 ,所以需要设置下SSH Key</p>\n</blockquote>\n<blockquote>\n<p>第1步：<strong>创建SSH Key</strong>。在用户主目录下<code>C:\\Users\\zl</code><!--用户主目录在windows中就是 C:\\Users\\Administrator\\，或者你新建了一个用户，那就是 C:\\Users\\用户名\\--> ，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ ssh<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span>C <span class=\"token string\">\"youremail@example.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>\n<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>\n<p>然后，点“<strong>Add SSH Key”</strong>，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p>\n</blockquote>\n<h2 id=\"本地文件添加到远程仓库\"><a href=\"#本地文件添加到远程仓库\" class=\"headerlink\" title=\"本地文件添加到远程仓库\"></a>本地文件添加到远程仓库</h2><ul>\n<li>找到“Create a new repo”按钮，创建一个新的仓库： </li>\n<li>在Repository name填入名称</li>\n<li>其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 </li>\n</ul>\n<p>在本地的<code>learngit</code>仓库下运行命令：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git remote add origin git@github<span class=\"token punctuation\">.</span>com:michaelliao<span class=\"token operator\">/</span>learngit<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>\n<p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git push <span class=\"token operator\">-</span>u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样 </p>\n</blockquote>\n<blockquote>\n<p>从现在起，只要本地作了提交，就可以通过命令：</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git push origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"克隆别人的Git远程仓库到自己的仓库\"><a href=\"#克隆别人的Git远程仓库到自己的仓库\" class=\"headerlink\" title=\"克隆别人的Git远程仓库到自己的仓库\"></a>克隆别人的Git远程仓库到自己的仓库</h2><ul>\n<li>在本地新建文件夹克隆下来</li>\n<li>删除<code>.git</code>文件</li>\n<li>然后在自己的GitHub上新建一个仓库</li>\n<li>在本地仓库执行</li>\n</ul>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ git init\n$ git remote add origin 新建的仓库地址\n$ git add <span class=\"token punctuation\">.</span>\n$ git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"提交全部\"</span>\n$ git push <span class=\"token operator\">-</span>u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"SSH警告\"><a href=\"#SSH警告\" class=\"headerlink\" title=\"SSH警告\"></a>SSH警告</h2><blockquote>\n<p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p>\n<pre><code>The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.\nRSA key fingerprint is xx.xx.xx.xx.xx.\nAre you sure you want to continue connecting (yes/no)?</code></pre><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p>\n<p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>\n<pre><code>Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</code></pre><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>\n<p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href=\"https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/\" target=\"_blank\" rel=\"noopener\">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p>\n</blockquote>\n<blockquote>\n<p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>\n<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n</blockquote>\n<h2 id=\"从远程库克隆到本地\"><a href=\"#从远程库克隆到本地\" class=\"headerlink\" title=\"从远程库克隆到本地\"></a>从远程库克隆到本地</h2><ul>\n<li>第一步<ul>\n<li>新建一个仓库,勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件： </li>\n</ul>\n</li>\n<li>第二步<ul>\n<li><code>$ git clone 仓库的URL</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>URL我们一般选取SSH 相较于 http 而言 方便不用每次都输入用户名密码,而且传输速度快</p>\n<p>除非公司只支持 http 才会选用</p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git教程\"><a href=\"#Git教程\" class=\"headerlink\" title=\"Git教程\"></a>Git教程</h1><blockquote>\n<p>如果之前了解过想复习一下,直接看总结就可以了</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"设置Name和Email地址\"><a href=\"#设置Name和Email地址\" class=\"headerlink\" title=\"设置Name和Email地址\"></a>设置Name和Email地址</h2><p>安装完成后，还需要最后一步设置，在命令行输入：</p>\n<pre><code class=\"powershell\">$ git config --global user.name &quot;Your Name&quot;\n$ git config --global user.email &quot;email@example.com&quot;</code></pre>\n<blockquote>\n<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n</blockquote>\n<h1 id=\"本地版本库\"><a href=\"#本地版本库\" class=\"headerlink\" title=\"本地版本库\"></a>本地版本库</h1><p>选择一个合适的地方，创建一个空目录：</p>\n<pre><code class=\"powershell\">$ mkdir learngit\n$ cd learngit\n$ pwd\n/Users/michael/learngit</code></pre>\n<blockquote>\n<p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p>\n<p> <strong>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</strong> </p>\n</blockquote>\n<p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p>\n<pre><code class=\"powershell\">$ git init\nInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre>\n<blockquote>\n<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>\n<p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>\n<p><strong>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</strong> </p>\n</blockquote>\n<h2 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h2><blockquote>\n<p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>\n<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>\n<p>使用Windows的童鞋要特别注意：</p>\n<p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href=\"http://notepad-plus-plus.org/\" target=\"_blank\" rel=\"noopener\">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：</p>\n</blockquote>\n<p>先添加:</p>\n<pre><code class=\"powershell\"># 单个文件\n$ git add readme.txt \n# 多个文件\n$ git add readme.txt readmeCN.txt\n# 全部添加\n$ git add .</code></pre>\n<h2 id=\"把文件提交到本地版本库\"><a href=\"#把文件提交到本地版本库\" class=\"headerlink\" title=\"把文件提交到本地版本库\"></a>把文件提交到本地版本库</h2><p>再提交:</p>\n<pre><code class=\"powershell\">$ git commit -m &quot;wrote a readme file&quot;</code></pre>\n<blockquote>\n<p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>\n<p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p>\n</blockquote>\n<blockquote>\n<p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p>\n<pre><code class=\"powershell\">$ git add file1.txt\n$ git add file2.txt file3.txt\n$ git commit -m &quot;add 3 files.&quot;</code></pre>\n</blockquote>\n<h2 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h2><pre><code class=\"powershell\"># 查看本地库文件状态\n$ git status\n# 文件当前文件改了什么,查看一下再提交就比较放心\n$ git diff readme.txt </code></pre>\n<blockquote>\n<ul>\n<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>\n<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>\n</ul>\n</blockquote>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><pre><code class=\"powershell\"># 回退到上一版\n$ git reset --hard HEAD^\n# 回退到上上一版\n$ git reset --hard HEAD^^\n# 回退到指定版\n$ git reset --hard commit_id</code></pre>\n<blockquote>\n<ul>\n<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>\n<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>\n<li>用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。 </li>\n</ul>\n</blockquote>\n<h2 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h2><blockquote>\n<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>\n<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>\n<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n</blockquote>\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2><pre><code class=\"powershell\">$ git checkout -- readme.txt</code></pre>\n<blockquote>\n<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>\n<p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>\n</blockquote>\n<pre><code class=\"powershell\">$ git reset HEAD readme.txt</code></pre>\n<blockquote>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192\" target=\"_blank\" rel=\"noopener\">版本回退</a>一节，不过前提是没有推送到远程库。</p>\n</blockquote>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><pre><code class=\"powershell\">$ rm file\n# 删除工作区 , 可以直接用用git checkout -- &lt;file&gt; 恢复\n$ git rm file\n# 不仅删除了工作区文件，而且还添加到了暂存区，需要先git reset HEAD &lt;file&gt;，然后再git checkout -- &lt;file&gt;\n&amp; git rm file\n&amp; git commit -m &quot;说明注释&quot;\n# 彻底删除 , 先删除工作区和暂存区,再提交到master分支(仓库)</code></pre>\n<blockquote>\n<p>如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout – <file>就可以 2.如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout – <file> 3.如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了 </file></file></file></p>\n</blockquote>\n<h1 id=\"本地仓库总结\"><a href=\"#本地仓库总结\" class=\"headerlink\" title=\"本地仓库总结\"></a>本地仓库总结</h1><blockquote>\n<p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p>\n<p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p>\n<p>git add把文件从工作区&gt;&gt;&gt;&gt;暂存区，git commit把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p>\n<p>git diff查看工作区和暂存区差异，</p>\n<p>git diff –cached查看暂存区和仓库差异，</p>\n<p>git diff HEAD 查看工作区和仓库的差异，</p>\n<p>git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，</p>\n<p>git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。</p>\n</blockquote>\n<blockquote>\n<p><strong>新建git本地仓库：</strong></p>\n<p><code>git init</code> </p>\n<p>新建一个.git文件，有这个文件就是一个git仓库</p>\n<p><strong>git本地仓库分三个区来区别操作（这个思路太重要了）：</strong> </p>\n<p><strong>工作区：</strong> 就是一个多了.git文件的文件夹，不要想太多，就按Linux操作文件夹的方法正常操作 </p>\n<p><strong>暂存区：</strong> 暂时讲了两种操作暂存区的方法：</p>\n<p> 1.存入暂存区:</p>\n<p><code>git add filename</code>  //添加文件</p>\n<p><code>git rm filename</code>   //删除文件</p>\n<p> 这两条都是修改暂存区 </p>\n<p>2.递交暂存区</p>\n<p> <code>git commit -m &quot;log说明一般写改动是什么&quot;</code> </p>\n<p>别忘了正常来说一般对暂存区修改以后一定要commit一下<br><strong>版本库：</strong><code>git commit</code>以后的最终版本存入地方，git最重要的一个地方，因为只有版本库的修改才可以跟踪</p>\n<p>另外有几个命令查看状态也很重要： </p>\n<p><code>git status</code></p>\n<p>查看当前git仓库与上一次commit之后的版本库的一切修改，包括工作区的修改和暂存区的修改（这种信息是不详细的） 很人性化的是，<code>git status</code>会提示你下一步可能会做的事，比如你对工作区做了修改，他可能会提示下一步要git add或者</p>\n<p><code>git checkout  filename</code></p>\n<p>， 你刚执行完git add以后，git status跟踪的暂存区的修改，他又会提示你下一步可能要提交git commit或者</p>\n<p><code>git reset HEAD &lt; filename &gt;</code> </p>\n<p><code>git diff filename</code></p>\n<p>这个命令返回的是你对工作区的修改，别想太多，和什么对比并不重要，你只要知道什么时候他会有信息返回，返回什么信息！什么时候有返回呢！你对工作区已经存在的文件修改<!--（但是没有存入暂存区，也就是说没有git add或者git rm，所以一定要纠结的话，他比较的的确是暂存区和工作区的区别）-->的话有返回<strong>（新建文件git diff看不到）</strong>，返回什么，返回修改的详细信息，+是新添的行-是删去的行</p>\n<p> <code>git diff --cached filename</code></p>\n<p>这个命令是查看你对暂存区的修改，也就是你<code>git add</code>或者<code>git rm</code>以后，<code>git diff</code>的返回信息就用<code>git diff --cached</code>来用了（这也是为什么这两个命令一样，只有参数不一样的原因，因为其实干的都是一件事，只是<code>git diff</code>针对的对象是工作区，<code>git diff --cached</code>针对的对象是暂存区） </p>\n<p><code>git log</code></p>\n<p><strong>当前版本之前</strong>的commit日志记录，也就是说当前版本是回退回来的版本的话，当前版本之后的提交与回退都看不到（有个很重要的commit ID）</p>\n<p><code>git reflog</code></p>\n<p>包括版本回退、版本提交的日志，信息相较于<code>git log</code>会比较简单 </p>\n<p><strong>这样把命令的针对对象分为三个区来理解，现在看撤销操作就很容易了：</strong></p>\n<p> 1.针对工作区的撤销（必须保证没有git add/git rm之前）： </p>\n<p><code>git checkout -- filename</code> </p>\n<p>2.针对暂存区的撤销（必须是git add/git rm以后才行） </p>\n<p><code>git reset HEAD filename</code> </p>\n<p>顺便想起git reset的另一种用法，参数不一样啦，那肯定也是撤销操作，当然就是撤销提交，回退版本啦</p>\n<p><code>git reset --hard （HEAD^^^^）/commit id</code></p>\n</blockquote>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><blockquote>\n<p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。 </p>\n</blockquote>\n<p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 提供Git仓库托管服务 , 注册一个GitHub账号，就可以免费获得Git远程仓库 ,自行点击链接注册</p>\n<blockquote>\n<p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 ,所以需要设置下SSH Key</p>\n</blockquote>\n<blockquote>\n<p>第1步：<strong>创建SSH Key</strong>。在用户主目录下<code>C:\\Users\\zl</code><!--用户主目录在windows中就是 C:\\Users\\Administrator\\，或者你新建了一个用户，那就是 C:\\Users\\用户名\\--> ，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n</blockquote>\n<pre><code class=\"powershell\">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre>\n<blockquote>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>\n<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>\n<p>然后，点“<strong>Add SSH Key”</strong>，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p>\n</blockquote>\n<h2 id=\"本地文件添加到远程仓库\"><a href=\"#本地文件添加到远程仓库\" class=\"headerlink\" title=\"本地文件添加到远程仓库\"></a>本地文件添加到远程仓库</h2><ul>\n<li>找到“Create a new repo”按钮，创建一个新的仓库： </li>\n<li>在Repository name填入名称</li>\n<li>其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 </li>\n</ul>\n<p>在本地的<code>learngit</code>仓库下运行命令：</p>\n<pre><code class=\"powershell\">$ git remote add origin git@github.com:michaelliao/learngit.git</code></pre>\n<blockquote>\n<p>请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>\n<p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>\n</blockquote>\n<pre><code class=\"powershell\">$ git push -u origin master</code></pre>\n<blockquote>\n<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样 </p>\n</blockquote>\n<blockquote>\n<p>从现在起，只要本地作了提交，就可以通过命令：</p>\n</blockquote>\n<pre><code class=\"powershell\">$ git push origin master</code></pre>\n<h2 id=\"克隆别人的Git远程仓库到自己的仓库\"><a href=\"#克隆别人的Git远程仓库到自己的仓库\" class=\"headerlink\" title=\"克隆别人的Git远程仓库到自己的仓库\"></a>克隆别人的Git远程仓库到自己的仓库</h2><ul>\n<li>在本地新建文件夹克隆下来</li>\n<li>删除<code>.git</code>文件</li>\n<li>然后在自己的GitHub上新建一个仓库</li>\n<li>在本地仓库执行</li>\n</ul>\n<pre><code class=\"powershell\">$ git init\n$ git remote add origin 新建的仓库地址\n$ git add .\n$ git commit -m &quot;提交全部&quot;\n$ git push -u origin master</code></pre>\n<h2 id=\"SSH警告\"><a href=\"#SSH警告\" class=\"headerlink\" title=\"SSH警告\"></a>SSH警告</h2><blockquote>\n<p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p>\n<pre><code>The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.\nRSA key fingerprint is xx.xx.xx.xx.xx.\nAre you sure you want to continue connecting (yes/no)?</code></pre><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p>\n<p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>\n<pre><code>Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</code></pre><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>\n<p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href=\"https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/\" target=\"_blank\" rel=\"noopener\">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p>\n</blockquote>\n<blockquote>\n<p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>\n<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n</blockquote>\n<h2 id=\"从远程库克隆到本地\"><a href=\"#从远程库克隆到本地\" class=\"headerlink\" title=\"从远程库克隆到本地\"></a>从远程库克隆到本地</h2><ul>\n<li>第一步<ul>\n<li>新建一个仓库,勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件： </li>\n</ul>\n</li>\n<li>第二步<ul>\n<li><code>$ git clone 仓库的URL</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>URL我们一般选取SSH 相较于 http 而言 方便不用每次都输入用户名密码,而且传输速度快</p>\n<p>除非公司只支持 http 才会选用</p>\n</blockquote>\n"},{"title":"vscode-效率提升","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-29T16:46:21.000Z","password":null,"summary":null,"_content":"\n# vscode效率提升\n\n## 快捷键\n\n### **行** 的操作：\n\n> - 重开一行：光标在行尾的话，回车即可；不在行尾，`Ctrl + enter` 向下重开一行；`shift + Ctrl + enter` 则是在上一行重开一行\n> - 删除一行：光标没有选择内容时，`ctrl + x` 剪切一行；`shift + Ctrl + k` 直接删除一行\n> - 移动一行：`alt + ↑` 向上移动一行；`alt + ↓` 向下移动一行\n> - 复制一行：`shift + alt + ↓` 向下复制一行；`shift + alt + ↑` 向上复制一行\n>\n> \n\n### 对于 **词** 的操作：\n\n> - **选中一个词：`Ctrl + d`**\n> - 跳转到单词起始位置`Ctrl + ← ` \n> - 跳转到单词末尾位置`Ctrl  + →`\n\n### 搜索或者替换：\n\n> - `cmd + f` ：搜索\n> - `cmd + alt + f`： 替换\n> - `cmd + shift + f`：在项目内搜索\n\n### 格式调整\n\n> - 代码行缩进C`trl+[， Ctrl+]   , `或者`Tab , Shift+Tab`\n> - **折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]**\n> - Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行\n> - **代码格式化：`Shift+Alt+F`**\n\n\n\n### 同时打开多个编辑器（查看多个文件）\n\n> - 新建文件 Ctrl+N\n> - 历史打开文件之间切换` Ctrl+Tab，Alt+Left，Alt+Right`\n> - 切出一个新的编辑器（最多3个）Ctrl+\\，也可以按住Ctrl鼠标点击Explorer里的文件名\n> - 左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3\n> - **3个编辑器之间循环切换 Ctrl+`**\n> - **编辑器换位置，Ctrl+k然后按Left或Right*\n\n### **显示相关**\n\n> - 全屏：F11\n> - 放大效果：Ctrl +  / Ctrl  -\n> - 侧边栏显/隐：`Ctrl+B`\n> - **预览markdown `Ctrl+Shift+V`**\n\n \n\n## 注释\n\n> Ctrl + / --  行注释\n>\n> Shift + Alt + A  -- 注释选中内容\n\n## 插件\n\n### Chinese (Simplified) Language Pack for Visual Studio Code\n\n> VS Code的中文（简体）语言包。安装后，同时按下Ctrl + Shift + P打开命令面板，之后输入\"config\"，配置显示语言即可。\n\n### `Live Server`\n\n> 保存代码后自动刷新页面\n\n### Material Theme\n\n> VS Code最受欢迎、最悠久的主题插件。\n\n### **Material Icon Theme**\n\n> 文件管理器（左侧）的 icon 小图标\n\n\n\n### Markdown插件\n\n`Markdown All in One`\n\n`Markdown Preview Github Styling`  \n\n> 第一个插件，是一个组合包，一股脑把最常用的Markdown优化都给你装好；第二个插件，则是Github使用的Markdown渲染样式，不是特别华丽，很朴素，很简洁的样式，因为很多人用Markdown都是为了使用Github Pages，所以这个样式特别受欢迎。使用这个样式，在本地就能预览Markdown文件最终在Github Pages中显示的效果。 \n\n## 设置代码片段\n\n### 创建自己的代码片段\n\n> 为提高开发效率可创建自己的代码片段\n>\n> 1、点击设置，打开用户代码片段即可开始创建自己的代码片段；\n\n","source":"_posts/vscode-效率提升.md","raw":"---\ntitle: vscode-效率提升\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-03-01 00:46:21\npassword:\nsummary:\ntags:\n- 工具\ncategories:\n- 前端\n---\n\n# vscode效率提升\n\n## 快捷键\n\n### **行** 的操作：\n\n> - 重开一行：光标在行尾的话，回车即可；不在行尾，`Ctrl + enter` 向下重开一行；`shift + Ctrl + enter` 则是在上一行重开一行\n> - 删除一行：光标没有选择内容时，`ctrl + x` 剪切一行；`shift + Ctrl + k` 直接删除一行\n> - 移动一行：`alt + ↑` 向上移动一行；`alt + ↓` 向下移动一行\n> - 复制一行：`shift + alt + ↓` 向下复制一行；`shift + alt + ↑` 向上复制一行\n>\n> \n\n### 对于 **词** 的操作：\n\n> - **选中一个词：`Ctrl + d`**\n> - 跳转到单词起始位置`Ctrl + ← ` \n> - 跳转到单词末尾位置`Ctrl  + →`\n\n### 搜索或者替换：\n\n> - `cmd + f` ：搜索\n> - `cmd + alt + f`： 替换\n> - `cmd + shift + f`：在项目内搜索\n\n### 格式调整\n\n> - 代码行缩进C`trl+[， Ctrl+]   , `或者`Tab , Shift+Tab`\n> - **折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]**\n> - Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行\n> - **代码格式化：`Shift+Alt+F`**\n\n\n\n### 同时打开多个编辑器（查看多个文件）\n\n> - 新建文件 Ctrl+N\n> - 历史打开文件之间切换` Ctrl+Tab，Alt+Left，Alt+Right`\n> - 切出一个新的编辑器（最多3个）Ctrl+\\，也可以按住Ctrl鼠标点击Explorer里的文件名\n> - 左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3\n> - **3个编辑器之间循环切换 Ctrl+`**\n> - **编辑器换位置，Ctrl+k然后按Left或Right*\n\n### **显示相关**\n\n> - 全屏：F11\n> - 放大效果：Ctrl +  / Ctrl  -\n> - 侧边栏显/隐：`Ctrl+B`\n> - **预览markdown `Ctrl+Shift+V`**\n\n \n\n## 注释\n\n> Ctrl + / --  行注释\n>\n> Shift + Alt + A  -- 注释选中内容\n\n## 插件\n\n### Chinese (Simplified) Language Pack for Visual Studio Code\n\n> VS Code的中文（简体）语言包。安装后，同时按下Ctrl + Shift + P打开命令面板，之后输入\"config\"，配置显示语言即可。\n\n### `Live Server`\n\n> 保存代码后自动刷新页面\n\n### Material Theme\n\n> VS Code最受欢迎、最悠久的主题插件。\n\n### **Material Icon Theme**\n\n> 文件管理器（左侧）的 icon 小图标\n\n\n\n### Markdown插件\n\n`Markdown All in One`\n\n`Markdown Preview Github Styling`  \n\n> 第一个插件，是一个组合包，一股脑把最常用的Markdown优化都给你装好；第二个插件，则是Github使用的Markdown渲染样式，不是特别华丽，很朴素，很简洁的样式，因为很多人用Markdown都是为了使用Github Pages，所以这个样式特别受欢迎。使用这个样式，在本地就能预览Markdown文件最终在Github Pages中显示的效果。 \n\n## 设置代码片段\n\n### 创建自己的代码片段\n\n> 为提高开发效率可创建自己的代码片段\n>\n> 1、点击设置，打开用户代码片段即可开始创建自己的代码片段；\n\n","slug":"vscode-效率提升","published":1,"updated":"2020-03-17T14:27:25.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkeu0015wcq40dtqud9m","content":"<h1 id=\"vscode效率提升\"><a href=\"#vscode效率提升\" class=\"headerlink\" title=\"vscode效率提升\"></a>vscode效率提升</h1><h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><h3 id=\"行-的操作：\"><a href=\"#行-的操作：\" class=\"headerlink\" title=\"行 的操作：\"></a><strong>行</strong> 的操作：</h3><blockquote>\n<ul>\n<li>重开一行：光标在行尾的话，回车即可；不在行尾，<code>Ctrl + enter</code> 向下重开一行；<code>shift + Ctrl + enter</code> 则是在上一行重开一行</li>\n<li>删除一行：光标没有选择内容时，<code>ctrl + x</code> 剪切一行；<code>shift + Ctrl + k</code> 直接删除一行</li>\n<li>移动一行：<code>alt + ↑</code> 向上移动一行；<code>alt + ↓</code> 向下移动一行</li>\n<li>复制一行：<code>shift + alt + ↓</code> 向下复制一行；<code>shift + alt + ↑</code> 向上复制一行</li>\n</ul>\n</blockquote>\n<h3 id=\"对于-词-的操作：\"><a href=\"#对于-词-的操作：\" class=\"headerlink\" title=\"对于 词 的操作：\"></a>对于 <strong>词</strong> 的操作：</h3><blockquote>\n<ul>\n<li><strong>选中一个词：<code>Ctrl + d</code></strong></li>\n<li>跳转到单词起始位置<code>Ctrl + ←</code> </li>\n<li>跳转到单词末尾位置<code>Ctrl  + →</code></li>\n</ul>\n</blockquote>\n<h3 id=\"搜索或者替换：\"><a href=\"#搜索或者替换：\" class=\"headerlink\" title=\"搜索或者替换：\"></a>搜索或者替换：</h3><blockquote>\n<ul>\n<li><code>cmd + f</code> ：搜索</li>\n<li><code>cmd + alt + f</code>： 替换</li>\n<li><code>cmd + shift + f</code>：在项目内搜索</li>\n</ul>\n</blockquote>\n<h3 id=\"格式调整\"><a href=\"#格式调整\" class=\"headerlink\" title=\"格式调整\"></a>格式调整</h3><blockquote>\n<ul>\n<li>代码行缩进C<code>trl+[， Ctrl+]   ,</code>或者<code>Tab , Shift+Tab</code></li>\n<li><strong>折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]</strong></li>\n<li>Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行</li>\n<li><strong>代码格式化：<code>Shift+Alt+F</code></strong></li>\n</ul>\n</blockquote>\n<h3 id=\"同时打开多个编辑器（查看多个文件）\"><a href=\"#同时打开多个编辑器（查看多个文件）\" class=\"headerlink\" title=\"同时打开多个编辑器（查看多个文件）\"></a>同时打开多个编辑器（查看多个文件）</h3><blockquote>\n<ul>\n<li>新建文件 Ctrl+N</li>\n<li>历史打开文件之间切换<code>Ctrl+Tab，Alt+Left，Alt+Right</code></li>\n<li>切出一个新的编辑器（最多3个）Ctrl+\\，也可以按住Ctrl鼠标点击Explorer里的文件名</li>\n<li>左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3</li>\n<li><strong>3个编辑器之间循环切换 Ctrl+`</strong></li>\n<li><em>*编辑器换位置，Ctrl+k然后按Left或Right</em></li>\n</ul>\n</blockquote>\n<h3 id=\"显示相关\"><a href=\"#显示相关\" class=\"headerlink\" title=\"显示相关\"></a><strong>显示相关</strong></h3><blockquote>\n<ul>\n<li>全屏：F11</li>\n<li>放大效果：Ctrl +  / Ctrl  -</li>\n<li>侧边栏显/隐：<code>Ctrl+B</code></li>\n<li><strong>预览markdown <code>Ctrl+Shift+V</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><blockquote>\n<p>Ctrl + / –  行注释</p>\n<p>Shift + Alt + A  – 注释选中内容</p>\n</blockquote>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h3><blockquote>\n<p>VS Code的中文（简体）语言包。安装后，同时按下Ctrl + Shift + P打开命令面板，之后输入”config”，配置显示语言即可。</p>\n</blockquote>\n<h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a><code>Live Server</code></h3><blockquote>\n<p>保存代码后自动刷新页面</p>\n</blockquote>\n<h3 id=\"Material-Theme\"><a href=\"#Material-Theme\" class=\"headerlink\" title=\"Material Theme\"></a>Material Theme</h3><blockquote>\n<p>VS Code最受欢迎、最悠久的主题插件。</p>\n</blockquote>\n<h3 id=\"Material-Icon-Theme\"><a href=\"#Material-Icon-Theme\" class=\"headerlink\" title=\"Material Icon Theme\"></a><strong>Material Icon Theme</strong></h3><blockquote>\n<p>文件管理器（左侧）的 icon 小图标</p>\n</blockquote>\n<h3 id=\"Markdown插件\"><a href=\"#Markdown插件\" class=\"headerlink\" title=\"Markdown插件\"></a>Markdown插件</h3><p><code>Markdown All in One</code></p>\n<p><code>Markdown Preview Github Styling</code>  </p>\n<blockquote>\n<p>第一个插件，是一个组合包，一股脑把最常用的Markdown优化都给你装好；第二个插件，则是Github使用的Markdown渲染样式，不是特别华丽，很朴素，很简洁的样式，因为很多人用Markdown都是为了使用Github Pages，所以这个样式特别受欢迎。使用这个样式，在本地就能预览Markdown文件最终在Github Pages中显示的效果。 </p>\n</blockquote>\n<h2 id=\"设置代码片段\"><a href=\"#设置代码片段\" class=\"headerlink\" title=\"设置代码片段\"></a>设置代码片段</h2><h3 id=\"创建自己的代码片段\"><a href=\"#创建自己的代码片段\" class=\"headerlink\" title=\"创建自己的代码片段\"></a>创建自己的代码片段</h3><blockquote>\n<p>为提高开发效率可创建自己的代码片段</p>\n<p>1、点击设置，打开用户代码片段即可开始创建自己的代码片段；</p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"vscode效率提升\"><a href=\"#vscode效率提升\" class=\"headerlink\" title=\"vscode效率提升\"></a>vscode效率提升</h1><h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><h3 id=\"行-的操作：\"><a href=\"#行-的操作：\" class=\"headerlink\" title=\"行 的操作：\"></a><strong>行</strong> 的操作：</h3><blockquote>\n<ul>\n<li>重开一行：光标在行尾的话，回车即可；不在行尾，<code>Ctrl + enter</code> 向下重开一行；<code>shift + Ctrl + enter</code> 则是在上一行重开一行</li>\n<li>删除一行：光标没有选择内容时，<code>ctrl + x</code> 剪切一行；<code>shift + Ctrl + k</code> 直接删除一行</li>\n<li>移动一行：<code>alt + ↑</code> 向上移动一行；<code>alt + ↓</code> 向下移动一行</li>\n<li>复制一行：<code>shift + alt + ↓</code> 向下复制一行；<code>shift + alt + ↑</code> 向上复制一行</li>\n</ul>\n</blockquote>\n<h3 id=\"对于-词-的操作：\"><a href=\"#对于-词-的操作：\" class=\"headerlink\" title=\"对于 词 的操作：\"></a>对于 <strong>词</strong> 的操作：</h3><blockquote>\n<ul>\n<li><strong>选中一个词：<code>Ctrl + d</code></strong></li>\n<li>跳转到单词起始位置<code>Ctrl + ←</code> </li>\n<li>跳转到单词末尾位置<code>Ctrl  + →</code></li>\n</ul>\n</blockquote>\n<h3 id=\"搜索或者替换：\"><a href=\"#搜索或者替换：\" class=\"headerlink\" title=\"搜索或者替换：\"></a>搜索或者替换：</h3><blockquote>\n<ul>\n<li><code>cmd + f</code> ：搜索</li>\n<li><code>cmd + alt + f</code>： 替换</li>\n<li><code>cmd + shift + f</code>：在项目内搜索</li>\n</ul>\n</blockquote>\n<h3 id=\"格式调整\"><a href=\"#格式调整\" class=\"headerlink\" title=\"格式调整\"></a>格式调整</h3><blockquote>\n<ul>\n<li>代码行缩进C<code>trl+[， Ctrl+]   ,</code>或者<code>Tab , Shift+Tab</code></li>\n<li><strong>折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]</strong></li>\n<li>Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行</li>\n<li><strong>代码格式化：<code>Shift+Alt+F</code></strong></li>\n</ul>\n</blockquote>\n<h3 id=\"同时打开多个编辑器（查看多个文件）\"><a href=\"#同时打开多个编辑器（查看多个文件）\" class=\"headerlink\" title=\"同时打开多个编辑器（查看多个文件）\"></a>同时打开多个编辑器（查看多个文件）</h3><blockquote>\n<ul>\n<li>新建文件 Ctrl+N</li>\n<li>历史打开文件之间切换<code>Ctrl+Tab，Alt+Left，Alt+Right</code></li>\n<li>切出一个新的编辑器（最多3个）Ctrl+\\，也可以按住Ctrl鼠标点击Explorer里的文件名</li>\n<li>左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3</li>\n<li><strong>3个编辑器之间循环切换 Ctrl+`</strong></li>\n<li><em>*编辑器换位置，Ctrl+k然后按Left或Right</em></li>\n</ul>\n</blockquote>\n<h3 id=\"显示相关\"><a href=\"#显示相关\" class=\"headerlink\" title=\"显示相关\"></a><strong>显示相关</strong></h3><blockquote>\n<ul>\n<li>全屏：F11</li>\n<li>放大效果：Ctrl +  / Ctrl  -</li>\n<li>侧边栏显/隐：<code>Ctrl+B</code></li>\n<li><strong>预览markdown <code>Ctrl+Shift+V</code></strong></li>\n</ul>\n</blockquote>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><blockquote>\n<p>Ctrl + / –  行注释</p>\n<p>Shift + Alt + A  – 注释选中内容</p>\n</blockquote>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h3><blockquote>\n<p>VS Code的中文（简体）语言包。安装后，同时按下Ctrl + Shift + P打开命令面板，之后输入”config”，配置显示语言即可。</p>\n</blockquote>\n<h3 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a><code>Live Server</code></h3><blockquote>\n<p>保存代码后自动刷新页面</p>\n</blockquote>\n<h3 id=\"Material-Theme\"><a href=\"#Material-Theme\" class=\"headerlink\" title=\"Material Theme\"></a>Material Theme</h3><blockquote>\n<p>VS Code最受欢迎、最悠久的主题插件。</p>\n</blockquote>\n<h3 id=\"Material-Icon-Theme\"><a href=\"#Material-Icon-Theme\" class=\"headerlink\" title=\"Material Icon Theme\"></a><strong>Material Icon Theme</strong></h3><blockquote>\n<p>文件管理器（左侧）的 icon 小图标</p>\n</blockquote>\n<h3 id=\"Markdown插件\"><a href=\"#Markdown插件\" class=\"headerlink\" title=\"Markdown插件\"></a>Markdown插件</h3><p><code>Markdown All in One</code></p>\n<p><code>Markdown Preview Github Styling</code>  </p>\n<blockquote>\n<p>第一个插件，是一个组合包，一股脑把最常用的Markdown优化都给你装好；第二个插件，则是Github使用的Markdown渲染样式，不是特别华丽，很朴素，很简洁的样式，因为很多人用Markdown都是为了使用Github Pages，所以这个样式特别受欢迎。使用这个样式，在本地就能预览Markdown文件最终在Github Pages中显示的效果。 </p>\n</blockquote>\n<h2 id=\"设置代码片段\"><a href=\"#设置代码片段\" class=\"headerlink\" title=\"设置代码片段\"></a>设置代码片段</h2><h3 id=\"创建自己的代码片段\"><a href=\"#创建自己的代码片段\" class=\"headerlink\" title=\"创建自己的代码片段\"></a>创建自己的代码片段</h3><blockquote>\n<p>为提高开发效率可创建自己的代码片段</p>\n<p>1、点击设置，打开用户代码片段即可开始创建自己的代码片段；</p>\n</blockquote>\n"},{"title":"Vue部分相关的面试题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-07T04:01:56.000Z","password":null,"summary":null,"_content":"\n# Vue部分相关的面试题\n\n## 如何在组件中监听Vuex的数据变化\n\n> 分析:   此题考查Vuex的应用及 Vue内部的监听数据变化的机制  \n\n>**`解答`**:  首先确定 Vuex是为了解决什么问题而出现的 ?  Vuex是为了解决组件间状态共享而出现的一个框架.\n>\n>其中有几个要素 是组成Vuex的关键,  state(状态)  mutations  actions  ,\n>\n>state 表示 需要共享的状态数据\n>\n>mutations  表示 更改 state的方法集合  只能是同步更新 不能写ajax等异步请求\n>\n>actions  如果需要做异步请求  可以在actions中发起 然后提交给 mutations mutation再做同步更新\n\n也就是 state 负责管理状态 ,  mutation负责同步更新状态 action负责 异步获取数据 同提交给mutation\n\n> 所以 组件监听Vuex数据变化 就是 监听 Vuex中state的变化, \n\n**`第一种方案`**  我们可以在组件中通过组件的 watch方法来做, 因为组件可以将state数据映射到 组件的计算属性上,\n\n然后 监听 映射的计算属性即可 代码如下\n\n```js\n// vuex中的state数据\n  state: {\n    count: 0\n  },\n     \n//  A组件中映射 state数据到计算属性\n  computed: {\n    ...mapState(['count'])\n  }\n// A组件监听 count计算属性的变化\n   watch: {\n    count () {\n      // 用本身的数据进行一下计数\n      this.changeCount++\n    }\n  }\n```\n\n![image-20200217103409496](image-20200217103409496.png)\n\n**`第二种方案`**   vuex中store对象本身提供了**`watch`**函数 ,可以利用该函数进行监听\n\n- **watch(fn: Function, callback: Function, options?: Object): Function**\n\n响应式地侦听 `fn` 的返回值，当值改变时调用回调函数。`fn` 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 [`vm.$watch`](https://cn.vuejs.org/v2/api/#vm-watch) 方法的参数。\n\n代码\n\n```js\n  created () {\n    this.$store.watch((state, getters) => {\n      return state.count\n    }, () => {\n      this.changeCount++\n    })\n  }\n```\n\n>以上代码 均在示例有体现\n\n\n\nvue-cli项目 中router  \n\nhistory模式  /地址  => 一定会引起向服务端发请求 ,需要服务器配合,需要服务器做配合, 无论地址怎么变化, 返回都是一个页面,这样页面就不会强制刷新, 开发时  用的脚手架本身支持, 如果上线, 需要ngix 服务器配置,单页应用 无论地址怎么变化 \n\nhash模式    #/地址  => #的变化不会引起 页面的刷新\n\n\n\n\n\n>  脚手架中 可能会频繁遇到环境变量\n\ndev环境    测试环境   预发布环境  生产环境 \n\n每个环境的地址 和域名可能不一样,如果你的项目需要上线,  不需要手动的 根据环境 来切换参数\n\n把一些需要根据环境变化的参数 变成环境变量, 运维会在不同的环境中将 不同的环境变量写入, 此时你的代码 编译之后就是带当时的环境变量的了\n\n## Vue单页面和多页面的混合使用\n\n> 分析: 首先分析,单页面应用和 多页面应用的根本区别 \n>\n> **`解答`**:  单页面即所有的模块统统置于一个html文件之上,切换模块,不会重新对html文件和资源进行再次请求,服务器不会对我们**`换页面`**的动作 产生任何反应, 所以我们感觉不到任何的刷新动作,速度和体验很畅快\n>\n> 多页面应用 即多个html页面 共同的使用, 可以认为一个页面即一个模块,但是不排除 多个单页应用混合到一起的组合情况 ,  多页面切换一定会造成 页面资源的重新加载, 这也就意味着 如果 多页面之间切换,一定会造成很数据的**`重置`**\n>\n> ​\t所以在 Vue的单页面 和多页面混合使用的时候,需要注意, 如果 不论是单页  跳到多页 ,还是多页跳到单页,都会造成页面内容的重置. 多页面我们不用关心,因为重置本就是多页面的特性,但是单页不一样, 很多变量或者数据 可能会因为 重置归零或者重置,所以我们应该 重点检查 单页每个页面的业务 在刷新页面之后, 能否保证业务的连贯性,  这些都可以通过**`导航守卫`**来进行处理, 也就是一进入单页的路由,就检查业务的连贯性.\n\n## vuex怎么合理规范管理数据,及mutations和actions区别\n\n> 解析: 此题考查 vuex中数据的管理和数据结构的设计,还有mutations 和actions的区别\n\n> **`解答`** : 首先要明确一个特别重要的原则, 就是 不是所有的数据都要放在vuex中, 因为vuex有一句名言:假如你并不知道为什么要使用vuex,那就不要使用它 !\n>\n>  那么什么样式的数据需要放在vuex中呢 ? 首先这个数据肯定要被多个组件频繁用到, 如果只是被一个组件 用到, 那完全没有任何必要为了使用vuex和使用vuex\n\n举例:  一个网站用户的昵称,账号,资料,像这种系统级别的信息 随时可能在业务中展示,使用, 如果在组件中存储, 那么要获取N次, 所以**`系统级别的数据`**是需要放置在vuex中的, 那么系统级别数据 也不能随意的放置,为了让数据看着更有层级结构感,可以按照像下面这样设计,  \n\n```json\n{\n    // 系统消息\n    system: {\n        user: {},\n        setting: {}\n    }\n}\n```\n\n> 上面这种结构,一看 便知道我们应该哪里获取系统数据即 设置数据\n\n如果有些业务数据,也需要共享,最好按照模块的具体业务含义分类 , 比如下面\n\n```json\n{\n    // 系统消息\n    system: {\n        user: {},\n        setting: {}\n    },\n    product: {\n        productList: [], // 商品信息列表\n        productOrders: [] // 商品订单啊列表\n    }\n}\n```\n\n> 如上图代码所示,我们很清晰的能够分清楚 每个模块的数据,这样不会导致数据管理的混乱\n\n### mutations和 actions 的区别\n\n> 不同于redux只有一个action, vuex单独拎出了一个mutations,  它认为 更新数据必须是同步的, 也就是只要调用了 提交数据方法, 就会得到一个当前的**`状态快照`**,提交一个mutation就会得到一个**`快照`**\n>\n> 那么如果我们想做 异步请求,怎么做?  这里 vuex提供了专门做异步请求的模块,action, 当然action中也可以做同步操作, 只不过 分工更加明确, 所有的数据操作 不论是同步还是异步 都可以在action中完成, \n>\n> mutation只负责接收状态, 同步完成 **`数据快照`**\n>\n> 所以可以认为 \n>\n> state => 负责存储状态 \n>\n> mutations => 负责同步更新状态\n>\n> actions => 负责获取 处理数据, 提交到mutation进行状态更新\n\n## vuex模块化管理,使用的时候有注意事项\n\n> 分析: 此题考查 当vuex维护的数据越来越复杂的时候, 模块化的解决方案\n>\n> **`解析`**:使用单一的状态树，应用的所有状态都会**`集中在一个比较大的对象`**上面，随着项目需求的不断增加，状态树也会变得越来越臃肿，增加了状态树维护的复杂度,而且代码变得沉长；因此我们需要**`modules(模块化)`**来为我们的状态树**`分隔`**成不同的模块，每个模块拥有自己的state，getters，mutations，actions；而且允许每个module里面嵌套子module；如下：\n>\n> ```\n>  store\n>     ├── index.js          # 我们组装模块并导出 store 的地方\n>     ├── actions.js        # 根级别的 action\n>     ├── mutations.js      # 根级别的 mutation\n>     ├── state.js          # 根级别的 state\n>     └── modules\n>         ├── module1.js   # 模块1的state树\n>         └── module2.js   # 模块2的state树\n> \n> ```\n\n上面的设计中, 每个vuex子模块都可以定义 state/mutations/actions\n\n> 需要注意的是  我们原来使用**`vuex辅助函数`**  mapMutations/mapActions  引入的是 全局的的mutations 和actions , 并且我们vuex子模块  也就是module1,module2 ... 这些模块的aciton /mutation 也注册了全局, \n>\n> 也就是如果 module1 中定义了 updateUser , module2中也定义了 updateUser, 此时, mutation就冲突了\n>\n> 如果重名,就报错了.....\n>\n> 如果不想冲突, 各个模块管理自己的action 和 mutation ,需要 给我们的子模块一个 属性 **`namespaced: true`**\n\n那么 组件中怎么使用子模块的action 和 mutations\n\n```js\n// 你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文\nmethods : {\n    ...mapMutations('A', ['updateUser'])  // 引用A模块的mptations方法 \n}\n```\n\n> 此题具体考查 Vuex虽然是一个公共状态, 但是公共状态还可以切分成若干个子状态模块, 也就是moudels,\n>\n> 解决当我们的状态树过于庞大和复杂时的一种解决方案.  但是笔者认为, 一旦用了vuex, 几乎 就认定该项目是较为复杂的\n\n[参考文档](https://vuex.vuejs.org/zh/guide/modules.html)\n\n## 封装Vue组件的步骤\n\n> 分析: 本题考查 对于Vue组件化开发的熟练程度\n>\n> **`解析`**: 首先明确 组件是本质是什么?  \n>\n> 组件就是一个单位的HTML结构 + 数据逻辑 + 样式的 操作单元 \n>\n> Vue的组件 继承自Vue对象, Vue对象中的所有的属性和方法,组件可自动继承. \n>\n> 组件的要素  template  =>  作为页面的模板结构 \n>\n> script  => 作为数据及逻辑的部分\n>\n> style  => 作为该组件部分的样式部分\n\n要封装一个组件,首先要明确该组件要做的具体业务和需求,  什么样的体验特征, 完成什么样的交互, 处理什么样的数据\n\n> 明确上述要求之后, 着手模板的结构设计及搭建,也就是 常说的html结构部分,  先完成 静态的html结构\n>\n> 结构完成, 着手数据结构的设计及开发, 数据结构一般存储于组件的data属性 或者 vuex 状态共享的数据结构\n>\n> 数据设计完成/ 结构完成  接下来 完成数据和模块的结合 , 利用vuejs中指令和 插值表达式的特性 将静态结构 **`动态化`**\n>\n> 展现的部分完成, 接下来完成**`交互部分`**,即利用 组件的生命周期的钩子函数 和 事件驱动 来完成 逻辑及数据的处理与操作\n\n最后组件完成,进行测试及使用\n\n常用的组件属性 => data/ methods/filters/ components/watch/created/mounted/beforeDestroy/computed/props\n\n常用组件指令: v-if/v-on/v-bind/v-model/v-text/v-once\n\n## Vue中的data是以函数的形式还是对象的形式表示\n\n> 分析: 此题考查 data的存在形式\n\n> **`解析`**: 我们在初步学习Vue实例化的时候写的代码时这个样子\n>\n> ```js\n> new Vue({\n>     el: '#app',\n>     data: {\n>         name: 'hello world'\n>     }\n> })\n> ```\n>\n> 上面代码中的data 是一个对象, 但是我们在开发组件的时候要求data必须是一个带返回值的函数\n\n```js\nexport default {\n    data () {\n        return {\n            name: '张三'\n        }\n    }\n}\n```\n\n> 为什么组件要求必须是带返回值的函数?  因为 我们的组件在实例化的时候, 会直接将data数据作用在视图上, \n>\n> 对组件实例化, 会导致我们组件的data数据进行共享, 好比  现在有两辆新车, 你一踩油门, 不光你的车往前走,另辆车也和你一样往前冲!   这显然不符合我们的程序设计要求, 我们希望组件内部的数据是相互独立的,且互不响应,所以 采用   **`return {}`**  每个组件实例都返回新对象实例的形式,保证每个组件实例的唯一性\n\n## 使用Proxy代理跨域\n\n>分析: 本题考查如何解决跨域问题\n>\n>解析: 解决跨域问题的方式有几种,一种是服务端设置 all-control-origin * , 但这种方式依赖服务端的设置,在前后分离的场景下 ,不太方便\n>\n>还有一种jsonp形式, 可以利用script标签 的特性解决同源策略带来的跨域问题,但这是这种方案对于请求的类型有限制,只能get/post\n>\n>还有一种就可以在开发环境(本地调试)期间,进行代理, 说白了 就是通过 在本地通过nodejs 启动一个微型服务, \n>\n>然后我们先请求我们的微型服务, 微型服务是服务端, 服务端**`代我们`**去请求我们想要的跨域地址, 因为服务端是不受**`同源策略`**的限制的, 具体到开发中,打包工具webpack集成了代理的功能,可以采用配置webpack的方式进行解决, 但是这种仅限于 本地开发期间, 等项目上线时,还是需要另择代理 ngix\n\n以下为webpack配置代理的配置 \n\n```json\n // 代理设置 \nproxy: {\n    '/api': {\n        target: 'http://www.baidu.com/',\n        changeOrigin: true,\n        pathRewrite: {\n            '^/api': ''\n        }\n    }\n}\n```\n\n**`target`**：接口域名；\n\n **`changeOrigin`**： 如果设置为`true`,那么本地会虚拟一个服务端接收你的请求并代你发送该请求；\n\n **`pathRewrite`**：如果接口中是没有api的，那就直接置空（如上）如果接口中有api，就需要写成{‘^/api’:‘/api’}\n\n\n\n真实访问地址  http://www.baidu.com/test \n\n/api/test  =>  /api 就是 表示  http://www.baidu.com  =>webpack 后台 发出的请求(http://www.baidu.com/test )=>  返回结果  => 前端\n\n\n\n反向代理  =>   前端   => 后台 不让你访问 (跨域)\n\n   前端 => webpack后台 (代理)(仅限于本地开发模式)     =>后台\n\n## Vue中的watch如何深度监听某个对象\n\n> 分析: 此题考查Vue的选项watch的应用方式\n>\n> 解析:  watch最基本的用法是 \n>\n> ```js\n> export default {\n>     data () {\n>         return {\n>             name: '张三'\n>         }\n>     },\n>     watch: {\n>         name (newValue, oldValue) {\n>             \n>         }\n>     }\n> }\n> ```\n>\n> 上面代码中: 有个原则监听谁,写谁的名字,然后是对应的执行函数, 第一个参数为最新的改变值,第二个值为上一次改变的值, 注意: 除了监听 data,也可以监听**`计算属性`** 或者一个 函数的计算结果\n>\n> 那怎么深度监听对象 ,两种方式\n>\n> 1. 字符串嵌套方式\n>\n> ```js\n> export default {\n>     data () {\n>         return {\n>            a: {\n>                b: {\n>                    c :'张三'\n>                }\n>            }\n>         }\n>     },\n>     watch: {\n>         \"a.b.c\": function (newValue, oldValue) {\n>             \n>         }\n>     }\n> }\n> ```\n>\n> 2. 启用深度监听方式\n>\n>    ```js\n>    export default {\n>        data () {\n>            return {\n>               a: {\n>                   b: {\n>                       c :'张三'\n>                   }\n>               }\n>            }\n>        },\n>        watch: {\n>            a: {\n>                deep: true // deep 为true  意味着开启了深度监听 a对象里面任何数据变化都会触发handler函数,\n>                handler(){\n>                   // handler是一个固定写法\n>                }\n>            }\n>        }\n>    }\n>    ```\n\n## Vue keep-alive使用\n\n> 分析: 此题考查Vue中组件缓存的使用 \n>\n> 解析:  keep-alive是 Vue提供的一个全局组件, Vue的组件是有销毁机制的,比如条件渲染, 路由跳转时 组件都会经历**`销毁`**, 再次回到页面时,又会回到 **`重生`**, 这一过程保证了生命周期钩子函数各个过程都会在这一生命周期中执行.\n>\n> 但是,我们辛辛苦苦获取的数据 滑动的页面 会因为组件的销毁 重生 而 **`归零`**,这影响了交互的体验, 所以 keep-alvie出现了, 可以帮助我们缓存想要缓存的组件实例, 只用用keep-alive **`包裹`**你想要缓存的组件实例, 这个时候, 组件创建之后,就不会再进行 销毁, 组件数据和状态得以保存\n>\n> 但是,没有了销毁,也就失去了重生的环节, 我们失去了 原有的钩子函数, 所以keep-alive包裹的组件 都获取了另外两个事件 \n>\n> 唤醒 activited 重新唤醒休眠组件实例时 执行\n>\n> 休眠 unactiived  组件实例进入休眠状态时执行\n\n但是我们不能缓存所有的组件实例, 如果是针对 组件容器 router-view 这个组件进行的缓存, 一般的策略是在路由的元信息 meta对象中设置是否缓存的标记,  然后根据标记决定是否进行缓存\n\n```js\n  <div id=\"app\">\n    <keep-alive>\n      <!-- 里面是当需要缓存时 -->\n      <router-view  v-if=\"$route.meta.isAlive\" />\n    </keep-alive>\n     <!-- 外面是不需要缓存时 -->\n    <router-view  v-if=\"!$route.meta.isAlive\" />\n  </div>\n```\n\n还有需要注意的问题是:  被缓存的组件中如果还有子组件, 那么子组件也会一并拥有 激活和唤醒事件,并且这些事件会在同时执行\n\n## vue的双向数据绑定原理是什么\n\n> 分析 :此题考查 Vue的MVVM原理\n>\n> **`解答`**:  Vue的双向绑定原理其实就是MVVM的实现原理, Vuejs官网已经说明, 实际就是通过 Object.defineProperty方法 完成了对于Vue实例中数据的 **`劫持`**, 通过对于 data中数据 set的监听,\n>\n> 然后通过**`观察者模式`**, 通知 对应的绑定节点 进行节点数据更新, 完成数据驱动视图的更新\n\n我们实现的MVVM是一个简易版本\n\n我们并没有做虚拟DOM, 虚拟DOM的问题\n\n虚拟DOM,并不是真正的DOM, 数据驱动视图, 数据变化  =>  数据 切换成 虚拟DOM, \n\n新的虚拟DOM 会和 旧的虚拟DOM 进行 diff比较算法, 比较 得出 需要更新的结果, 反映到dom上\n\ndiff比较 =>  其实就是 用一种时间时间复杂度比较低的方式去更新\n\n新节点    和 旧节点 完成 比较 ,时间复杂度 O(n^n^n), \n\ndiff 比较算法 时间复杂度 是 O(n)  =>   diff 比较算法 只比较同级的节点, 如果同级节点不一致, 就不再比较子级了,\n\n性能比较高的算法.\n\n> [虚拟dom和diff比较](https://www.jianshu.com/p/af0b398602bc)    此问题 仅仅存于面试\n\nVue/React  不推荐 移动节点, 不推荐改变节点的名称, \n\n旧节点\n\n> 同理, 通过对于节点的表单值改变事件的监听,  执行对于数据的修改\n\n简单概述 : 通过Object.defineProperty 完成对于数据的劫持, 通过观察者模式, 完成对于节点的数据更新\n\n\n\n## 页面刷新了之后vuex中的数据消失怎么解决\n\n>分析:此题考查 如果将vuex数据进行本地持久化\n>\n>**`解析`**: vuex数据位于内存, 页面的刷新重置会导致数据的**`归零`**,也就是所谓的消失,  本地持久化可以解决这个问题.本地持久化用到的技术也就是 本次存储 sesstionStorage 或者 localStorage ,  \n>\n>如果需要保持的更长久 ,浏览器关掉 再打开依然存有数据,需要使用后者 \n>\n>实施方案:  state的持久化 也就是分别需要在 state数据初始化 /更新 的时候 进行读取和设置本地存储操作\n>\n>代码如下 \n>\n>```js\n>export default new Vuex.store({\n>    state: {\n>        user: localStorge.getItem('user')  // 初始化时读取 本地存储\n>    },\n>    mutations: {\n>        updateUser (state, payload) {\n>            state.user = payload.user\n>            localStoregae.setItem('user',payload.user) // 数据更新时 设置本地存储\n>        }\n>    }\n>})\n>```\n>\n>\n\n## vue做服务端渲染\n\n> 分析: 为什么要做服务端渲染, 首先要明白 服务端渲染解决什么问题\n>\n> **`解析`**: vuejs 官网说的很明白, 要做服务端渲染首先必须是有对应的需求,即对 实时到达时间(页面访问时间)的绝对需求.  如果只是简单的一个管理系统, 区区几百毫秒的优化 显得十分小题大做.\n>\n> 服务端渲染这里 有一个成熟优秀的框架 nuxt.js , 正如next.js对于react,nuxt是vue服务端渲染的优秀解决方案\n\n我们几乎可以像原来一样的去开发组件,页面, nuxt帮我们集成了原有项目的插件,模块, 提供了预加载数据事件\n\nasyncData, 在客户端实现对于服务端内容的**`完美接管`**\n\n只不过 这里我们的路由开发方式,需要遵循nuxt.js制定的特殊规范,比如,动态 路由需要 **`下划线前缀`**, 嵌套路由需要\n\n同名组件的文件下下建立组件,并在 同名组件中 加入 nuxt-child 作为 容器  ....\n\n> nuxt的出现可以让渲染内容完全服务端化,解决seo不够友好, 首屏渲染速度不够迅速的问题,\n>\n> 但是这里需要注意: 并不是所有页面都需要服务端渲染, 因为服务端渲染比重多大 对于服务器的访问处理能力 要求也会急剧增大\n\n[nuxt.js官网](https://zh.nuxtjs.org/)\n\n## 双向数据绑定和vuex冲突解决方案\n\n> 分析: 此题考查 当Vuex数据想要进行逆向操作,也就是 双向数据流向的解决方案\n>\n> **`解析`**:   vuex的数据对于组件来说,默认是不可改的, 但是如果我们就是想改, 可以利用 computed计算属性的另一个方法 , 我们知道计算属性 默认是数据的getter实现, 但是我们可以采用 对于 计算属性 同时get/set的实现,\n>\n> 双向数据流 中 当对 计算属性设置时 ,就可以通过 store对象进行再次的mutations提交 \n>\n> 具体代码如下\n>\n> ```js\n> import Vue from 'vue'\n> import Vuex from 'vuex'\n> \n> Vue.use(Vuex)\n> \n> export default new Vuex.Store({\n> state: {\n>  count: 0,\n>  value: '' // 定义value数据 作为vuex状态数据\n> },\n> mutations: {\n>  addCount (state) {\n>    state.count++\n>  },\n>    // 定义mutations方法 作为 提交mutations的方法\n>  updateValue (state, payload) {\n>    state.value = payload.value\n>  }\n> },\n> actions: {\n> },\n> modules: {\n> }\n> })\n> \n> ```\n>\n> ```vue\n> <template>\n> <div>\n>    <div>vuex的双向数据流</div>\n>    <input type=\"text\" v-model=\"value\">\n>    <div>Vuex数据属性: {{value }}</div>\n> </div>\n> </template>\n> \n> <script>\n> import { mapMutations } from 'vuex'\n> export default {\n> methods: {\n>  ...mapMutations(['updateValue'])\n> },\n>     // 计算属性的get/set\n> computed: {\n>  value: {\n>    get () {\n>        // 获取state公共数据\n>      return this.$store.state.value\n>    },\n>     // 通过对 计算属性的set监听 将 数据提交mutations\n>      // 当input中数据变化时 就会调用set中的方法  value就是最新值\n>    set (value) {\n>      this.updateValue({ value: value })  // 在set中提交mutations\n>    }\n>  }\n> }\n> }\n> </script>\n> \n> <style>\n> \n> </style>\n> \n> ```\n\n \n\n## vue-router传参\n\n> 分析:考查vue-router的传值方式\n>\n> **`解析`**  vue-router 传值 可以通过 地址传值\n>\n> 最简单的就是url传值, url传值又两种, params 和 query参数传值\n>\n> params传值 是指的动态路由传值 \n>\n> ```vue\n> {  path: '/user/:id' }  // 定义一个路由参数\n> <router-link to=\"/user/123\"></router-link>  // 传值\n> this.$route.params.id   // 取值\n> \n> ```\n>\n> query传值,指通过?后面的拼接参数传值\n>\n> ```vue\n> \n> <router-link to=\"/user?id=123\"></router-link>  // 传值\n> this.$route.query.id   // 取值\n> ```\n\n## 前端鉴权一般思路\n\n>分析: 考查前后分离的鉴权思路\n\n**`解析`**: 首先要明白 为什么要在前端鉴权? 因为传统项目都是在后端鉴权, 然后通过进行拦截 跳转 对应操作\n\n因为 我们做的并不是传统的项目,而是前后分离项目,也就是前端项目和后端服务进行了**`剥离`**, 后端没有办法用session来存储你任意一个前端项目域名下的身份信息, 所以jwt 鉴权模式应运而生. \n\n​    也就是后端不再提供会话的身份存储,而是通过一个鉴权接口将用户的身份,登录时间,请求端口,协议头..等等信息 组装成一个加密的串 返给前端请求,  前端拿到了这个串,就可以认为自己登录成功\n\n那么这个**`加密串`**就成了 前端用户是否登录的成功标志, 这就是我们的token , 那么在接下来的接口请求中,我们几乎都要携带这个加密串,因为它是**`唯一`**能**`证明我们身份`**的信息.\n\n为了方便,我们会一般在请求工具 axios(举例)的拦截器中**`统一注入token`**, 减少代码的重复\n\ntoken 同时具有时效性,我们也需要在此时对token过期进行处理,一旦出现过期的请求码, 就需要进行 换取新token 或者重新登录的解决方案\n\n除此之外,我们还需要依据**`有无加密串`** 在前端对于某些页面的访问进行限制, 这个会用到我们的Vue-Router中的导航守卫.","source":"_posts/vue相关疑难.md","raw":"---\ntitle: Vue部分相关的面试题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-7 12:01:56\npassword:\nsummary: \ntags:\n- Vue\ncategories:\n- 前端\n---\n\n# Vue部分相关的面试题\n\n## 如何在组件中监听Vuex的数据变化\n\n> 分析:   此题考查Vuex的应用及 Vue内部的监听数据变化的机制  \n\n>**`解答`**:  首先确定 Vuex是为了解决什么问题而出现的 ?  Vuex是为了解决组件间状态共享而出现的一个框架.\n>\n>其中有几个要素 是组成Vuex的关键,  state(状态)  mutations  actions  ,\n>\n>state 表示 需要共享的状态数据\n>\n>mutations  表示 更改 state的方法集合  只能是同步更新 不能写ajax等异步请求\n>\n>actions  如果需要做异步请求  可以在actions中发起 然后提交给 mutations mutation再做同步更新\n\n也就是 state 负责管理状态 ,  mutation负责同步更新状态 action负责 异步获取数据 同提交给mutation\n\n> 所以 组件监听Vuex数据变化 就是 监听 Vuex中state的变化, \n\n**`第一种方案`**  我们可以在组件中通过组件的 watch方法来做, 因为组件可以将state数据映射到 组件的计算属性上,\n\n然后 监听 映射的计算属性即可 代码如下\n\n```js\n// vuex中的state数据\n  state: {\n    count: 0\n  },\n     \n//  A组件中映射 state数据到计算属性\n  computed: {\n    ...mapState(['count'])\n  }\n// A组件监听 count计算属性的变化\n   watch: {\n    count () {\n      // 用本身的数据进行一下计数\n      this.changeCount++\n    }\n  }\n```\n\n![image-20200217103409496](image-20200217103409496.png)\n\n**`第二种方案`**   vuex中store对象本身提供了**`watch`**函数 ,可以利用该函数进行监听\n\n- **watch(fn: Function, callback: Function, options?: Object): Function**\n\n响应式地侦听 `fn` 的返回值，当值改变时调用回调函数。`fn` 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 [`vm.$watch`](https://cn.vuejs.org/v2/api/#vm-watch) 方法的参数。\n\n代码\n\n```js\n  created () {\n    this.$store.watch((state, getters) => {\n      return state.count\n    }, () => {\n      this.changeCount++\n    })\n  }\n```\n\n>以上代码 均在示例有体现\n\n\n\nvue-cli项目 中router  \n\nhistory模式  /地址  => 一定会引起向服务端发请求 ,需要服务器配合,需要服务器做配合, 无论地址怎么变化, 返回都是一个页面,这样页面就不会强制刷新, 开发时  用的脚手架本身支持, 如果上线, 需要ngix 服务器配置,单页应用 无论地址怎么变化 \n\nhash模式    #/地址  => #的变化不会引起 页面的刷新\n\n\n\n\n\n>  脚手架中 可能会频繁遇到环境变量\n\ndev环境    测试环境   预发布环境  生产环境 \n\n每个环境的地址 和域名可能不一样,如果你的项目需要上线,  不需要手动的 根据环境 来切换参数\n\n把一些需要根据环境变化的参数 变成环境变量, 运维会在不同的环境中将 不同的环境变量写入, 此时你的代码 编译之后就是带当时的环境变量的了\n\n## Vue单页面和多页面的混合使用\n\n> 分析: 首先分析,单页面应用和 多页面应用的根本区别 \n>\n> **`解答`**:  单页面即所有的模块统统置于一个html文件之上,切换模块,不会重新对html文件和资源进行再次请求,服务器不会对我们**`换页面`**的动作 产生任何反应, 所以我们感觉不到任何的刷新动作,速度和体验很畅快\n>\n> 多页面应用 即多个html页面 共同的使用, 可以认为一个页面即一个模块,但是不排除 多个单页应用混合到一起的组合情况 ,  多页面切换一定会造成 页面资源的重新加载, 这也就意味着 如果 多页面之间切换,一定会造成很数据的**`重置`**\n>\n> ​\t所以在 Vue的单页面 和多页面混合使用的时候,需要注意, 如果 不论是单页  跳到多页 ,还是多页跳到单页,都会造成页面内容的重置. 多页面我们不用关心,因为重置本就是多页面的特性,但是单页不一样, 很多变量或者数据 可能会因为 重置归零或者重置,所以我们应该 重点检查 单页每个页面的业务 在刷新页面之后, 能否保证业务的连贯性,  这些都可以通过**`导航守卫`**来进行处理, 也就是一进入单页的路由,就检查业务的连贯性.\n\n## vuex怎么合理规范管理数据,及mutations和actions区别\n\n> 解析: 此题考查 vuex中数据的管理和数据结构的设计,还有mutations 和actions的区别\n\n> **`解答`** : 首先要明确一个特别重要的原则, 就是 不是所有的数据都要放在vuex中, 因为vuex有一句名言:假如你并不知道为什么要使用vuex,那就不要使用它 !\n>\n>  那么什么样式的数据需要放在vuex中呢 ? 首先这个数据肯定要被多个组件频繁用到, 如果只是被一个组件 用到, 那完全没有任何必要为了使用vuex和使用vuex\n\n举例:  一个网站用户的昵称,账号,资料,像这种系统级别的信息 随时可能在业务中展示,使用, 如果在组件中存储, 那么要获取N次, 所以**`系统级别的数据`**是需要放置在vuex中的, 那么系统级别数据 也不能随意的放置,为了让数据看着更有层级结构感,可以按照像下面这样设计,  \n\n```json\n{\n    // 系统消息\n    system: {\n        user: {},\n        setting: {}\n    }\n}\n```\n\n> 上面这种结构,一看 便知道我们应该哪里获取系统数据即 设置数据\n\n如果有些业务数据,也需要共享,最好按照模块的具体业务含义分类 , 比如下面\n\n```json\n{\n    // 系统消息\n    system: {\n        user: {},\n        setting: {}\n    },\n    product: {\n        productList: [], // 商品信息列表\n        productOrders: [] // 商品订单啊列表\n    }\n}\n```\n\n> 如上图代码所示,我们很清晰的能够分清楚 每个模块的数据,这样不会导致数据管理的混乱\n\n### mutations和 actions 的区别\n\n> 不同于redux只有一个action, vuex单独拎出了一个mutations,  它认为 更新数据必须是同步的, 也就是只要调用了 提交数据方法, 就会得到一个当前的**`状态快照`**,提交一个mutation就会得到一个**`快照`**\n>\n> 那么如果我们想做 异步请求,怎么做?  这里 vuex提供了专门做异步请求的模块,action, 当然action中也可以做同步操作, 只不过 分工更加明确, 所有的数据操作 不论是同步还是异步 都可以在action中完成, \n>\n> mutation只负责接收状态, 同步完成 **`数据快照`**\n>\n> 所以可以认为 \n>\n> state => 负责存储状态 \n>\n> mutations => 负责同步更新状态\n>\n> actions => 负责获取 处理数据, 提交到mutation进行状态更新\n\n## vuex模块化管理,使用的时候有注意事项\n\n> 分析: 此题考查 当vuex维护的数据越来越复杂的时候, 模块化的解决方案\n>\n> **`解析`**:使用单一的状态树，应用的所有状态都会**`集中在一个比较大的对象`**上面，随着项目需求的不断增加，状态树也会变得越来越臃肿，增加了状态树维护的复杂度,而且代码变得沉长；因此我们需要**`modules(模块化)`**来为我们的状态树**`分隔`**成不同的模块，每个模块拥有自己的state，getters，mutations，actions；而且允许每个module里面嵌套子module；如下：\n>\n> ```\n>  store\n>     ├── index.js          # 我们组装模块并导出 store 的地方\n>     ├── actions.js        # 根级别的 action\n>     ├── mutations.js      # 根级别的 mutation\n>     ├── state.js          # 根级别的 state\n>     └── modules\n>         ├── module1.js   # 模块1的state树\n>         └── module2.js   # 模块2的state树\n> \n> ```\n\n上面的设计中, 每个vuex子模块都可以定义 state/mutations/actions\n\n> 需要注意的是  我们原来使用**`vuex辅助函数`**  mapMutations/mapActions  引入的是 全局的的mutations 和actions , 并且我们vuex子模块  也就是module1,module2 ... 这些模块的aciton /mutation 也注册了全局, \n>\n> 也就是如果 module1 中定义了 updateUser , module2中也定义了 updateUser, 此时, mutation就冲突了\n>\n> 如果重名,就报错了.....\n>\n> 如果不想冲突, 各个模块管理自己的action 和 mutation ,需要 给我们的子模块一个 属性 **`namespaced: true`**\n\n那么 组件中怎么使用子模块的action 和 mutations\n\n```js\n// 你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文\nmethods : {\n    ...mapMutations('A', ['updateUser'])  // 引用A模块的mptations方法 \n}\n```\n\n> 此题具体考查 Vuex虽然是一个公共状态, 但是公共状态还可以切分成若干个子状态模块, 也就是moudels,\n>\n> 解决当我们的状态树过于庞大和复杂时的一种解决方案.  但是笔者认为, 一旦用了vuex, 几乎 就认定该项目是较为复杂的\n\n[参考文档](https://vuex.vuejs.org/zh/guide/modules.html)\n\n## 封装Vue组件的步骤\n\n> 分析: 本题考查 对于Vue组件化开发的熟练程度\n>\n> **`解析`**: 首先明确 组件是本质是什么?  \n>\n> 组件就是一个单位的HTML结构 + 数据逻辑 + 样式的 操作单元 \n>\n> Vue的组件 继承自Vue对象, Vue对象中的所有的属性和方法,组件可自动继承. \n>\n> 组件的要素  template  =>  作为页面的模板结构 \n>\n> script  => 作为数据及逻辑的部分\n>\n> style  => 作为该组件部分的样式部分\n\n要封装一个组件,首先要明确该组件要做的具体业务和需求,  什么样的体验特征, 完成什么样的交互, 处理什么样的数据\n\n> 明确上述要求之后, 着手模板的结构设计及搭建,也就是 常说的html结构部分,  先完成 静态的html结构\n>\n> 结构完成, 着手数据结构的设计及开发, 数据结构一般存储于组件的data属性 或者 vuex 状态共享的数据结构\n>\n> 数据设计完成/ 结构完成  接下来 完成数据和模块的结合 , 利用vuejs中指令和 插值表达式的特性 将静态结构 **`动态化`**\n>\n> 展现的部分完成, 接下来完成**`交互部分`**,即利用 组件的生命周期的钩子函数 和 事件驱动 来完成 逻辑及数据的处理与操作\n\n最后组件完成,进行测试及使用\n\n常用的组件属性 => data/ methods/filters/ components/watch/created/mounted/beforeDestroy/computed/props\n\n常用组件指令: v-if/v-on/v-bind/v-model/v-text/v-once\n\n## Vue中的data是以函数的形式还是对象的形式表示\n\n> 分析: 此题考查 data的存在形式\n\n> **`解析`**: 我们在初步学习Vue实例化的时候写的代码时这个样子\n>\n> ```js\n> new Vue({\n>     el: '#app',\n>     data: {\n>         name: 'hello world'\n>     }\n> })\n> ```\n>\n> 上面代码中的data 是一个对象, 但是我们在开发组件的时候要求data必须是一个带返回值的函数\n\n```js\nexport default {\n    data () {\n        return {\n            name: '张三'\n        }\n    }\n}\n```\n\n> 为什么组件要求必须是带返回值的函数?  因为 我们的组件在实例化的时候, 会直接将data数据作用在视图上, \n>\n> 对组件实例化, 会导致我们组件的data数据进行共享, 好比  现在有两辆新车, 你一踩油门, 不光你的车往前走,另辆车也和你一样往前冲!   这显然不符合我们的程序设计要求, 我们希望组件内部的数据是相互独立的,且互不响应,所以 采用   **`return {}`**  每个组件实例都返回新对象实例的形式,保证每个组件实例的唯一性\n\n## 使用Proxy代理跨域\n\n>分析: 本题考查如何解决跨域问题\n>\n>解析: 解决跨域问题的方式有几种,一种是服务端设置 all-control-origin * , 但这种方式依赖服务端的设置,在前后分离的场景下 ,不太方便\n>\n>还有一种jsonp形式, 可以利用script标签 的特性解决同源策略带来的跨域问题,但这是这种方案对于请求的类型有限制,只能get/post\n>\n>还有一种就可以在开发环境(本地调试)期间,进行代理, 说白了 就是通过 在本地通过nodejs 启动一个微型服务, \n>\n>然后我们先请求我们的微型服务, 微型服务是服务端, 服务端**`代我们`**去请求我们想要的跨域地址, 因为服务端是不受**`同源策略`**的限制的, 具体到开发中,打包工具webpack集成了代理的功能,可以采用配置webpack的方式进行解决, 但是这种仅限于 本地开发期间, 等项目上线时,还是需要另择代理 ngix\n\n以下为webpack配置代理的配置 \n\n```json\n // 代理设置 \nproxy: {\n    '/api': {\n        target: 'http://www.baidu.com/',\n        changeOrigin: true,\n        pathRewrite: {\n            '^/api': ''\n        }\n    }\n}\n```\n\n**`target`**：接口域名；\n\n **`changeOrigin`**： 如果设置为`true`,那么本地会虚拟一个服务端接收你的请求并代你发送该请求；\n\n **`pathRewrite`**：如果接口中是没有api的，那就直接置空（如上）如果接口中有api，就需要写成{‘^/api’:‘/api’}\n\n\n\n真实访问地址  http://www.baidu.com/test \n\n/api/test  =>  /api 就是 表示  http://www.baidu.com  =>webpack 后台 发出的请求(http://www.baidu.com/test )=>  返回结果  => 前端\n\n\n\n反向代理  =>   前端   => 后台 不让你访问 (跨域)\n\n   前端 => webpack后台 (代理)(仅限于本地开发模式)     =>后台\n\n## Vue中的watch如何深度监听某个对象\n\n> 分析: 此题考查Vue的选项watch的应用方式\n>\n> 解析:  watch最基本的用法是 \n>\n> ```js\n> export default {\n>     data () {\n>         return {\n>             name: '张三'\n>         }\n>     },\n>     watch: {\n>         name (newValue, oldValue) {\n>             \n>         }\n>     }\n> }\n> ```\n>\n> 上面代码中: 有个原则监听谁,写谁的名字,然后是对应的执行函数, 第一个参数为最新的改变值,第二个值为上一次改变的值, 注意: 除了监听 data,也可以监听**`计算属性`** 或者一个 函数的计算结果\n>\n> 那怎么深度监听对象 ,两种方式\n>\n> 1. 字符串嵌套方式\n>\n> ```js\n> export default {\n>     data () {\n>         return {\n>            a: {\n>                b: {\n>                    c :'张三'\n>                }\n>            }\n>         }\n>     },\n>     watch: {\n>         \"a.b.c\": function (newValue, oldValue) {\n>             \n>         }\n>     }\n> }\n> ```\n>\n> 2. 启用深度监听方式\n>\n>    ```js\n>    export default {\n>        data () {\n>            return {\n>               a: {\n>                   b: {\n>                       c :'张三'\n>                   }\n>               }\n>            }\n>        },\n>        watch: {\n>            a: {\n>                deep: true // deep 为true  意味着开启了深度监听 a对象里面任何数据变化都会触发handler函数,\n>                handler(){\n>                   // handler是一个固定写法\n>                }\n>            }\n>        }\n>    }\n>    ```\n\n## Vue keep-alive使用\n\n> 分析: 此题考查Vue中组件缓存的使用 \n>\n> 解析:  keep-alive是 Vue提供的一个全局组件, Vue的组件是有销毁机制的,比如条件渲染, 路由跳转时 组件都会经历**`销毁`**, 再次回到页面时,又会回到 **`重生`**, 这一过程保证了生命周期钩子函数各个过程都会在这一生命周期中执行.\n>\n> 但是,我们辛辛苦苦获取的数据 滑动的页面 会因为组件的销毁 重生 而 **`归零`**,这影响了交互的体验, 所以 keep-alvie出现了, 可以帮助我们缓存想要缓存的组件实例, 只用用keep-alive **`包裹`**你想要缓存的组件实例, 这个时候, 组件创建之后,就不会再进行 销毁, 组件数据和状态得以保存\n>\n> 但是,没有了销毁,也就失去了重生的环节, 我们失去了 原有的钩子函数, 所以keep-alive包裹的组件 都获取了另外两个事件 \n>\n> 唤醒 activited 重新唤醒休眠组件实例时 执行\n>\n> 休眠 unactiived  组件实例进入休眠状态时执行\n\n但是我们不能缓存所有的组件实例, 如果是针对 组件容器 router-view 这个组件进行的缓存, 一般的策略是在路由的元信息 meta对象中设置是否缓存的标记,  然后根据标记决定是否进行缓存\n\n```js\n  <div id=\"app\">\n    <keep-alive>\n      <!-- 里面是当需要缓存时 -->\n      <router-view  v-if=\"$route.meta.isAlive\" />\n    </keep-alive>\n     <!-- 外面是不需要缓存时 -->\n    <router-view  v-if=\"!$route.meta.isAlive\" />\n  </div>\n```\n\n还有需要注意的问题是:  被缓存的组件中如果还有子组件, 那么子组件也会一并拥有 激活和唤醒事件,并且这些事件会在同时执行\n\n## vue的双向数据绑定原理是什么\n\n> 分析 :此题考查 Vue的MVVM原理\n>\n> **`解答`**:  Vue的双向绑定原理其实就是MVVM的实现原理, Vuejs官网已经说明, 实际就是通过 Object.defineProperty方法 完成了对于Vue实例中数据的 **`劫持`**, 通过对于 data中数据 set的监听,\n>\n> 然后通过**`观察者模式`**, 通知 对应的绑定节点 进行节点数据更新, 完成数据驱动视图的更新\n\n我们实现的MVVM是一个简易版本\n\n我们并没有做虚拟DOM, 虚拟DOM的问题\n\n虚拟DOM,并不是真正的DOM, 数据驱动视图, 数据变化  =>  数据 切换成 虚拟DOM, \n\n新的虚拟DOM 会和 旧的虚拟DOM 进行 diff比较算法, 比较 得出 需要更新的结果, 反映到dom上\n\ndiff比较 =>  其实就是 用一种时间时间复杂度比较低的方式去更新\n\n新节点    和 旧节点 完成 比较 ,时间复杂度 O(n^n^n), \n\ndiff 比较算法 时间复杂度 是 O(n)  =>   diff 比较算法 只比较同级的节点, 如果同级节点不一致, 就不再比较子级了,\n\n性能比较高的算法.\n\n> [虚拟dom和diff比较](https://www.jianshu.com/p/af0b398602bc)    此问题 仅仅存于面试\n\nVue/React  不推荐 移动节点, 不推荐改变节点的名称, \n\n旧节点\n\n> 同理, 通过对于节点的表单值改变事件的监听,  执行对于数据的修改\n\n简单概述 : 通过Object.defineProperty 完成对于数据的劫持, 通过观察者模式, 完成对于节点的数据更新\n\n\n\n## 页面刷新了之后vuex中的数据消失怎么解决\n\n>分析:此题考查 如果将vuex数据进行本地持久化\n>\n>**`解析`**: vuex数据位于内存, 页面的刷新重置会导致数据的**`归零`**,也就是所谓的消失,  本地持久化可以解决这个问题.本地持久化用到的技术也就是 本次存储 sesstionStorage 或者 localStorage ,  \n>\n>如果需要保持的更长久 ,浏览器关掉 再打开依然存有数据,需要使用后者 \n>\n>实施方案:  state的持久化 也就是分别需要在 state数据初始化 /更新 的时候 进行读取和设置本地存储操作\n>\n>代码如下 \n>\n>```js\n>export default new Vuex.store({\n>    state: {\n>        user: localStorge.getItem('user')  // 初始化时读取 本地存储\n>    },\n>    mutations: {\n>        updateUser (state, payload) {\n>            state.user = payload.user\n>            localStoregae.setItem('user',payload.user) // 数据更新时 设置本地存储\n>        }\n>    }\n>})\n>```\n>\n>\n\n## vue做服务端渲染\n\n> 分析: 为什么要做服务端渲染, 首先要明白 服务端渲染解决什么问题\n>\n> **`解析`**: vuejs 官网说的很明白, 要做服务端渲染首先必须是有对应的需求,即对 实时到达时间(页面访问时间)的绝对需求.  如果只是简单的一个管理系统, 区区几百毫秒的优化 显得十分小题大做.\n>\n> 服务端渲染这里 有一个成熟优秀的框架 nuxt.js , 正如next.js对于react,nuxt是vue服务端渲染的优秀解决方案\n\n我们几乎可以像原来一样的去开发组件,页面, nuxt帮我们集成了原有项目的插件,模块, 提供了预加载数据事件\n\nasyncData, 在客户端实现对于服务端内容的**`完美接管`**\n\n只不过 这里我们的路由开发方式,需要遵循nuxt.js制定的特殊规范,比如,动态 路由需要 **`下划线前缀`**, 嵌套路由需要\n\n同名组件的文件下下建立组件,并在 同名组件中 加入 nuxt-child 作为 容器  ....\n\n> nuxt的出现可以让渲染内容完全服务端化,解决seo不够友好, 首屏渲染速度不够迅速的问题,\n>\n> 但是这里需要注意: 并不是所有页面都需要服务端渲染, 因为服务端渲染比重多大 对于服务器的访问处理能力 要求也会急剧增大\n\n[nuxt.js官网](https://zh.nuxtjs.org/)\n\n## 双向数据绑定和vuex冲突解决方案\n\n> 分析: 此题考查 当Vuex数据想要进行逆向操作,也就是 双向数据流向的解决方案\n>\n> **`解析`**:   vuex的数据对于组件来说,默认是不可改的, 但是如果我们就是想改, 可以利用 computed计算属性的另一个方法 , 我们知道计算属性 默认是数据的getter实现, 但是我们可以采用 对于 计算属性 同时get/set的实现,\n>\n> 双向数据流 中 当对 计算属性设置时 ,就可以通过 store对象进行再次的mutations提交 \n>\n> 具体代码如下\n>\n> ```js\n> import Vue from 'vue'\n> import Vuex from 'vuex'\n> \n> Vue.use(Vuex)\n> \n> export default new Vuex.Store({\n> state: {\n>  count: 0,\n>  value: '' // 定义value数据 作为vuex状态数据\n> },\n> mutations: {\n>  addCount (state) {\n>    state.count++\n>  },\n>    // 定义mutations方法 作为 提交mutations的方法\n>  updateValue (state, payload) {\n>    state.value = payload.value\n>  }\n> },\n> actions: {\n> },\n> modules: {\n> }\n> })\n> \n> ```\n>\n> ```vue\n> <template>\n> <div>\n>    <div>vuex的双向数据流</div>\n>    <input type=\"text\" v-model=\"value\">\n>    <div>Vuex数据属性: {{value }}</div>\n> </div>\n> </template>\n> \n> <script>\n> import { mapMutations } from 'vuex'\n> export default {\n> methods: {\n>  ...mapMutations(['updateValue'])\n> },\n>     // 计算属性的get/set\n> computed: {\n>  value: {\n>    get () {\n>        // 获取state公共数据\n>      return this.$store.state.value\n>    },\n>     // 通过对 计算属性的set监听 将 数据提交mutations\n>      // 当input中数据变化时 就会调用set中的方法  value就是最新值\n>    set (value) {\n>      this.updateValue({ value: value })  // 在set中提交mutations\n>    }\n>  }\n> }\n> }\n> </script>\n> \n> <style>\n> \n> </style>\n> \n> ```\n\n \n\n## vue-router传参\n\n> 分析:考查vue-router的传值方式\n>\n> **`解析`**  vue-router 传值 可以通过 地址传值\n>\n> 最简单的就是url传值, url传值又两种, params 和 query参数传值\n>\n> params传值 是指的动态路由传值 \n>\n> ```vue\n> {  path: '/user/:id' }  // 定义一个路由参数\n> <router-link to=\"/user/123\"></router-link>  // 传值\n> this.$route.params.id   // 取值\n> \n> ```\n>\n> query传值,指通过?后面的拼接参数传值\n>\n> ```vue\n> \n> <router-link to=\"/user?id=123\"></router-link>  // 传值\n> this.$route.query.id   // 取值\n> ```\n\n## 前端鉴权一般思路\n\n>分析: 考查前后分离的鉴权思路\n\n**`解析`**: 首先要明白 为什么要在前端鉴权? 因为传统项目都是在后端鉴权, 然后通过进行拦截 跳转 对应操作\n\n因为 我们做的并不是传统的项目,而是前后分离项目,也就是前端项目和后端服务进行了**`剥离`**, 后端没有办法用session来存储你任意一个前端项目域名下的身份信息, 所以jwt 鉴权模式应运而生. \n\n​    也就是后端不再提供会话的身份存储,而是通过一个鉴权接口将用户的身份,登录时间,请求端口,协议头..等等信息 组装成一个加密的串 返给前端请求,  前端拿到了这个串,就可以认为自己登录成功\n\n那么这个**`加密串`**就成了 前端用户是否登录的成功标志, 这就是我们的token , 那么在接下来的接口请求中,我们几乎都要携带这个加密串,因为它是**`唯一`**能**`证明我们身份`**的信息.\n\n为了方便,我们会一般在请求工具 axios(举例)的拦截器中**`统一注入token`**, 减少代码的重复\n\ntoken 同时具有时效性,我们也需要在此时对token过期进行处理,一旦出现过期的请求码, 就需要进行 换取新token 或者重新登录的解决方案\n\n除此之外,我们还需要依据**`有无加密串`** 在前端对于某些页面的访问进行限制, 这个会用到我们的Vue-Router中的导航守卫.","slug":"vue相关疑难","published":1,"updated":"2020-04-09T17:56:05.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkew0018wcq4zg1lbzxs","content":"<h1 id=\"Vue部分相关的面试题\"><a href=\"#Vue部分相关的面试题\" class=\"headerlink\" title=\"Vue部分相关的面试题\"></a>Vue部分相关的面试题</h1><h2 id=\"如何在组件中监听Vuex的数据变化\"><a href=\"#如何在组件中监听Vuex的数据变化\" class=\"headerlink\" title=\"如何在组件中监听Vuex的数据变化\"></a>如何在组件中监听Vuex的数据变化</h2><blockquote>\n<p>分析:   此题考查Vuex的应用及 Vue内部的监听数据变化的机制  </p>\n</blockquote>\n<blockquote>\n<p><strong><code>解答</code></strong>:  首先确定 Vuex是为了解决什么问题而出现的 ?  Vuex是为了解决组件间状态共享而出现的一个框架.</p>\n<p>其中有几个要素 是组成Vuex的关键,  state(状态)  mutations  actions  ,</p>\n<p>state 表示 需要共享的状态数据</p>\n<p>mutations  表示 更改 state的方法集合  只能是同步更新 不能写ajax等异步请求</p>\n<p>actions  如果需要做异步请求  可以在actions中发起 然后提交给 mutations mutation再做同步更新</p>\n</blockquote>\n<p>也就是 state 负责管理状态 ,  mutation负责同步更新状态 action负责 异步获取数据 同提交给mutation</p>\n<blockquote>\n<p>所以 组件监听Vuex数据变化 就是 监听 Vuex中state的变化, </p>\n</blockquote>\n<p><strong><code>第一种方案</code></strong>  我们可以在组件中通过组件的 watch方法来做, 因为组件可以将state数据映射到 组件的计算属性上,</p>\n<p>然后 监听 映射的计算属性即可 代码如下</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// vuex中的state数据</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//  A组件中映射 state数据到计算属性</span>\n  computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// A组件监听 count计算属性的变化</span>\n   watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 用本身的数据进行一下计数</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeCount<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"image-20200217103409496.png\" alt=\"image-20200217103409496\"></p>\n<p><strong><code>第二种方案</code></strong>   vuex中store对象本身提供了<strong><code>watch</code></strong>函数 ,可以利用该函数进行监听</p>\n<ul>\n<li><strong>watch(fn: Function, callback: Function, options?: Object): Function</strong></li>\n</ul>\n<p>响应式地侦听 <code>fn</code> 的返回值，当值改变时调用回调函数。<code>fn</code> 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 <a href=\"https://cn.vuejs.org/v2/api/#vm-watch\" target=\"_blank\" rel=\"noopener\"><code>vm.$watch</code></a> 方法的参数。</p>\n<p>代码</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">  created <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeCount<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>以上代码 均在示例有体现</p>\n</blockquote>\n<p>vue-cli项目 中router  </p>\n<p>history模式  /地址  =&gt; 一定会引起向服务端发请求 ,需要服务器配合,需要服务器做配合, 无论地址怎么变化, 返回都是一个页面,这样页面就不会强制刷新, 开发时  用的脚手架本身支持, 如果上线, 需要ngix 服务器配置,单页应用 无论地址怎么变化 </p>\n<p>hash模式    #/地址  =&gt; #的变化不会引起 页面的刷新</p>\n<blockquote>\n<p> 脚手架中 可能会频繁遇到环境变量</p>\n</blockquote>\n<p>dev环境    测试环境   预发布环境  生产环境 </p>\n<p>每个环境的地址 和域名可能不一样,如果你的项目需要上线,  不需要手动的 根据环境 来切换参数</p>\n<p>把一些需要根据环境变化的参数 变成环境变量, 运维会在不同的环境中将 不同的环境变量写入, 此时你的代码 编译之后就是带当时的环境变量的了</p>\n<h2 id=\"Vue单页面和多页面的混合使用\"><a href=\"#Vue单页面和多页面的混合使用\" class=\"headerlink\" title=\"Vue单页面和多页面的混合使用\"></a>Vue单页面和多页面的混合使用</h2><blockquote>\n<p>分析: 首先分析,单页面应用和 多页面应用的根本区别 </p>\n<p><strong><code>解答</code></strong>:  单页面即所有的模块统统置于一个html文件之上,切换模块,不会重新对html文件和资源进行再次请求,服务器不会对我们<strong><code>换页面</code></strong>的动作 产生任何反应, 所以我们感觉不到任何的刷新动作,速度和体验很畅快</p>\n<p>多页面应用 即多个html页面 共同的使用, 可以认为一个页面即一个模块,但是不排除 多个单页应用混合到一起的组合情况 ,  多页面切换一定会造成 页面资源的重新加载, 这也就意味着 如果 多页面之间切换,一定会造成很数据的<strong><code>重置</code></strong></p>\n<p>​    所以在 Vue的单页面 和多页面混合使用的时候,需要注意, 如果 不论是单页  跳到多页 ,还是多页跳到单页,都会造成页面内容的重置. 多页面我们不用关心,因为重置本就是多页面的特性,但是单页不一样, 很多变量或者数据 可能会因为 重置归零或者重置,所以我们应该 重点检查 单页每个页面的业务 在刷新页面之后, 能否保证业务的连贯性,  这些都可以通过<strong><code>导航守卫</code></strong>来进行处理, 也就是一进入单页的路由,就检查业务的连贯性.</p>\n</blockquote>\n<h2 id=\"vuex怎么合理规范管理数据-及mutations和actions区别\"><a href=\"#vuex怎么合理规范管理数据-及mutations和actions区别\" class=\"headerlink\" title=\"vuex怎么合理规范管理数据,及mutations和actions区别\"></a>vuex怎么合理规范管理数据,及mutations和actions区别</h2><blockquote>\n<p>解析: 此题考查 vuex中数据的管理和数据结构的设计,还有mutations 和actions的区别</p>\n</blockquote>\n<blockquote>\n<p><strong><code>解答</code></strong> : 首先要明确一个特别重要的原则, 就是 不是所有的数据都要放在vuex中, 因为vuex有一句名言:假如你并不知道为什么要使用vuex,那就不要使用它 !</p>\n<p> 那么什么样式的数据需要放在vuex中呢 ? 首先这个数据肯定要被多个组件频繁用到, 如果只是被一个组件 用到, 那完全没有任何必要为了使用vuex和使用vuex</p>\n</blockquote>\n<p>举例:  一个网站用户的昵称,账号,资料,像这种系统级别的信息 随时可能在业务中展示,使用, 如果在组件中存储, 那么要获取N次, 所以<strong><code>系统级别的数据</code></strong>是需要放置在vuex中的, 那么系统级别数据 也不能随意的放置,为了让数据看着更有层级结构感,可以按照像下面这样设计,  </p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    // 系统消息\n    system<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        setting<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面这种结构,一看 便知道我们应该哪里获取系统数据即 设置数据</p>\n</blockquote>\n<p>如果有些业务数据,也需要共享,最好按照模块的具体业务含义分类 , 比如下面</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    // 系统消息\n    system<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        setting<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    product<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        productList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> // 商品信息列表\n        productOrders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> // 商品订单啊列表\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如上图代码所示,我们很清晰的能够分清楚 每个模块的数据,这样不会导致数据管理的混乱</p>\n</blockquote>\n<h3 id=\"mutations和-actions-的区别\"><a href=\"#mutations和-actions-的区别\" class=\"headerlink\" title=\"mutations和 actions 的区别\"></a>mutations和 actions 的区别</h3><blockquote>\n<p>不同于redux只有一个action, vuex单独拎出了一个mutations,  它认为 更新数据必须是同步的, 也就是只要调用了 提交数据方法, 就会得到一个当前的<strong><code>状态快照</code></strong>,提交一个mutation就会得到一个<strong><code>快照</code></strong></p>\n<p>那么如果我们想做 异步请求,怎么做?  这里 vuex提供了专门做异步请求的模块,action, 当然action中也可以做同步操作, 只不过 分工更加明确, 所有的数据操作 不论是同步还是异步 都可以在action中完成, </p>\n<p>mutation只负责接收状态, 同步完成 <strong><code>数据快照</code></strong></p>\n<p>所以可以认为 </p>\n<p>state =&gt; 负责存储状态 </p>\n<p>mutations =&gt; 负责同步更新状态</p>\n<p>actions =&gt; 负责获取 处理数据, 提交到mutation进行状态更新</p>\n</blockquote>\n<h2 id=\"vuex模块化管理-使用的时候有注意事项\"><a href=\"#vuex模块化管理-使用的时候有注意事项\" class=\"headerlink\" title=\"vuex模块化管理,使用的时候有注意事项\"></a>vuex模块化管理,使用的时候有注意事项</h2><blockquote>\n<p>分析: 此题考查 当vuex维护的数据越来越复杂的时候, 模块化的解决方案</p>\n<p><strong><code>解析</code></strong>:使用单一的状态树，应用的所有状态都会<strong><code>集中在一个比较大的对象</code></strong>上面，随着项目需求的不断增加，状态树也会变得越来越臃肿，增加了状态树维护的复杂度,而且代码变得沉长；因此我们需要<strong><code>modules(模块化)</code></strong>来为我们的状态树<strong><code>分隔</code></strong>成不同的模块，每个模块拥有自己的state，getters，mutations，actions；而且允许每个module里面嵌套子module；如下：</p>\n<pre><code> store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    ├── state.js          # 根级别的 state\n    └── modules\n        ├── module1.js   # 模块1的state树\n        └── module2.js   # 模块2的state树\n</code></pre></blockquote>\n<p>上面的设计中, 每个vuex子模块都可以定义 state/mutations/actions</p>\n<blockquote>\n<p>需要注意的是  我们原来使用<strong><code>vuex辅助函数</code></strong>  mapMutations/mapActions  引入的是 全局的的mutations 和actions , 并且我们vuex子模块  也就是module1,module2 … 这些模块的aciton /mutation 也注册了全局, </p>\n<p>也就是如果 module1 中定义了 updateUser , module2中也定义了 updateUser, 此时, mutation就冲突了</p>\n<p>如果重名,就报错了…..</p>\n<p>如果不想冲突, 各个模块管理自己的action 和 mutation ,需要 给我们的子模块一个 属性 <strong><code>namespaced: true</code></strong></p>\n</blockquote>\n<p>那么 组件中怎么使用子模块的action 和 mutations</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文</span>\nmethods <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'updateUser'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 引用A模块的mptations方法 </span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>此题具体考查 Vuex虽然是一个公共状态, 但是公共状态还可以切分成若干个子状态模块, 也就是moudels,</p>\n<p>解决当我们的状态树过于庞大和复杂时的一种解决方案.  但是笔者认为, 一旦用了vuex, 几乎 就认定该项目是较为复杂的</p>\n</blockquote>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/modules.html\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n<h2 id=\"封装Vue组件的步骤\"><a href=\"#封装Vue组件的步骤\" class=\"headerlink\" title=\"封装Vue组件的步骤\"></a>封装Vue组件的步骤</h2><blockquote>\n<p>分析: 本题考查 对于Vue组件化开发的熟练程度</p>\n<p><strong><code>解析</code></strong>: 首先明确 组件是本质是什么?  </p>\n<p>组件就是一个单位的HTML结构 + 数据逻辑 + 样式的 操作单元 </p>\n<p>Vue的组件 继承自Vue对象, Vue对象中的所有的属性和方法,组件可自动继承. </p>\n<p>组件的要素  template  =&gt;  作为页面的模板结构 </p>\n<p>script  =&gt; 作为数据及逻辑的部分</p>\n<p>style  =&gt; 作为该组件部分的样式部分</p>\n</blockquote>\n<p>要封装一个组件,首先要明确该组件要做的具体业务和需求,  什么样的体验特征, 完成什么样的交互, 处理什么样的数据</p>\n<blockquote>\n<p>明确上述要求之后, 着手模板的结构设计及搭建,也就是 常说的html结构部分,  先完成 静态的html结构</p>\n<p>结构完成, 着手数据结构的设计及开发, 数据结构一般存储于组件的data属性 或者 vuex 状态共享的数据结构</p>\n<p>数据设计完成/ 结构完成  接下来 完成数据和模块的结合 , 利用vuejs中指令和 插值表达式的特性 将静态结构 <strong><code>动态化</code></strong></p>\n<p>展现的部分完成, 接下来完成<strong><code>交互部分</code></strong>,即利用 组件的生命周期的钩子函数 和 事件驱动 来完成 逻辑及数据的处理与操作</p>\n</blockquote>\n<p>最后组件完成,进行测试及使用</p>\n<p>常用的组件属性 =&gt; data/ methods/filters/ components/watch/created/mounted/beforeDestroy/computed/props</p>\n<p>常用组件指令: v-if/v-on/v-bind/v-model/v-text/v-once</p>\n<h2 id=\"Vue中的data是以函数的形式还是对象的形式表示\"><a href=\"#Vue中的data是以函数的形式还是对象的形式表示\" class=\"headerlink\" title=\"Vue中的data是以函数的形式还是对象的形式表示\"></a>Vue中的data是以函数的形式还是对象的形式表示</h2><blockquote>\n<p>分析: 此题考查 data的存在形式</p>\n</blockquote>\n<blockquote>\n<p><strong><code>解析</code></strong>: 我们在初步学习Vue实例化的时候写的代码时这个样子</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello world'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面代码中的data 是一个对象, 但是我们在开发组件的时候要求data必须是一个带返回值的函数</p>\n</blockquote>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'张三'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>为什么组件要求必须是带返回值的函数?  因为 我们的组件在实例化的时候, 会直接将data数据作用在视图上, </p>\n<p>对组件实例化, 会导致我们组件的data数据进行共享, 好比  现在有两辆新车, 你一踩油门, 不光你的车往前走,另辆车也和你一样往前冲!   这显然不符合我们的程序设计要求, 我们希望组件内部的数据是相互独立的,且互不响应,所以 采用   <strong><code>return {}</code></strong>  每个组件实例都返回新对象实例的形式,保证每个组件实例的唯一性</p>\n</blockquote>\n<h2 id=\"使用Proxy代理跨域\"><a href=\"#使用Proxy代理跨域\" class=\"headerlink\" title=\"使用Proxy代理跨域\"></a>使用Proxy代理跨域</h2><blockquote>\n<p>分析: 本题考查如何解决跨域问题</p>\n<p>解析: 解决跨域问题的方式有几种,一种是服务端设置 all-control-origin * , 但这种方式依赖服务端的设置,在前后分离的场景下 ,不太方便</p>\n<p>还有一种jsonp形式, 可以利用script标签 的特性解决同源策略带来的跨域问题,但这是这种方案对于请求的类型有限制,只能get/post</p>\n<p>还有一种就可以在开发环境(本地调试)期间,进行代理, 说白了 就是通过 在本地通过nodejs 启动一个微型服务, </p>\n<p>然后我们先请求我们的微型服务, 微型服务是服务端, 服务端<strong><code>代我们</code></strong>去请求我们想要的跨域地址, 因为服务端是不受<strong><code>同源策略</code></strong>的限制的, 具体到开发中,打包工具webpack集成了代理的功能,可以采用配置webpack的方式进行解决, 但是这种仅限于 本地开发期间, 等项目上线时,还是需要另择代理 ngix</p>\n</blockquote>\n<p>以下为webpack配置代理的配置 </p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"> // 代理设置 \nproxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    '/api'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span>//www.baidu.com/'<span class=\"token punctuation\">,</span>\n        changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        pathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            '^/api'<span class=\"token operator\">:</span> ''\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong><code>target</code></strong>：接口域名；</p>\n<p> <strong><code>changeOrigin</code></strong>： 如果设置为<code>true</code>,那么本地会虚拟一个服务端接收你的请求并代你发送该请求；</p>\n<p> <strong><code>pathRewrite</code></strong>：如果接口中是没有api的，那就直接置空（如上）如果接口中有api，就需要写成{‘^/api’:‘/api’}</p>\n<p>真实访问地址  <a href=\"http://www.baidu.com/test\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/test</a> </p>\n<p>/api/test  =&gt;  /api 就是 表示  <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a>  =&gt;webpack 后台 发出的请求(<a href=\"http://www.baidu.com/test\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/test</a> )=&gt;  返回结果  =&gt; 前端</p>\n<p>反向代理  =&gt;   前端   =&gt; 后台 不让你访问 (跨域)</p>\n<p>   前端 =&gt; webpack后台 (代理)(仅限于本地开发模式)     =&gt;后台</p>\n<h2 id=\"Vue中的watch如何深度监听某个对象\"><a href=\"#Vue中的watch如何深度监听某个对象\" class=\"headerlink\" title=\"Vue中的watch如何深度监听某个对象\"></a>Vue中的watch如何深度监听某个对象</h2><blockquote>\n<p>分析: 此题考查Vue的选项watch的应用方式</p>\n<p>解析:  watch最基本的用法是 </p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'张三'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面代码中: 有个原则监听谁,写谁的名字,然后是对应的执行函数, 第一个参数为最新的改变值,第二个值为上一次改变的值, 注意: 除了监听 data,也可以监听<strong><code>计算属性</code></strong> 或者一个 函数的计算结果</p>\n<p>那怎么深度监听对象 ,两种方式</p>\n<ol>\n<li>字符串嵌套方式</li>\n</ol>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n           a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n               b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                   c <span class=\"token punctuation\">:</span><span class=\"token string\">'张三'</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"a.b.c\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><p>启用深度监听方式</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n           a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n               b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                   c <span class=\"token punctuation\">:</span><span class=\"token string\">'张三'</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\" spellcheck=\"true\">// deep 为true  意味着开启了深度监听 a对象里面任何数据变化都会触发handler函数,</span>\n            <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n               <span class=\"token comment\" spellcheck=\"true\">// handler是一个固定写法</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"Vue-keep-alive使用\"><a href=\"#Vue-keep-alive使用\" class=\"headerlink\" title=\"Vue keep-alive使用\"></a>Vue keep-alive使用</h2><blockquote>\n<p>分析: 此题考查Vue中组件缓存的使用 </p>\n<p>解析:  keep-alive是 Vue提供的一个全局组件, Vue的组件是有销毁机制的,比如条件渲染, 路由跳转时 组件都会经历<strong><code>销毁</code></strong>, 再次回到页面时,又会回到 <strong><code>重生</code></strong>, 这一过程保证了生命周期钩子函数各个过程都会在这一生命周期中执行.</p>\n<p>但是,我们辛辛苦苦获取的数据 滑动的页面 会因为组件的销毁 重生 而 <strong><code>归零</code></strong>,这影响了交互的体验, 所以 keep-alvie出现了, 可以帮助我们缓存想要缓存的组件实例, 只用用keep-alive <strong><code>包裹</code></strong>你想要缓存的组件实例, 这个时候, 组件创建之后,就不会再进行 销毁, 组件数据和状态得以保存</p>\n<p>但是,没有了销毁,也就失去了重生的环节, 我们失去了 原有的钩子函数, 所以keep-alive包裹的组件 都获取了另外两个事件 </p>\n<p>唤醒 activited 重新唤醒休眠组件实例时 执行</p>\n<p>休眠 unactiived  组件实例进入休眠状态时执行</p>\n</blockquote>\n<p>但是我们不能缓存所有的组件实例, 如果是针对 组件容器 router-view 这个组件进行的缓存, 一般的策略是在路由的元信息 meta对象中设置是否缓存的标记,  然后根据标记决定是否进行缓存</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 里面是当需要缓存时 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view  v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"$route.meta.isAlive\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 外面是不需要缓存时 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view  v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"!$route.meta.isAlive\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还有需要注意的问题是:  被缓存的组件中如果还有子组件, 那么子组件也会一并拥有 激活和唤醒事件,并且这些事件会在同时执行</p>\n<h2 id=\"vue的双向数据绑定原理是什么\"><a href=\"#vue的双向数据绑定原理是什么\" class=\"headerlink\" title=\"vue的双向数据绑定原理是什么\"></a>vue的双向数据绑定原理是什么</h2><blockquote>\n<p>分析 :此题考查 Vue的MVVM原理</p>\n<p><strong><code>解答</code></strong>:  Vue的双向绑定原理其实就是MVVM的实现原理, Vuejs官网已经说明, 实际就是通过 Object.defineProperty方法 完成了对于Vue实例中数据的 <strong><code>劫持</code></strong>, 通过对于 data中数据 set的监听,</p>\n<p>然后通过<strong><code>观察者模式</code></strong>, 通知 对应的绑定节点 进行节点数据更新, 完成数据驱动视图的更新</p>\n</blockquote>\n<p>我们实现的MVVM是一个简易版本</p>\n<p>我们并没有做虚拟DOM, 虚拟DOM的问题</p>\n<p>虚拟DOM,并不是真正的DOM, 数据驱动视图, 数据变化  =&gt;  数据 切换成 虚拟DOM, </p>\n<p>新的虚拟DOM 会和 旧的虚拟DOM 进行 diff比较算法, 比较 得出 需要更新的结果, 反映到dom上</p>\n<p>diff比较 =&gt;  其实就是 用一种时间时间复杂度比较低的方式去更新</p>\n<p>新节点    和 旧节点 完成 比较 ,时间复杂度 O(n^n^n), </p>\n<p>diff 比较算法 时间复杂度 是 O(n)  =&gt;   diff 比较算法 只比较同级的节点, 如果同级节点不一致, 就不再比较子级了,</p>\n<p>性能比较高的算法.</p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/af0b398602bc\" target=\"_blank\" rel=\"noopener\">虚拟dom和diff比较</a>    此问题 仅仅存于面试</p>\n</blockquote>\n<p>Vue/React  不推荐 移动节点, 不推荐改变节点的名称, </p>\n<p>旧节点</p>\n<blockquote>\n<p>同理, 通过对于节点的表单值改变事件的监听,  执行对于数据的修改</p>\n</blockquote>\n<p>简单概述 : 通过Object.defineProperty 完成对于数据的劫持, 通过观察者模式, 完成对于节点的数据更新</p>\n<h2 id=\"页面刷新了之后vuex中的数据消失怎么解决\"><a href=\"#页面刷新了之后vuex中的数据消失怎么解决\" class=\"headerlink\" title=\"页面刷新了之后vuex中的数据消失怎么解决\"></a>页面刷新了之后vuex中的数据消失怎么解决</h2><blockquote>\n<p>分析:此题考查 如果将vuex数据进行本地持久化</p>\n<p><strong><code>解析</code></strong>: vuex数据位于内存, 页面的刷新重置会导致数据的<strong><code>归零</code></strong>,也就是所谓的消失,  本地持久化可以解决这个问题.本地持久化用到的技术也就是 本次存储 sesstionStorage 或者 localStorage ,  </p>\n<p>如果需要保持的更长久 ,浏览器关掉 再打开依然存有数据,需要使用后者 </p>\n<p>实施方案:  state的持久化 也就是分别需要在 state数据初始化 /更新 的时候 进行读取和设置本地存储操作</p>\n<p>代码如下 </p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       user<span class=\"token punctuation\">:</span> localStorge<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 初始化时读取 本地存储</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       updateUser <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>user\n           localStoregae<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 数据更新时 设置本地存储</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"vue做服务端渲染\"><a href=\"#vue做服务端渲染\" class=\"headerlink\" title=\"vue做服务端渲染\"></a>vue做服务端渲染</h2><blockquote>\n<p>分析: 为什么要做服务端渲染, 首先要明白 服务端渲染解决什么问题</p>\n<p><strong><code>解析</code></strong>: vuejs 官网说的很明白, 要做服务端渲染首先必须是有对应的需求,即对 实时到达时间(页面访问时间)的绝对需求.  如果只是简单的一个管理系统, 区区几百毫秒的优化 显得十分小题大做.</p>\n<p>服务端渲染这里 有一个成熟优秀的框架 nuxt.js , 正如next.js对于react,nuxt是vue服务端渲染的优秀解决方案</p>\n</blockquote>\n<p>我们几乎可以像原来一样的去开发组件,页面, nuxt帮我们集成了原有项目的插件,模块, 提供了预加载数据事件</p>\n<p>asyncData, 在客户端实现对于服务端内容的<strong><code>完美接管</code></strong></p>\n<p>只不过 这里我们的路由开发方式,需要遵循nuxt.js制定的特殊规范,比如,动态 路由需要 <strong><code>下划线前缀</code></strong>, 嵌套路由需要</p>\n<p>同名组件的文件下下建立组件,并在 同名组件中 加入 nuxt-child 作为 容器  ….</p>\n<blockquote>\n<p>nuxt的出现可以让渲染内容完全服务端化,解决seo不够友好, 首屏渲染速度不够迅速的问题,</p>\n<p>但是这里需要注意: 并不是所有页面都需要服务端渲染, 因为服务端渲染比重多大 对于服务器的访问处理能力 要求也会急剧增大</p>\n</blockquote>\n<p><a href=\"https://zh.nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">nuxt.js官网</a></p>\n<h2 id=\"双向数据绑定和vuex冲突解决方案\"><a href=\"#双向数据绑定和vuex冲突解决方案\" class=\"headerlink\" title=\"双向数据绑定和vuex冲突解决方案\"></a>双向数据绑定和vuex冲突解决方案</h2><blockquote>\n<p>分析: 此题考查 当Vuex数据想要进行逆向操作,也就是 双向数据流向的解决方案</p>\n<p><strong><code>解析</code></strong>:   vuex的数据对于组件来说,默认是不可改的, 但是如果我们就是想改, 可以利用 computed计算属性的另一个方法 , 我们知道计算属性 默认是数据的getter实现, 但是我们可以采用 对于 计算属性 同时get/set的实现,</p>\n<p>双向数据流 中 当对 计算属性设置时 ,就可以通过 store对象进行再次的mutations提交 </p>\n<p>具体代码如下</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nstate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\" spellcheck=\"true\">// 定义value数据 作为vuex状态数据</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n addCount <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 定义mutations方法 作为 提交mutations的方法</span>\n updateValue <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>value\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nactions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nmodules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\"><code class=\"language-vue\"><template>\n<div>\n   <div>vuex的双向数据流</div>\n   <input type=\"text\" v-model=\"value\">\n   <div>Vuex数据属性: {{value }}</div>\n</div>\n</template>\n\n<script>\nimport { mapMutations } from 'vuex'\nexport default {\nmethods: {\n ...mapMutations(['updateValue'])\n},\n    // 计算属性的get/set\ncomputed: {\n value: {\n   get () {\n       // 获取state公共数据\n     return this.$store.state.value\n   },\n    // 通过对 计算属性的set监听 将 数据提交mutations\n     // 当input中数据变化时 就会调用set中的方法  value就是最新值\n   set (value) {\n     this.updateValue({ value: value })  // 在set中提交mutations\n   }\n }\n}\n}\n</script>\n\n<style>\n\n</style>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"vue-router传参\"><a href=\"#vue-router传参\" class=\"headerlink\" title=\"vue-router传参\"></a>vue-router传参</h2><blockquote>\n<p>分析:考查vue-router的传值方式</p>\n<p><strong><code>解析</code></strong>  vue-router 传值 可以通过 地址传值</p>\n<p>最简单的就是url传值, url传值又两种, params 和 query参数传值</p>\n<p>params传值 是指的动态路由传值 </p>\n<pre class=\"line-numbers language-vue\"><code class=\"language-vue\">{  path: '/user/:id' }  // 定义一个路由参数\n<router-link to=\"/user/123\"></router-link>  // 传值\nthis.$route.params.id   // 取值\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>query传值,指通过?后面的拼接参数传值</p>\n<pre class=\"line-numbers language-vue\"><code class=\"language-vue\">\n<router-link to=\"/user?id=123\"></router-link>  // 传值\nthis.$route.query.id   // 取值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"前端鉴权一般思路\"><a href=\"#前端鉴权一般思路\" class=\"headerlink\" title=\"前端鉴权一般思路\"></a>前端鉴权一般思路</h2><blockquote>\n<p>分析: 考查前后分离的鉴权思路</p>\n</blockquote>\n<p><strong><code>解析</code></strong>: 首先要明白 为什么要在前端鉴权? 因为传统项目都是在后端鉴权, 然后通过进行拦截 跳转 对应操作</p>\n<p>因为 我们做的并不是传统的项目,而是前后分离项目,也就是前端项目和后端服务进行了<strong><code>剥离</code></strong>, 后端没有办法用session来存储你任意一个前端项目域名下的身份信息, 所以jwt 鉴权模式应运而生. </p>\n<p>​    也就是后端不再提供会话的身份存储,而是通过一个鉴权接口将用户的身份,登录时间,请求端口,协议头..等等信息 组装成一个加密的串 返给前端请求,  前端拿到了这个串,就可以认为自己登录成功</p>\n<p>那么这个<strong><code>加密串</code></strong>就成了 前端用户是否登录的成功标志, 这就是我们的token , 那么在接下来的接口请求中,我们几乎都要携带这个加密串,因为它是<strong><code>唯一</code></strong>能<strong><code>证明我们身份</code></strong>的信息.</p>\n<p>为了方便,我们会一般在请求工具 axios(举例)的拦截器中<strong><code>统一注入token</code></strong>, 减少代码的重复</p>\n<p>token 同时具有时效性,我们也需要在此时对token过期进行处理,一旦出现过期的请求码, 就需要进行 换取新token 或者重新登录的解决方案</p>\n<p>除此之外,我们还需要依据<strong><code>有无加密串</code></strong> 在前端对于某些页面的访问进行限制, 这个会用到我们的Vue-Router中的导航守卫.</p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"Vue部分相关的面试题\"><a href=\"#Vue部分相关的面试题\" class=\"headerlink\" title=\"Vue部分相关的面试题\"></a>Vue部分相关的面试题</h1><h2 id=\"如何在组件中监听Vuex的数据变化\"><a href=\"#如何在组件中监听Vuex的数据变化\" class=\"headerlink\" title=\"如何在组件中监听Vuex的数据变化\"></a>如何在组件中监听Vuex的数据变化</h2><blockquote>\n<p>分析:   此题考查Vuex的应用及 Vue内部的监听数据变化的机制  </p>\n</blockquote>\n<blockquote>\n<p><strong><code>解答</code></strong>:  首先确定 Vuex是为了解决什么问题而出现的 ?  Vuex是为了解决组件间状态共享而出现的一个框架.</p>\n<p>其中有几个要素 是组成Vuex的关键,  state(状态)  mutations  actions  ,</p>\n<p>state 表示 需要共享的状态数据</p>\n<p>mutations  表示 更改 state的方法集合  只能是同步更新 不能写ajax等异步请求</p>\n<p>actions  如果需要做异步请求  可以在actions中发起 然后提交给 mutations mutation再做同步更新</p>\n</blockquote>\n<p>也就是 state 负责管理状态 ,  mutation负责同步更新状态 action负责 异步获取数据 同提交给mutation</p>\n<blockquote>\n<p>所以 组件监听Vuex数据变化 就是 监听 Vuex中state的变化, </p>\n</blockquote>\n<p><strong><code>第一种方案</code></strong>  我们可以在组件中通过组件的 watch方法来做, 因为组件可以将state数据映射到 组件的计算属性上,</p>\n<p>然后 监听 映射的计算属性即可 代码如下</p>\n<pre><code class=\"js\">// vuex中的state数据\n  state: {\n    count: 0\n  },\n\n//  A组件中映射 state数据到计算属性\n  computed: {\n    ...mapState([&#39;count&#39;])\n  }\n// A组件监听 count计算属性的变化\n   watch: {\n    count () {\n      // 用本身的数据进行一下计数\n      this.changeCount++\n    }\n  }</code></pre>\n<p><img src=\"image-20200217103409496.png\" alt=\"image-20200217103409496\"></p>\n<p><strong><code>第二种方案</code></strong>   vuex中store对象本身提供了<strong><code>watch</code></strong>函数 ,可以利用该函数进行监听</p>\n<ul>\n<li><strong>watch(fn: Function, callback: Function, options?: Object): Function</strong></li>\n</ul>\n<p>响应式地侦听 <code>fn</code> 的返回值，当值改变时调用回调函数。<code>fn</code> 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 <a href=\"https://cn.vuejs.org/v2/api/#vm-watch\" target=\"_blank\" rel=\"noopener\"><code>vm.$watch</code></a> 方法的参数。</p>\n<p>代码</p>\n<pre><code class=\"js\">  created () {\n    this.$store.watch((state, getters) =&gt; {\n      return state.count\n    }, () =&gt; {\n      this.changeCount++\n    })\n  }</code></pre>\n<blockquote>\n<p>以上代码 均在示例有体现</p>\n</blockquote>\n<p>vue-cli项目 中router  </p>\n<p>history模式  /地址  =&gt; 一定会引起向服务端发请求 ,需要服务器配合,需要服务器做配合, 无论地址怎么变化, 返回都是一个页面,这样页面就不会强制刷新, 开发时  用的脚手架本身支持, 如果上线, 需要ngix 服务器配置,单页应用 无论地址怎么变化 </p>\n<p>hash模式    #/地址  =&gt; #的变化不会引起 页面的刷新</p>\n<blockquote>\n<p> 脚手架中 可能会频繁遇到环境变量</p>\n</blockquote>\n<p>dev环境    测试环境   预发布环境  生产环境 </p>\n<p>每个环境的地址 和域名可能不一样,如果你的项目需要上线,  不需要手动的 根据环境 来切换参数</p>\n<p>把一些需要根据环境变化的参数 变成环境变量, 运维会在不同的环境中将 不同的环境变量写入, 此时你的代码 编译之后就是带当时的环境变量的了</p>\n<h2 id=\"Vue单页面和多页面的混合使用\"><a href=\"#Vue单页面和多页面的混合使用\" class=\"headerlink\" title=\"Vue单页面和多页面的混合使用\"></a>Vue单页面和多页面的混合使用</h2><blockquote>\n<p>分析: 首先分析,单页面应用和 多页面应用的根本区别 </p>\n<p><strong><code>解答</code></strong>:  单页面即所有的模块统统置于一个html文件之上,切换模块,不会重新对html文件和资源进行再次请求,服务器不会对我们<strong><code>换页面</code></strong>的动作 产生任何反应, 所以我们感觉不到任何的刷新动作,速度和体验很畅快</p>\n<p>多页面应用 即多个html页面 共同的使用, 可以认为一个页面即一个模块,但是不排除 多个单页应用混合到一起的组合情况 ,  多页面切换一定会造成 页面资源的重新加载, 这也就意味着 如果 多页面之间切换,一定会造成很数据的<strong><code>重置</code></strong></p>\n<p>​    所以在 Vue的单页面 和多页面混合使用的时候,需要注意, 如果 不论是单页  跳到多页 ,还是多页跳到单页,都会造成页面内容的重置. 多页面我们不用关心,因为重置本就是多页面的特性,但是单页不一样, 很多变量或者数据 可能会因为 重置归零或者重置,所以我们应该 重点检查 单页每个页面的业务 在刷新页面之后, 能否保证业务的连贯性,  这些都可以通过<strong><code>导航守卫</code></strong>来进行处理, 也就是一进入单页的路由,就检查业务的连贯性.</p>\n</blockquote>\n<h2 id=\"vuex怎么合理规范管理数据-及mutations和actions区别\"><a href=\"#vuex怎么合理规范管理数据-及mutations和actions区别\" class=\"headerlink\" title=\"vuex怎么合理规范管理数据,及mutations和actions区别\"></a>vuex怎么合理规范管理数据,及mutations和actions区别</h2><blockquote>\n<p>解析: 此题考查 vuex中数据的管理和数据结构的设计,还有mutations 和actions的区别</p>\n</blockquote>\n<blockquote>\n<p><strong><code>解答</code></strong> : 首先要明确一个特别重要的原则, 就是 不是所有的数据都要放在vuex中, 因为vuex有一句名言:假如你并不知道为什么要使用vuex,那就不要使用它 !</p>\n<p> 那么什么样式的数据需要放在vuex中呢 ? 首先这个数据肯定要被多个组件频繁用到, 如果只是被一个组件 用到, 那完全没有任何必要为了使用vuex和使用vuex</p>\n</blockquote>\n<p>举例:  一个网站用户的昵称,账号,资料,像这种系统级别的信息 随时可能在业务中展示,使用, 如果在组件中存储, 那么要获取N次, 所以<strong><code>系统级别的数据</code></strong>是需要放置在vuex中的, 那么系统级别数据 也不能随意的放置,为了让数据看着更有层级结构感,可以按照像下面这样设计,  </p>\n<pre><code class=\"json\">{\n    // 系统消息\n    system: {\n        user: {},\n        setting: {}\n    }\n}</code></pre>\n<blockquote>\n<p>上面这种结构,一看 便知道我们应该哪里获取系统数据即 设置数据</p>\n</blockquote>\n<p>如果有些业务数据,也需要共享,最好按照模块的具体业务含义分类 , 比如下面</p>\n<pre><code class=\"json\">{\n    // 系统消息\n    system: {\n        user: {},\n        setting: {}\n    },\n    product: {\n        productList: [], // 商品信息列表\n        productOrders: [] // 商品订单啊列表\n    }\n}</code></pre>\n<blockquote>\n<p>如上图代码所示,我们很清晰的能够分清楚 每个模块的数据,这样不会导致数据管理的混乱</p>\n</blockquote>\n<h3 id=\"mutations和-actions-的区别\"><a href=\"#mutations和-actions-的区别\" class=\"headerlink\" title=\"mutations和 actions 的区别\"></a>mutations和 actions 的区别</h3><blockquote>\n<p>不同于redux只有一个action, vuex单独拎出了一个mutations,  它认为 更新数据必须是同步的, 也就是只要调用了 提交数据方法, 就会得到一个当前的<strong><code>状态快照</code></strong>,提交一个mutation就会得到一个<strong><code>快照</code></strong></p>\n<p>那么如果我们想做 异步请求,怎么做?  这里 vuex提供了专门做异步请求的模块,action, 当然action中也可以做同步操作, 只不过 分工更加明确, 所有的数据操作 不论是同步还是异步 都可以在action中完成, </p>\n<p>mutation只负责接收状态, 同步完成 <strong><code>数据快照</code></strong></p>\n<p>所以可以认为 </p>\n<p>state =&gt; 负责存储状态 </p>\n<p>mutations =&gt; 负责同步更新状态</p>\n<p>actions =&gt; 负责获取 处理数据, 提交到mutation进行状态更新</p>\n</blockquote>\n<h2 id=\"vuex模块化管理-使用的时候有注意事项\"><a href=\"#vuex模块化管理-使用的时候有注意事项\" class=\"headerlink\" title=\"vuex模块化管理,使用的时候有注意事项\"></a>vuex模块化管理,使用的时候有注意事项</h2><blockquote>\n<p>分析: 此题考查 当vuex维护的数据越来越复杂的时候, 模块化的解决方案</p>\n<p><strong><code>解析</code></strong>:使用单一的状态树，应用的所有状态都会<strong><code>集中在一个比较大的对象</code></strong>上面，随着项目需求的不断增加，状态树也会变得越来越臃肿，增加了状态树维护的复杂度,而且代码变得沉长；因此我们需要<strong><code>modules(模块化)</code></strong>来为我们的状态树<strong><code>分隔</code></strong>成不同的模块，每个模块拥有自己的state，getters，mutations，actions；而且允许每个module里面嵌套子module；如下：</p>\n<pre><code> store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    ├── state.js          # 根级别的 state\n    └── modules\n        ├── module1.js   # 模块1的state树\n        └── module2.js   # 模块2的state树\n</code></pre></blockquote>\n<p>上面的设计中, 每个vuex子模块都可以定义 state/mutations/actions</p>\n<blockquote>\n<p>需要注意的是  我们原来使用<strong><code>vuex辅助函数</code></strong>  mapMutations/mapActions  引入的是 全局的的mutations 和actions , 并且我们vuex子模块  也就是module1,module2 … 这些模块的aciton /mutation 也注册了全局, </p>\n<p>也就是如果 module1 中定义了 updateUser , module2中也定义了 updateUser, 此时, mutation就冲突了</p>\n<p>如果重名,就报错了…..</p>\n<p>如果不想冲突, 各个模块管理自己的action 和 mutation ,需要 给我们的子模块一个 属性 <strong><code>namespaced: true</code></strong></p>\n</blockquote>\n<p>那么 组件中怎么使用子模块的action 和 mutations</p>\n<pre><code class=\"js\">// 你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文\nmethods : {\n    ...mapMutations(&#39;A&#39;, [&#39;updateUser&#39;])  // 引用A模块的mptations方法 \n}</code></pre>\n<blockquote>\n<p>此题具体考查 Vuex虽然是一个公共状态, 但是公共状态还可以切分成若干个子状态模块, 也就是moudels,</p>\n<p>解决当我们的状态树过于庞大和复杂时的一种解决方案.  但是笔者认为, 一旦用了vuex, 几乎 就认定该项目是较为复杂的</p>\n</blockquote>\n<p><a href=\"https://vuex.vuejs.org/zh/guide/modules.html\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n<h2 id=\"封装Vue组件的步骤\"><a href=\"#封装Vue组件的步骤\" class=\"headerlink\" title=\"封装Vue组件的步骤\"></a>封装Vue组件的步骤</h2><blockquote>\n<p>分析: 本题考查 对于Vue组件化开发的熟练程度</p>\n<p><strong><code>解析</code></strong>: 首先明确 组件是本质是什么?  </p>\n<p>组件就是一个单位的HTML结构 + 数据逻辑 + 样式的 操作单元 </p>\n<p>Vue的组件 继承自Vue对象, Vue对象中的所有的属性和方法,组件可自动继承. </p>\n<p>组件的要素  template  =&gt;  作为页面的模板结构 </p>\n<p>script  =&gt; 作为数据及逻辑的部分</p>\n<p>style  =&gt; 作为该组件部分的样式部分</p>\n</blockquote>\n<p>要封装一个组件,首先要明确该组件要做的具体业务和需求,  什么样的体验特征, 完成什么样的交互, 处理什么样的数据</p>\n<blockquote>\n<p>明确上述要求之后, 着手模板的结构设计及搭建,也就是 常说的html结构部分,  先完成 静态的html结构</p>\n<p>结构完成, 着手数据结构的设计及开发, 数据结构一般存储于组件的data属性 或者 vuex 状态共享的数据结构</p>\n<p>数据设计完成/ 结构完成  接下来 完成数据和模块的结合 , 利用vuejs中指令和 插值表达式的特性 将静态结构 <strong><code>动态化</code></strong></p>\n<p>展现的部分完成, 接下来完成<strong><code>交互部分</code></strong>,即利用 组件的生命周期的钩子函数 和 事件驱动 来完成 逻辑及数据的处理与操作</p>\n</blockquote>\n<p>最后组件完成,进行测试及使用</p>\n<p>常用的组件属性 =&gt; data/ methods/filters/ components/watch/created/mounted/beforeDestroy/computed/props</p>\n<p>常用组件指令: v-if/v-on/v-bind/v-model/v-text/v-once</p>\n<h2 id=\"Vue中的data是以函数的形式还是对象的形式表示\"><a href=\"#Vue中的data是以函数的形式还是对象的形式表示\" class=\"headerlink\" title=\"Vue中的data是以函数的形式还是对象的形式表示\"></a>Vue中的data是以函数的形式还是对象的形式表示</h2><blockquote>\n<p>分析: 此题考查 data的存在形式</p>\n</blockquote>\n<blockquote>\n<p><strong><code>解析</code></strong>: 我们在初步学习Vue实例化的时候写的代码时这个样子</p>\n<pre><code class=\"js\">new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        name: &#39;hello world&#39;\n    }\n})</code></pre>\n<p>上面代码中的data 是一个对象, 但是我们在开发组件的时候要求data必须是一个带返回值的函数</p>\n</blockquote>\n<pre><code class=\"js\">export default {\n    data () {\n        return {\n            name: &#39;张三&#39;\n        }\n    }\n}</code></pre>\n<blockquote>\n<p>为什么组件要求必须是带返回值的函数?  因为 我们的组件在实例化的时候, 会直接将data数据作用在视图上, </p>\n<p>对组件实例化, 会导致我们组件的data数据进行共享, 好比  现在有两辆新车, 你一踩油门, 不光你的车往前走,另辆车也和你一样往前冲!   这显然不符合我们的程序设计要求, 我们希望组件内部的数据是相互独立的,且互不响应,所以 采用   <strong><code>return {}</code></strong>  每个组件实例都返回新对象实例的形式,保证每个组件实例的唯一性</p>\n</blockquote>\n<h2 id=\"使用Proxy代理跨域\"><a href=\"#使用Proxy代理跨域\" class=\"headerlink\" title=\"使用Proxy代理跨域\"></a>使用Proxy代理跨域</h2><blockquote>\n<p>分析: 本题考查如何解决跨域问题</p>\n<p>解析: 解决跨域问题的方式有几种,一种是服务端设置 all-control-origin * , 但这种方式依赖服务端的设置,在前后分离的场景下 ,不太方便</p>\n<p>还有一种jsonp形式, 可以利用script标签 的特性解决同源策略带来的跨域问题,但这是这种方案对于请求的类型有限制,只能get/post</p>\n<p>还有一种就可以在开发环境(本地调试)期间,进行代理, 说白了 就是通过 在本地通过nodejs 启动一个微型服务, </p>\n<p>然后我们先请求我们的微型服务, 微型服务是服务端, 服务端<strong><code>代我们</code></strong>去请求我们想要的跨域地址, 因为服务端是不受<strong><code>同源策略</code></strong>的限制的, 具体到开发中,打包工具webpack集成了代理的功能,可以采用配置webpack的方式进行解决, 但是这种仅限于 本地开发期间, 等项目上线时,还是需要另择代理 ngix</p>\n</blockquote>\n<p>以下为webpack配置代理的配置 </p>\n<pre><code class=\"json\"> // 代理设置 \nproxy: {\n    &#39;/api&#39;: {\n        target: &#39;http://www.baidu.com/&#39;,\n        changeOrigin: true,\n        pathRewrite: {\n            &#39;^/api&#39;: &#39;&#39;\n        }\n    }\n}</code></pre>\n<p><strong><code>target</code></strong>：接口域名；</p>\n<p> <strong><code>changeOrigin</code></strong>： 如果设置为<code>true</code>,那么本地会虚拟一个服务端接收你的请求并代你发送该请求；</p>\n<p> <strong><code>pathRewrite</code></strong>：如果接口中是没有api的，那就直接置空（如上）如果接口中有api，就需要写成{‘^/api’:‘/api’}</p>\n<p>真实访问地址  <a href=\"http://www.baidu.com/test\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/test</a> </p>\n<p>/api/test  =&gt;  /api 就是 表示  <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a>  =&gt;webpack 后台 发出的请求(<a href=\"http://www.baidu.com/test\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/test</a> )=&gt;  返回结果  =&gt; 前端</p>\n<p>反向代理  =&gt;   前端   =&gt; 后台 不让你访问 (跨域)</p>\n<p>   前端 =&gt; webpack后台 (代理)(仅限于本地开发模式)     =&gt;后台</p>\n<h2 id=\"Vue中的watch如何深度监听某个对象\"><a href=\"#Vue中的watch如何深度监听某个对象\" class=\"headerlink\" title=\"Vue中的watch如何深度监听某个对象\"></a>Vue中的watch如何深度监听某个对象</h2><blockquote>\n<p>分析: 此题考查Vue的选项watch的应用方式</p>\n<p>解析:  watch最基本的用法是 </p>\n<pre><code class=\"js\">export default {\n    data () {\n        return {\n            name: &#39;张三&#39;\n        }\n    },\n    watch: {\n        name (newValue, oldValue) {\n\n        }\n    }\n}</code></pre>\n<p>上面代码中: 有个原则监听谁,写谁的名字,然后是对应的执行函数, 第一个参数为最新的改变值,第二个值为上一次改变的值, 注意: 除了监听 data,也可以监听<strong><code>计算属性</code></strong> 或者一个 函数的计算结果</p>\n<p>那怎么深度监听对象 ,两种方式</p>\n<ol>\n<li>字符串嵌套方式</li>\n</ol>\n<pre><code class=\"js\">export default {\n    data () {\n        return {\n           a: {\n               b: {\n                   c :&#39;张三&#39;\n               }\n           }\n        }\n    },\n    watch: {\n        &quot;a.b.c&quot;: function (newValue, oldValue) {\n\n        }\n    }\n}</code></pre>\n<ol start=\"2\">\n<li><p>启用深度监听方式</p>\n<pre><code class=\"js\">export default {\n    data () {\n        return {\n           a: {\n               b: {\n                   c :&#39;张三&#39;\n               }\n           }\n        }\n    },\n    watch: {\n        a: {\n            deep: true // deep 为true  意味着开启了深度监听 a对象里面任何数据变化都会触发handler函数,\n            handler(){\n               // handler是一个固定写法\n            }\n        }\n    }\n}</code></pre>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"Vue-keep-alive使用\"><a href=\"#Vue-keep-alive使用\" class=\"headerlink\" title=\"Vue keep-alive使用\"></a>Vue keep-alive使用</h2><blockquote>\n<p>分析: 此题考查Vue中组件缓存的使用 </p>\n<p>解析:  keep-alive是 Vue提供的一个全局组件, Vue的组件是有销毁机制的,比如条件渲染, 路由跳转时 组件都会经历<strong><code>销毁</code></strong>, 再次回到页面时,又会回到 <strong><code>重生</code></strong>, 这一过程保证了生命周期钩子函数各个过程都会在这一生命周期中执行.</p>\n<p>但是,我们辛辛苦苦获取的数据 滑动的页面 会因为组件的销毁 重生 而 <strong><code>归零</code></strong>,这影响了交互的体验, 所以 keep-alvie出现了, 可以帮助我们缓存想要缓存的组件实例, 只用用keep-alive <strong><code>包裹</code></strong>你想要缓存的组件实例, 这个时候, 组件创建之后,就不会再进行 销毁, 组件数据和状态得以保存</p>\n<p>但是,没有了销毁,也就失去了重生的环节, 我们失去了 原有的钩子函数, 所以keep-alive包裹的组件 都获取了另外两个事件 </p>\n<p>唤醒 activited 重新唤醒休眠组件实例时 执行</p>\n<p>休眠 unactiived  组件实例进入休眠状态时执行</p>\n</blockquote>\n<p>但是我们不能缓存所有的组件实例, 如果是针对 组件容器 router-view 这个组件进行的缓存, 一般的策略是在路由的元信息 meta对象中设置是否缓存的标记,  然后根据标记决定是否进行缓存</p>\n<pre><code class=\"js\">  &lt;div id=&quot;app&quot;&gt;\n    &lt;keep-alive&gt;\n      &lt;!-- 里面是当需要缓存时 --&gt;\n      &lt;router-view  v-if=&quot;$route.meta.isAlive&quot; /&gt;\n    &lt;/keep-alive&gt;\n     &lt;!-- 外面是不需要缓存时 --&gt;\n    &lt;router-view  v-if=&quot;!$route.meta.isAlive&quot; /&gt;\n  &lt;/div&gt;</code></pre>\n<p>还有需要注意的问题是:  被缓存的组件中如果还有子组件, 那么子组件也会一并拥有 激活和唤醒事件,并且这些事件会在同时执行</p>\n<h2 id=\"vue的双向数据绑定原理是什么\"><a href=\"#vue的双向数据绑定原理是什么\" class=\"headerlink\" title=\"vue的双向数据绑定原理是什么\"></a>vue的双向数据绑定原理是什么</h2><blockquote>\n<p>分析 :此题考查 Vue的MVVM原理</p>\n<p><strong><code>解答</code></strong>:  Vue的双向绑定原理其实就是MVVM的实现原理, Vuejs官网已经说明, 实际就是通过 Object.defineProperty方法 完成了对于Vue实例中数据的 <strong><code>劫持</code></strong>, 通过对于 data中数据 set的监听,</p>\n<p>然后通过<strong><code>观察者模式</code></strong>, 通知 对应的绑定节点 进行节点数据更新, 完成数据驱动视图的更新</p>\n</blockquote>\n<p>我们实现的MVVM是一个简易版本</p>\n<p>我们并没有做虚拟DOM, 虚拟DOM的问题</p>\n<p>虚拟DOM,并不是真正的DOM, 数据驱动视图, 数据变化  =&gt;  数据 切换成 虚拟DOM, </p>\n<p>新的虚拟DOM 会和 旧的虚拟DOM 进行 diff比较算法, 比较 得出 需要更新的结果, 反映到dom上</p>\n<p>diff比较 =&gt;  其实就是 用一种时间时间复杂度比较低的方式去更新</p>\n<p>新节点    和 旧节点 完成 比较 ,时间复杂度 O(n^n^n), </p>\n<p>diff 比较算法 时间复杂度 是 O(n)  =&gt;   diff 比较算法 只比较同级的节点, 如果同级节点不一致, 就不再比较子级了,</p>\n<p>性能比较高的算法.</p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/af0b398602bc\" target=\"_blank\" rel=\"noopener\">虚拟dom和diff比较</a>    此问题 仅仅存于面试</p>\n</blockquote>\n<p>Vue/React  不推荐 移动节点, 不推荐改变节点的名称, </p>\n<p>旧节点</p>\n<blockquote>\n<p>同理, 通过对于节点的表单值改变事件的监听,  执行对于数据的修改</p>\n</blockquote>\n<p>简单概述 : 通过Object.defineProperty 完成对于数据的劫持, 通过观察者模式, 完成对于节点的数据更新</p>\n<h2 id=\"页面刷新了之后vuex中的数据消失怎么解决\"><a href=\"#页面刷新了之后vuex中的数据消失怎么解决\" class=\"headerlink\" title=\"页面刷新了之后vuex中的数据消失怎么解决\"></a>页面刷新了之后vuex中的数据消失怎么解决</h2><blockquote>\n<p>分析:此题考查 如果将vuex数据进行本地持久化</p>\n<p><strong><code>解析</code></strong>: vuex数据位于内存, 页面的刷新重置会导致数据的<strong><code>归零</code></strong>,也就是所谓的消失,  本地持久化可以解决这个问题.本地持久化用到的技术也就是 本次存储 sesstionStorage 或者 localStorage ,  </p>\n<p>如果需要保持的更长久 ,浏览器关掉 再打开依然存有数据,需要使用后者 </p>\n<p>实施方案:  state的持久化 也就是分别需要在 state数据初始化 /更新 的时候 进行读取和设置本地存储操作</p>\n<p>代码如下 </p>\n<pre><code class=\"js\">export default new Vuex.store({\n   state: {\n       user: localStorge.getItem(&#39;user&#39;)  // 初始化时读取 本地存储\n   },\n   mutations: {\n       updateUser (state, payload) {\n           state.user = payload.user\n           localStoregae.setItem(&#39;user&#39;,payload.user) // 数据更新时 设置本地存储\n       }\n   }\n})</code></pre>\n</blockquote>\n<h2 id=\"vue做服务端渲染\"><a href=\"#vue做服务端渲染\" class=\"headerlink\" title=\"vue做服务端渲染\"></a>vue做服务端渲染</h2><blockquote>\n<p>分析: 为什么要做服务端渲染, 首先要明白 服务端渲染解决什么问题</p>\n<p><strong><code>解析</code></strong>: vuejs 官网说的很明白, 要做服务端渲染首先必须是有对应的需求,即对 实时到达时间(页面访问时间)的绝对需求.  如果只是简单的一个管理系统, 区区几百毫秒的优化 显得十分小题大做.</p>\n<p>服务端渲染这里 有一个成熟优秀的框架 nuxt.js , 正如next.js对于react,nuxt是vue服务端渲染的优秀解决方案</p>\n</blockquote>\n<p>我们几乎可以像原来一样的去开发组件,页面, nuxt帮我们集成了原有项目的插件,模块, 提供了预加载数据事件</p>\n<p>asyncData, 在客户端实现对于服务端内容的<strong><code>完美接管</code></strong></p>\n<p>只不过 这里我们的路由开发方式,需要遵循nuxt.js制定的特殊规范,比如,动态 路由需要 <strong><code>下划线前缀</code></strong>, 嵌套路由需要</p>\n<p>同名组件的文件下下建立组件,并在 同名组件中 加入 nuxt-child 作为 容器  ….</p>\n<blockquote>\n<p>nuxt的出现可以让渲染内容完全服务端化,解决seo不够友好, 首屏渲染速度不够迅速的问题,</p>\n<p>但是这里需要注意: 并不是所有页面都需要服务端渲染, 因为服务端渲染比重多大 对于服务器的访问处理能力 要求也会急剧增大</p>\n</blockquote>\n<p><a href=\"https://zh.nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">nuxt.js官网</a></p>\n<h2 id=\"双向数据绑定和vuex冲突解决方案\"><a href=\"#双向数据绑定和vuex冲突解决方案\" class=\"headerlink\" title=\"双向数据绑定和vuex冲突解决方案\"></a>双向数据绑定和vuex冲突解决方案</h2><blockquote>\n<p>分析: 此题考查 当Vuex数据想要进行逆向操作,也就是 双向数据流向的解决方案</p>\n<p><strong><code>解析</code></strong>:   vuex的数据对于组件来说,默认是不可改的, 但是如果我们就是想改, 可以利用 computed计算属性的另一个方法 , 我们知道计算属性 默认是数据的getter实现, 但是我们可以采用 对于 计算属性 同时get/set的实现,</p>\n<p>双向数据流 中 当对 计算属性设置时 ,就可以通过 store对象进行再次的mutations提交 </p>\n<p>具体代码如下</p>\n<pre><code class=\"js\">import Vue from &#39;vue&#39;\nimport Vuex from &#39;vuex&#39;\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\nstate: {\n count: 0,\n value: &#39;&#39; // 定义value数据 作为vuex状态数据\n},\nmutations: {\n addCount (state) {\n   state.count++\n },\n   // 定义mutations方法 作为 提交mutations的方法\n updateValue (state, payload) {\n   state.value = payload.value\n }\n},\nactions: {\n},\nmodules: {\n}\n})\n</code></pre>\n<pre><code class=\"vue\">&lt;template&gt;\n&lt;div&gt;\n   &lt;div&gt;vuex的双向数据流&lt;/div&gt;\n   &lt;input type=&quot;text&quot; v-model=&quot;value&quot;&gt;\n   &lt;div&gt;Vuex数据属性: {{value }}&lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapMutations } from &#39;vuex&#39;\nexport default {\nmethods: {\n ...mapMutations([&#39;updateValue&#39;])\n},\n    // 计算属性的get/set\ncomputed: {\n value: {\n   get () {\n       // 获取state公共数据\n     return this.$store.state.value\n   },\n    // 通过对 计算属性的set监听 将 数据提交mutations\n     // 当input中数据变化时 就会调用set中的方法  value就是最新值\n   set (value) {\n     this.updateValue({ value: value })  // 在set中提交mutations\n   }\n }\n}\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n\n&lt;/style&gt;\n</code></pre>\n</blockquote>\n<h2 id=\"vue-router传参\"><a href=\"#vue-router传参\" class=\"headerlink\" title=\"vue-router传参\"></a>vue-router传参</h2><blockquote>\n<p>分析:考查vue-router的传值方式</p>\n<p><strong><code>解析</code></strong>  vue-router 传值 可以通过 地址传值</p>\n<p>最简单的就是url传值, url传值又两种, params 和 query参数传值</p>\n<p>params传值 是指的动态路由传值 </p>\n<pre><code class=\"vue\">{  path: &#39;/user/:id&#39; }  // 定义一个路由参数\n&lt;router-link to=&quot;/user/123&quot;&gt;&lt;/router-link&gt;  // 传值\nthis.$route.params.id   // 取值\n</code></pre>\n<p>query传值,指通过?后面的拼接参数传值</p>\n<pre><code class=\"vue\">\n&lt;router-link to=&quot;/user?id=123&quot;&gt;&lt;/router-link&gt;  // 传值\nthis.$route.query.id   // 取值</code></pre>\n</blockquote>\n<h2 id=\"前端鉴权一般思路\"><a href=\"#前端鉴权一般思路\" class=\"headerlink\" title=\"前端鉴权一般思路\"></a>前端鉴权一般思路</h2><blockquote>\n<p>分析: 考查前后分离的鉴权思路</p>\n</blockquote>\n<p><strong><code>解析</code></strong>: 首先要明白 为什么要在前端鉴权? 因为传统项目都是在后端鉴权, 然后通过进行拦截 跳转 对应操作</p>\n<p>因为 我们做的并不是传统的项目,而是前后分离项目,也就是前端项目和后端服务进行了<strong><code>剥离</code></strong>, 后端没有办法用session来存储你任意一个前端项目域名下的身份信息, 所以jwt 鉴权模式应运而生. </p>\n<p>​    也就是后端不再提供会话的身份存储,而是通过一个鉴权接口将用户的身份,登录时间,请求端口,协议头..等等信息 组装成一个加密的串 返给前端请求,  前端拿到了这个串,就可以认为自己登录成功</p>\n<p>那么这个<strong><code>加密串</code></strong>就成了 前端用户是否登录的成功标志, 这就是我们的token , 那么在接下来的接口请求中,我们几乎都要携带这个加密串,因为它是<strong><code>唯一</code></strong>能<strong><code>证明我们身份</code></strong>的信息.</p>\n<p>为了方便,我们会一般在请求工具 axios(举例)的拦截器中<strong><code>统一注入token</code></strong>, 减少代码的重复</p>\n<p>token 同时具有时效性,我们也需要在此时对token过期进行处理,一旦出现过期的请求码, 就需要进行 换取新token 或者重新登录的解决方案</p>\n<p>除此之外,我们还需要依据<strong><code>有无加密串</code></strong> 在前端对于某些页面的访问进行限制, 这个会用到我们的Vue-Router中的导航守卫.</p>\n"},{"title":"预习路线","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-19T21:41:09.000Z","password":null,"summary":"分享学习路线以及一些学习资料","typora-root-url":"预习路线","_content":"\n<div align = \"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe></div>\n\n\n\n# 预习路线\n\n- ajax  ---  node  ---  vue  --- 小程序 --- react \n\n## AJAX\n\n**[Part1](https://www.bilibili.com/video/av15657082 )**不看php可以从第37个视频开始看\n\n**[Part2](https://www.bilibili.com/video/av15866060/?spm_id_from=333.788.videocard.0)**\n\n[课件网盘链接](https://pan.baidu.com/s/1w-lcQCMTNLuSEg0e_hpKuQ) -- 提取码:mc10\n\n这个ajax的视频比较老了,,,\n\n又另外找了一个备看\n\n[李南江亲授-jQuery+Ajax从放弃到知根知底](https://www.bilibili.com/video/av22807707/?spm_id_from=333.788.videocard.4)\n\n## Node\n\n[NodeJs全套视频教程](https://www.bilibili.com/video/av81455397)\n\n[课件网盘链接](https://pan.baidu.com/s/1DuXusxfxaiUscfvDb0a9LA ) -- 提取码: nzys \n\n## VUE\n\n**[Pink 老师推荐-Vue.js快速入门课程](https://www.bilibili.com/video/av75420619/?spm_id_from=333.788.videocard.2)** \n\n**[Vue-黑马程序员视频](https://www.bilibili.com/video/av50680998)** --->p1--p199是2018经典vue基础+项目实战教程---p200至最后是2019年最新的vue全家桶(包含了比较流行的新技术)+项目实战教程\n\n# 资料\n\n[Git](https://thirtyzhang.github.io/git)\n\n[百度脑图](https://naotu.baidu.com/)\n\n[BootCDN](https://www.bootcdn.cn/)\n\n[Underscore.js (1.9.1) 中文文档 ](https://www.html.cn/doc/underscore/#throttle)\n\n[模板引擎](https://aui.github.io/art-template/zh-cn/ )\n\n[Bypass-分流抢票](https://www.bypass.cn/)\n\n## 学习站点\n\n[廖雪峰](https://www.liaoxuefeng.com/)\n\n[阮一峰](http://www.ruanyifeng.com/blog/)\n\ngit - 典型错误\n\n![png](1.png)\n\n\n\n## 手动封装数组方法\n\n\n```js\n        var arr = [5,6,7];\n        function myForEach(fn) {\n            for(var i = 0 ; i < this.length; i++){\n                fn(this[i],i,this); //循环调用回调函数,遍历数组中的值\n            }\n        }\n\n        console.log(myForEach);\n        \n        Array.prototype.myForEach = myForEach; //把函数添加为Array的原型方法\n\n        //调用\n        arr.myForEach(function (item,index,arr) {\n            console.log(item,index,arr);\n        })\n```\n\n## 典型错误\n\n**npm install** 的时候出现错误：\n\nnpm ERR! Unexpected end of JSON input while parsing near '...\",\"webpack-dev-server'\n1\n解决方案：\n\n第一步：\n\nnpm cache clean --force\n1\n第二步：（再安装）\n\nnpm install","source":"_posts/预习路线.md","raw":"---\ntitle: 预习路线\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-20 05:41:09\npassword:\nsummary: 分享学习路线以及一些学习资料\ntags:\n- 学习\ncategories:\n- 学习\ntypora-root-url: 预习路线\n---\n\n<div align = \"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe></div>\n\n\n\n# 预习路线\n\n- ajax  ---  node  ---  vue  --- 小程序 --- react \n\n## AJAX\n\n**[Part1](https://www.bilibili.com/video/av15657082 )**不看php可以从第37个视频开始看\n\n**[Part2](https://www.bilibili.com/video/av15866060/?spm_id_from=333.788.videocard.0)**\n\n[课件网盘链接](https://pan.baidu.com/s/1w-lcQCMTNLuSEg0e_hpKuQ) -- 提取码:mc10\n\n这个ajax的视频比较老了,,,\n\n又另外找了一个备看\n\n[李南江亲授-jQuery+Ajax从放弃到知根知底](https://www.bilibili.com/video/av22807707/?spm_id_from=333.788.videocard.4)\n\n## Node\n\n[NodeJs全套视频教程](https://www.bilibili.com/video/av81455397)\n\n[课件网盘链接](https://pan.baidu.com/s/1DuXusxfxaiUscfvDb0a9LA ) -- 提取码: nzys \n\n## VUE\n\n**[Pink 老师推荐-Vue.js快速入门课程](https://www.bilibili.com/video/av75420619/?spm_id_from=333.788.videocard.2)** \n\n**[Vue-黑马程序员视频](https://www.bilibili.com/video/av50680998)** --->p1--p199是2018经典vue基础+项目实战教程---p200至最后是2019年最新的vue全家桶(包含了比较流行的新技术)+项目实战教程\n\n# 资料\n\n[Git](https://thirtyzhang.github.io/git)\n\n[百度脑图](https://naotu.baidu.com/)\n\n[BootCDN](https://www.bootcdn.cn/)\n\n[Underscore.js (1.9.1) 中文文档 ](https://www.html.cn/doc/underscore/#throttle)\n\n[模板引擎](https://aui.github.io/art-template/zh-cn/ )\n\n[Bypass-分流抢票](https://www.bypass.cn/)\n\n## 学习站点\n\n[廖雪峰](https://www.liaoxuefeng.com/)\n\n[阮一峰](http://www.ruanyifeng.com/blog/)\n\ngit - 典型错误\n\n![png](1.png)\n\n\n\n## 手动封装数组方法\n\n\n```js\n        var arr = [5,6,7];\n        function myForEach(fn) {\n            for(var i = 0 ; i < this.length; i++){\n                fn(this[i],i,this); //循环调用回调函数,遍历数组中的值\n            }\n        }\n\n        console.log(myForEach);\n        \n        Array.prototype.myForEach = myForEach; //把函数添加为Array的原型方法\n\n        //调用\n        arr.myForEach(function (item,index,arr) {\n            console.log(item,index,arr);\n        })\n```\n\n## 典型错误\n\n**npm install** 的时候出现错误：\n\nnpm ERR! Unexpected end of JSON input while parsing near '...\",\"webpack-dev-server'\n1\n解决方案：\n\n第一步：\n\nnpm cache clean --force\n1\n第二步：（再安装）\n\nnpm install","slug":"预习路线","published":1,"updated":"2020-01-20T20:21:18.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkez001dwcq4hqk0ptat","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe></div>\n\n\n\n<h1 id=\"预习路线\"><a href=\"#预习路线\" class=\"headerlink\" title=\"预习路线\"></a>预习路线</h1><ul>\n<li>ajax  —  node  —  vue  — 小程序 — react </li>\n</ul>\n<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><p><strong><a href=\"https://www.bilibili.com/video/av15657082\" target=\"_blank\" rel=\"noopener\">Part1</a></strong>不看php可以从第37个视频开始看</p>\n<p><strong><a href=\"https://www.bilibili.com/video/av15866060/?spm_id_from=333.788.videocard.0\" target=\"_blank\" rel=\"noopener\">Part2</a></strong></p>\n<p><a href=\"https://pan.baidu.com/s/1w-lcQCMTNLuSEg0e_hpKuQ\" target=\"_blank\" rel=\"noopener\">课件网盘链接</a> – 提取码:mc10</p>\n<p>这个ajax的视频比较老了,,,</p>\n<p>又另外找了一个备看</p>\n<p><a href=\"https://www.bilibili.com/video/av22807707/?spm_id_from=333.788.videocard.4\" target=\"_blank\" rel=\"noopener\">李南江亲授-jQuery+Ajax从放弃到知根知底</a></p>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><p><a href=\"https://www.bilibili.com/video/av81455397\" target=\"_blank\" rel=\"noopener\">NodeJs全套视频教程</a></p>\n<p><a href=\"https://pan.baidu.com/s/1DuXusxfxaiUscfvDb0a9LA\" target=\"_blank\" rel=\"noopener\">课件网盘链接</a> – 提取码: nzys </p>\n<h2 id=\"VUE\"><a href=\"#VUE\" class=\"headerlink\" title=\"VUE\"></a>VUE</h2><p><strong><a href=\"https://www.bilibili.com/video/av75420619/?spm_id_from=333.788.videocard.2\" target=\"_blank\" rel=\"noopener\">Pink 老师推荐-Vue.js快速入门课程</a></strong> </p>\n<p><strong><a href=\"https://www.bilibili.com/video/av50680998\" target=\"_blank\" rel=\"noopener\">Vue-黑马程序员视频</a></strong> —&gt;p1–p199是2018经典vue基础+项目实战教程—p200至最后是2019年最新的vue全家桶(包含了比较流行的新技术)+项目实战教程</p>\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p><a href=\"https://thirtyzhang.github.io/git\">Git</a></p>\n<p><a href=\"https://naotu.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度脑图</a></p>\n<p><a href=\"https://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener\">BootCDN</a></p>\n<p><a href=\"https://www.html.cn/doc/underscore/#throttle\" target=\"_blank\" rel=\"noopener\">Underscore.js (1.9.1) 中文文档 </a></p>\n<p><a href=\"https://aui.github.io/art-template/zh-cn/\" target=\"_blank\" rel=\"noopener\">模板引擎</a></p>\n<p><a href=\"https://www.bypass.cn/\" target=\"_blank\" rel=\"noopener\">Bypass-分流抢票</a></p>\n<h2 id=\"学习站点\"><a href=\"#学习站点\" class=\"headerlink\" title=\"学习站点\"></a>学习站点</h2><p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">廖雪峰</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a></p>\n<p>git - 典型错误</p>\n<p><img src=\"1.png\" alt=\"png\"></p>\n<h2 id=\"手动封装数组方法\"><a href=\"#手动封装数组方法\" class=\"headerlink\" title=\"手动封装数组方法\"></a>手动封装数组方法</h2><pre class=\"line-numbers language-js\"><code class=\"language-js\">        <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">myForEach</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//循环调用回调函数,遍历数组中的值</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myForEach<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>myForEach <span class=\"token operator\">=</span> myForEach<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//把函数添加为Array的原型方法</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//调用</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">myForEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"典型错误\"><a href=\"#典型错误\" class=\"headerlink\" title=\"典型错误\"></a>典型错误</h2><p><strong>npm install</strong> 的时候出现错误：</p>\n<p>npm ERR! Unexpected end of JSON input while parsing near ‘…”,”webpack-dev-server’<br>1<br>解决方案：</p>\n<p>第一步：</p>\n<p>npm cache clean –force<br>1<br>第二步：（再安装）</p>\n<p>npm install</p>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe></div>\n\n\n\n<h1 id=\"预习路线\"><a href=\"#预习路线\" class=\"headerlink\" title=\"预习路线\"></a>预习路线</h1><ul>\n<li>ajax  —  node  —  vue  — 小程序 — react </li>\n</ul>\n<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><p><strong><a href=\"https://www.bilibili.com/video/av15657082\" target=\"_blank\" rel=\"noopener\">Part1</a></strong>不看php可以从第37个视频开始看</p>\n<p><strong><a href=\"https://www.bilibili.com/video/av15866060/?spm_id_from=333.788.videocard.0\" target=\"_blank\" rel=\"noopener\">Part2</a></strong></p>\n<p><a href=\"https://pan.baidu.com/s/1w-lcQCMTNLuSEg0e_hpKuQ\" target=\"_blank\" rel=\"noopener\">课件网盘链接</a> – 提取码:mc10</p>\n<p>这个ajax的视频比较老了,,,</p>\n<p>又另外找了一个备看</p>\n<p><a href=\"https://www.bilibili.com/video/av22807707/?spm_id_from=333.788.videocard.4\" target=\"_blank\" rel=\"noopener\">李南江亲授-jQuery+Ajax从放弃到知根知底</a></p>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><p><a href=\"https://www.bilibili.com/video/av81455397\" target=\"_blank\" rel=\"noopener\">NodeJs全套视频教程</a></p>\n<p><a href=\"https://pan.baidu.com/s/1DuXusxfxaiUscfvDb0a9LA\" target=\"_blank\" rel=\"noopener\">课件网盘链接</a> – 提取码: nzys </p>\n<h2 id=\"VUE\"><a href=\"#VUE\" class=\"headerlink\" title=\"VUE\"></a>VUE</h2><p><strong><a href=\"https://www.bilibili.com/video/av75420619/?spm_id_from=333.788.videocard.2\" target=\"_blank\" rel=\"noopener\">Pink 老师推荐-Vue.js快速入门课程</a></strong> </p>\n<p><strong><a href=\"https://www.bilibili.com/video/av50680998\" target=\"_blank\" rel=\"noopener\">Vue-黑马程序员视频</a></strong> —&gt;p1–p199是2018经典vue基础+项目实战教程—p200至最后是2019年最新的vue全家桶(包含了比较流行的新技术)+项目实战教程</p>\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p><a href=\"https://thirtyzhang.github.io/git\">Git</a></p>\n<p><a href=\"https://naotu.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度脑图</a></p>\n<p><a href=\"https://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener\">BootCDN</a></p>\n<p><a href=\"https://www.html.cn/doc/underscore/#throttle\" target=\"_blank\" rel=\"noopener\">Underscore.js (1.9.1) 中文文档 </a></p>\n<p><a href=\"https://aui.github.io/art-template/zh-cn/\" target=\"_blank\" rel=\"noopener\">模板引擎</a></p>\n<p><a href=\"https://www.bypass.cn/\" target=\"_blank\" rel=\"noopener\">Bypass-分流抢票</a></p>\n<h2 id=\"学习站点\"><a href=\"#学习站点\" class=\"headerlink\" title=\"学习站点\"></a>学习站点</h2><p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">廖雪峰</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a></p>\n<p>git - 典型错误</p>\n<p><img src=\"1.png\" alt=\"png\"></p>\n<h2 id=\"手动封装数组方法\"><a href=\"#手动封装数组方法\" class=\"headerlink\" title=\"手动封装数组方法\"></a>手动封装数组方法</h2><pre><code class=\"js\">        var arr = [5,6,7];\n        function myForEach(fn) {\n            for(var i = 0 ; i &lt; this.length; i++){\n                fn(this[i],i,this); //循环调用回调函数,遍历数组中的值\n            }\n        }\n\n        console.log(myForEach);\n\n        Array.prototype.myForEach = myForEach; //把函数添加为Array的原型方法\n\n        //调用\n        arr.myForEach(function (item,index,arr) {\n            console.log(item,index,arr);\n        })</code></pre>\n<h2 id=\"典型错误\"><a href=\"#典型错误\" class=\"headerlink\" title=\"典型错误\"></a>典型错误</h2><p><strong>npm install</strong> 的时候出现错误：</p>\n<p>npm ERR! Unexpected end of JSON input while parsing near ‘…”,”webpack-dev-server’<br>1<br>解决方案：</p>\n<p>第一步：</p>\n<p>npm cache clean –force<br>1<br>第二步：（再安装）</p>\n<p>npm install</p>\n"},{"title":"浏览器音乐插件 - Listen 1","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-31T05:10:37.000Z","password":null,"summary":"这里包含了网易云音乐，虾米，QQ音乐, 酷狗音乐，酷我音乐的曲库","_content":"\n\n# Listen 1 (Chrome Extension) V2.5.1\n\n（最后更新于2019年09月07日）\n\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](LICENSE)\n\n[English Version](https://github.com/listen1/listen1_chrome_extension/blob/master/README_EN.md)\n\n## 缘起\n\n当我发现找个想听的歌因为版权听不了，需要打开好几个网站开始搜索，来回切换让我抓狂的时候，我知道是时候该做点什么了。\n\n妈妈再也不用担心我找不到我想听的歌了。这里包含了网易云音乐，虾米，QQ音乐, 酷狗音乐，酷我音乐的曲库，够全够大了吧。\n\n搜歌，听歌，就用 `Listen1`。\n\n\n\n还有精选歌单哦。\n\n## Chrome安装\n\n1. 下载项目的zip文件，[点击下载](https://pan.baidu.com/s/1UAbIrSmP5cOX4SX85pq0kQ) , 提取码 : `jj9q`解压到本地\n2. chrome右上角的设置按钮下找到更多工具，打开`扩展程序`\n3. 选择 `加载已解压的扩展程序`(如果没有显示先选中`开发者模式`)，选中解压后的文件夹，完成！\n\n## Firefox打包安装\n\n### 打包xpi文件（或在release页面下载已经打包好的xpi文件）\n\n1. 将根目录下manifest_firefox.json替换manifest.json\n2. `cd listen1_chrome_extension`\n3. `zip -r ../listen1.xpi *`\n\n### 安装\n\n1. 打开Firefox，加载xpi文件，完成安装\n\n## 更新日志\n\n`2019-09-07`\n\n- 修复migu无法播放的bug\n\n`2019-08-09`\n\n- 增加深色主题\n\n`2019-07-03`\n\n- 修复咪咕音乐无法播放的bug\n\n`2019-06-24`\n\n- 增加咪咕音乐\n- 修复网易音乐无法播放的bug\n- 修复酷狗音乐无法播放的bug\n\n`2019-06-23`\n\n- 修复无法连接到github的bug\n\n`2019-05-26`\n\n- 修复酷狗音乐无法播放的bug\n\n`2019-04-26`\n\n- 修复虾米音乐无法播放的bug\n- 修复播放器未在页面底端显示的bug\n\n`2019-03-03`\n\n- 修复删除单个歌曲导致歌单所有歌曲消失的bug\n- 修复删除单个歌单导致所有歌单消失的bug\n\n`2019-02-26`\n\n- 修复qq音乐歌单无法显示的bug\n\n","source":"_posts/音乐插件.md","raw":"---\ntitle: 浏览器音乐插件 - Listen 1\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-31 13:10:37\npassword:\nsummary: 这里包含了网易云音乐，虾米，QQ音乐, 酷狗音乐，酷我音乐的曲库\ntags:\n- 工具\ncategories:\n- 音乐\n---\n\n\n# Listen 1 (Chrome Extension) V2.5.1\n\n（最后更新于2019年09月07日）\n\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](LICENSE)\n\n[English Version](https://github.com/listen1/listen1_chrome_extension/blob/master/README_EN.md)\n\n## 缘起\n\n当我发现找个想听的歌因为版权听不了，需要打开好几个网站开始搜索，来回切换让我抓狂的时候，我知道是时候该做点什么了。\n\n妈妈再也不用担心我找不到我想听的歌了。这里包含了网易云音乐，虾米，QQ音乐, 酷狗音乐，酷我音乐的曲库，够全够大了吧。\n\n搜歌，听歌，就用 `Listen1`。\n\n\n\n还有精选歌单哦。\n\n## Chrome安装\n\n1. 下载项目的zip文件，[点击下载](https://pan.baidu.com/s/1UAbIrSmP5cOX4SX85pq0kQ) , 提取码 : `jj9q`解压到本地\n2. chrome右上角的设置按钮下找到更多工具，打开`扩展程序`\n3. 选择 `加载已解压的扩展程序`(如果没有显示先选中`开发者模式`)，选中解压后的文件夹，完成！\n\n## Firefox打包安装\n\n### 打包xpi文件（或在release页面下载已经打包好的xpi文件）\n\n1. 将根目录下manifest_firefox.json替换manifest.json\n2. `cd listen1_chrome_extension`\n3. `zip -r ../listen1.xpi *`\n\n### 安装\n\n1. 打开Firefox，加载xpi文件，完成安装\n\n## 更新日志\n\n`2019-09-07`\n\n- 修复migu无法播放的bug\n\n`2019-08-09`\n\n- 增加深色主题\n\n`2019-07-03`\n\n- 修复咪咕音乐无法播放的bug\n\n`2019-06-24`\n\n- 增加咪咕音乐\n- 修复网易音乐无法播放的bug\n- 修复酷狗音乐无法播放的bug\n\n`2019-06-23`\n\n- 修复无法连接到github的bug\n\n`2019-05-26`\n\n- 修复酷狗音乐无法播放的bug\n\n`2019-04-26`\n\n- 修复虾米音乐无法播放的bug\n- 修复播放器未在页面底端显示的bug\n\n`2019-03-03`\n\n- 修复删除单个歌曲导致歌单所有歌曲消失的bug\n- 修复删除单个歌单导致所有歌单消失的bug\n\n`2019-02-26`\n\n- 修复qq音乐歌单无法显示的bug\n\n","slug":"音乐插件","published":1,"updated":"2020-02-29T17:02:03.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck91frkf1001gwcq4er37vdv9","content":"<h1 id=\"Listen-1-Chrome-Extension-V2-5-1\"><a href=\"#Listen-1-Chrome-Extension-V2-5-1\" class=\"headerlink\" title=\"Listen 1 (Chrome Extension) V2.5.1\"></a>Listen 1 (Chrome Extension) V2.5.1</h1><p>（最后更新于2019年09月07日）</p>\n<p><a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg\" alt=\"Software License\"></a></p>\n<p><a href=\"https://github.com/listen1/listen1_chrome_extension/blob/master/README_EN.md\" target=\"_blank\" rel=\"noopener\">English Version</a></p>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>当我发现找个想听的歌因为版权听不了，需要打开好几个网站开始搜索，来回切换让我抓狂的时候，我知道是时候该做点什么了。</p>\n<p>妈妈再也不用担心我找不到我想听的歌了。这里包含了网易云音乐，虾米，QQ音乐, 酷狗音乐，酷我音乐的曲库，够全够大了吧。</p>\n<p>搜歌，听歌，就用 <code>Listen1</code>。</p>\n<p>还有精选歌单哦。</p>\n<h2 id=\"Chrome安装\"><a href=\"#Chrome安装\" class=\"headerlink\" title=\"Chrome安装\"></a>Chrome安装</h2><ol>\n<li>下载项目的zip文件，<a href=\"https://pan.baidu.com/s/1UAbIrSmP5cOX4SX85pq0kQ\" target=\"_blank\" rel=\"noopener\">点击下载</a> , 提取码 : <code>jj9q</code>解压到本地</li>\n<li>chrome右上角的设置按钮下找到更多工具，打开<code>扩展程序</code></li>\n<li>选择 <code>加载已解压的扩展程序</code>(如果没有显示先选中<code>开发者模式</code>)，选中解压后的文件夹，完成！</li>\n</ol>\n<h2 id=\"Firefox打包安装\"><a href=\"#Firefox打包安装\" class=\"headerlink\" title=\"Firefox打包安装\"></a>Firefox打包安装</h2><h3 id=\"打包xpi文件（或在release页面下载已经打包好的xpi文件）\"><a href=\"#打包xpi文件（或在release页面下载已经打包好的xpi文件）\" class=\"headerlink\" title=\"打包xpi文件（或在release页面下载已经打包好的xpi文件）\"></a>打包xpi文件（或在release页面下载已经打包好的xpi文件）</h3><ol>\n<li>将根目录下manifest_firefox.json替换manifest.json</li>\n<li><code>cd listen1_chrome_extension</code></li>\n<li><code>zip -r ../listen1.xpi *</code></li>\n</ol>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>打开Firefox，加载xpi文件，完成安装</li>\n</ol>\n<h2 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h2><p><code>2019-09-07</code></p>\n<ul>\n<li>修复migu无法播放的bug</li>\n</ul>\n<p><code>2019-08-09</code></p>\n<ul>\n<li>增加深色主题</li>\n</ul>\n<p><code>2019-07-03</code></p>\n<ul>\n<li>修复咪咕音乐无法播放的bug</li>\n</ul>\n<p><code>2019-06-24</code></p>\n<ul>\n<li>增加咪咕音乐</li>\n<li>修复网易音乐无法播放的bug</li>\n<li>修复酷狗音乐无法播放的bug</li>\n</ul>\n<p><code>2019-06-23</code></p>\n<ul>\n<li>修复无法连接到github的bug</li>\n</ul>\n<p><code>2019-05-26</code></p>\n<ul>\n<li>修复酷狗音乐无法播放的bug</li>\n</ul>\n<p><code>2019-04-26</code></p>\n<ul>\n<li>修复虾米音乐无法播放的bug</li>\n<li>修复播放器未在页面底端显示的bug</li>\n</ul>\n<p><code>2019-03-03</code></p>\n<ul>\n<li>修复删除单个歌曲导致歌单所有歌曲消失的bug</li>\n<li>修复删除单个歌单导致所有歌单消失的bug</li>\n</ul>\n<p><code>2019-02-26</code></p>\n<ul>\n<li>修复qq音乐歌单无法显示的bug</li>\n</ul>\n","site":{"data":{"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}],"musics":[{"name":"aloha heja he","artist":" - 群星","url":"/medias/music/1.m4a","cover":"/medias/music/avatars/7.jpg"}]}},"excerpt":"","more":"<h1 id=\"Listen-1-Chrome-Extension-V2-5-1\"><a href=\"#Listen-1-Chrome-Extension-V2-5-1\" class=\"headerlink\" title=\"Listen 1 (Chrome Extension) V2.5.1\"></a>Listen 1 (Chrome Extension) V2.5.1</h1><p>（最后更新于2019年09月07日）</p>\n<p><a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg\" alt=\"Software License\"></a></p>\n<p><a href=\"https://github.com/listen1/listen1_chrome_extension/blob/master/README_EN.md\" target=\"_blank\" rel=\"noopener\">English Version</a></p>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>当我发现找个想听的歌因为版权听不了，需要打开好几个网站开始搜索，来回切换让我抓狂的时候，我知道是时候该做点什么了。</p>\n<p>妈妈再也不用担心我找不到我想听的歌了。这里包含了网易云音乐，虾米，QQ音乐, 酷狗音乐，酷我音乐的曲库，够全够大了吧。</p>\n<p>搜歌，听歌，就用 <code>Listen1</code>。</p>\n<p>还有精选歌单哦。</p>\n<h2 id=\"Chrome安装\"><a href=\"#Chrome安装\" class=\"headerlink\" title=\"Chrome安装\"></a>Chrome安装</h2><ol>\n<li>下载项目的zip文件，<a href=\"https://pan.baidu.com/s/1UAbIrSmP5cOX4SX85pq0kQ\" target=\"_blank\" rel=\"noopener\">点击下载</a> , 提取码 : <code>jj9q</code>解压到本地</li>\n<li>chrome右上角的设置按钮下找到更多工具，打开<code>扩展程序</code></li>\n<li>选择 <code>加载已解压的扩展程序</code>(如果没有显示先选中<code>开发者模式</code>)，选中解压后的文件夹，完成！</li>\n</ol>\n<h2 id=\"Firefox打包安装\"><a href=\"#Firefox打包安装\" class=\"headerlink\" title=\"Firefox打包安装\"></a>Firefox打包安装</h2><h3 id=\"打包xpi文件（或在release页面下载已经打包好的xpi文件）\"><a href=\"#打包xpi文件（或在release页面下载已经打包好的xpi文件）\" class=\"headerlink\" title=\"打包xpi文件（或在release页面下载已经打包好的xpi文件）\"></a>打包xpi文件（或在release页面下载已经打包好的xpi文件）</h3><ol>\n<li>将根目录下manifest_firefox.json替换manifest.json</li>\n<li><code>cd listen1_chrome_extension</code></li>\n<li><code>zip -r ../listen1.xpi *</code></li>\n</ol>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>打开Firefox，加载xpi文件，完成安装</li>\n</ol>\n<h2 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h2><p><code>2019-09-07</code></p>\n<ul>\n<li>修复migu无法播放的bug</li>\n</ul>\n<p><code>2019-08-09</code></p>\n<ul>\n<li>增加深色主题</li>\n</ul>\n<p><code>2019-07-03</code></p>\n<ul>\n<li>修复咪咕音乐无法播放的bug</li>\n</ul>\n<p><code>2019-06-24</code></p>\n<ul>\n<li>增加咪咕音乐</li>\n<li>修复网易音乐无法播放的bug</li>\n<li>修复酷狗音乐无法播放的bug</li>\n</ul>\n<p><code>2019-06-23</code></p>\n<ul>\n<li>修复无法连接到github的bug</li>\n</ul>\n<p><code>2019-05-26</code></p>\n<ul>\n<li>修复酷狗音乐无法播放的bug</li>\n</ul>\n<p><code>2019-04-26</code></p>\n<ul>\n<li>修复虾米音乐无法播放的bug</li>\n<li>修复播放器未在页面底端显示的bug</li>\n</ul>\n<p><code>2019-03-03</code></p>\n<ul>\n<li>修复删除单个歌曲导致歌单所有歌曲消失的bug</li>\n<li>修复删除单个歌单导致所有歌单消失的bug</li>\n</ul>\n<p><code>2019-02-26</code></p>\n<ul>\n<li>修复qq音乐歌单无法显示的bug</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/JavaScript同步和异步/1579733173618.png","post":"ck91frke4000fwcq4i5kefzvf","slug":"1579733173618.png","modified":1,"renderable":1},{"_id":"source/_posts/预习路线/1.png","post":"ck91frkez001dwcq4hqk0ptat","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建个人博客/1579682303863.png","slug":"1579682303863.png","post":"ck91frkdq0007wcq4iqk3uduh","modified":1,"renderable":0},{"_id":"source/_posts/Hexo搭建个人博客/1579706750493.png","post":"ck91frkdq0007wcq4iqk3uduh","slug":"1579706750493.png","modified":1,"renderable":1},{"_id":"source/_posts/Markdown语法/2.png","post":"ck91frkec000mwcq4u30p19kw","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Markdown语法/3.png","post":"ck91frkec000mwcq4u30p19kw","slug":"3.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck91frkdc0001wcq4o2uz0k7s","category_id":"ck91frkdn0005wcq4r3d5rhlo","_id":"ck91frke8000hwcq45981sm2p"},{"post_id":"ck91frkdk0003wcq42w22ebjd","category_id":"ck91frke2000cwcq4i60y2i3u","_id":"ck91frkee000owcq4hvaaoviq"},{"post_id":"ck91frkdq0007wcq4iqk3uduh","category_id":"ck91frke2000cwcq4i60y2i3u","_id":"ck91frkei000twcq466hp36rc"},{"post_id":"ck91frkec000mwcq4u30p19kw","category_id":"ck91frke2000cwcq4i60y2i3u","_id":"ck91frker000ywcq4d9dfbvwm"},{"post_id":"ck91frkef000qwcq4ajqrcs92","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkes0011wcq4om56rquc"},{"post_id":"ck91frkdw0009wcq45ks2nkmt","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkew0016wcq4envvm09k"},{"post_id":"ck91frkeh000swcq4b571i091","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkey0019wcq4o6jwzhr0"},{"post_id":"ck91frkep000xwcq41q3alxsu","category_id":"ck91frke2000cwcq4i60y2i3u","_id":"ck91frkf0001ewcq40kcx700c"},{"post_id":"ck91frke1000bwcq49929w333","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkf2001hwcq46al9y2da"},{"post_id":"ck91frker0010wcq4mgrllrmk","category_id":"ck91frke2000cwcq4i60y2i3u","_id":"ck91frkf4001lwcq43u6txhzw"},{"post_id":"ck91frkeu0015wcq40dtqud9m","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkf5001nwcq4otvyqglx"},{"post_id":"ck91frke4000fwcq4i5kefzvf","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkf6001rwcq468r97xnh"},{"post_id":"ck91frkew0018wcq4zg1lbzxs","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkf6001twcq4lzmxk15n"},{"post_id":"ck91frke6000gwcq4xbgsvses","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkf8001vwcq4553eyip4"},{"post_id":"ck91frkea000kwcq48jk9u4ve","category_id":"ck91frkee000nwcq46l7uf0um","_id":"ck91frkf9001ywcq43izefqmj"},{"post_id":"ck91frkez001dwcq4hqk0ptat","category_id":"ck91frkf5001owcq4s2lw3zfx","_id":"ck91frkf9001zwcq45v2ptsmj"},{"post_id":"ck91frkf1001gwcq4er37vdv9","category_id":"ck91frkf7001uwcq488lloplv","_id":"ck91frkfb0022wcq4ke6jlunc"}],"PostTag":[{"post_id":"ck91frkdc0001wcq4o2uz0k7s","tag_id":"ck91frkdp0006wcq4hpzzntpu","_id":"ck91frke4000ewcq4wamte11o"},{"post_id":"ck91frkdk0003wcq42w22ebjd","tag_id":"ck91frke3000dwcq4mogo0rbh","_id":"ck91frkec000lwcq45hy4jyiq"},{"post_id":"ck91frkdq0007wcq4iqk3uduh","tag_id":"ck91frke8000jwcq42phvslw9","_id":"ck91frkeh000rwcq4jkqvllv3"},{"post_id":"ck91frkec000mwcq4u30p19kw","tag_id":"ck91frke3000dwcq4mogo0rbh","_id":"ck91frkej000uwcq4x6zcqxcl"},{"post_id":"ck91frkdw0009wcq45ks2nkmt","tag_id":"ck91frkef000pwcq4kxab51l3","_id":"ck91frker000zwcq4uo55pp4e"},{"post_id":"ck91frkep000xwcq41q3alxsu","tag_id":"ck91frke3000dwcq4mogo0rbh","_id":"ck91frket0013wcq4c0cjuaqk"},{"post_id":"ck91frke1000bwcq49929w333","tag_id":"ck91frkef000pwcq4kxab51l3","_id":"ck91frkew0017wcq4jrnhwqhb"},{"post_id":"ck91frker0010wcq4mgrllrmk","tag_id":"ck91frke3000dwcq4mogo0rbh","_id":"ck91frkey001bwcq4ikbmebuq"},{"post_id":"ck91frkeu0015wcq40dtqud9m","tag_id":"ck91frke3000dwcq4mogo0rbh","_id":"ck91frkf1001fwcq4kvuy5zks"},{"post_id":"ck91frke4000fwcq4i5kefzvf","tag_id":"ck91frkef000pwcq4kxab51l3","_id":"ck91frkf3001jwcq4uxufx0a9"},{"post_id":"ck91frke6000gwcq4xbgsvses","tag_id":"ck91frkef000pwcq4kxab51l3","_id":"ck91frkf4001mwcq4hfzyq03f"},{"post_id":"ck91frkf1001gwcq4er37vdv9","tag_id":"ck91frke3000dwcq4mogo0rbh","_id":"ck91frkf5001pwcq419j8go3o"},{"post_id":"ck91frkea000kwcq48jk9u4ve","tag_id":"ck91frkf3001kwcq4y7zx5lq9","_id":"ck91frkf6001swcq4bb4akt7c"},{"post_id":"ck91frkef000qwcq4ajqrcs92","tag_id":"ck91frkf5001qwcq40wb34m6t","_id":"ck91frkf9001xwcq45c316mky"},{"post_id":"ck91frkeh000swcq4b571i091","tag_id":"ck91frkf5001qwcq40wb34m6t","_id":"ck91frkfa0021wcq47ipzs2wl"},{"post_id":"ck91frkew0018wcq4zg1lbzxs","tag_id":"ck91frkf5001qwcq40wb34m6t","_id":"ck91frkfb0024wcq40scooaon"},{"post_id":"ck91frkez001dwcq4hqk0ptat","tag_id":"ck91frkfb0023wcq4pzzy99o8","_id":"ck91frkfc0025wcq429oppq7f"}],"Tag":[{"name":"随笔","_id":"ck91frkdp0006wcq4hpzzntpu"},{"name":"工具","_id":"ck91frke3000dwcq4mogo0rbh"},{"name":"框架","_id":"ck91frke8000jwcq42phvslw9"},{"name":"JavaScript","_id":"ck91frkef000pwcq4kxab51l3"},{"name":"JavaScripe","_id":"ck91frkf3001kwcq4y7zx5lq9"},{"name":"Vue","_id":"ck91frkf5001qwcq40wb34m6t"},{"name":"学习","_id":"ck91frkfb0023wcq4pzzy99o8"}]}}