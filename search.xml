<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git快速上手</title>
      <link href="/2020/01/21/git-kuai-su-shang-shou/"/>
      <url>/2020/01/21/git-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="Git教程"><a href="#Git教程" class="headerlink" title="Git教程"></a>Git教程</h1><blockquote><p>如果之前了解过想复习一下,直接看总结就可以了</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="设置Name和Email地址"><a href="#设置Name和Email地址" class="headerlink" title="设置Name和Email地址"></a>设置Name和Email地址</h2><p>安装完成后，还需要最后一步设置，在命令行输入：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Your Name"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><h1 id="本地版本库"><a href="#本地版本库" class="headerlink" title="本地版本库"></a>本地版本库</h1><p>选择一个合适的地方，创建一个空目录：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ mkdir learngit$ cd learngit$ <span class="token function">pwd</span><span class="token operator">/</span>Users<span class="token operator">/</span>michael<span class="token operator">/</span>learngit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p> <strong>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</strong> </p></blockquote><p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ git initInitialized empty Git repository in <span class="token operator">/</span>Users<span class="token operator">/</span>michael<span class="token operator">/</span>learngit<span class="token operator">/</span><span class="token punctuation">.</span>git<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><p><strong>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</strong> </p></blockquote><h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><blockquote><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>使用Windows的童鞋要特别注意：</p><p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：</p></blockquote><p>先添加:</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 单个文件</span>$ git add readme<span class="token punctuation">.</span>txt <span class="token comment" spellcheck="true"># 多个文件</span>$ git add readme<span class="token punctuation">.</span>txt readmeCN<span class="token punctuation">.</span>txt<span class="token comment" spellcheck="true"># 全部添加</span>$ git add <span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把文件提交到本地版本库"><a href="#把文件提交到本地版本库" class="headerlink" title="把文件提交到本地版本库"></a>把文件提交到本地版本库</h2><p>再提交:</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ git commit <span class="token operator">-</span>m <span class="token string">"wrote a readme file"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p></blockquote><blockquote><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ git add file1<span class="token punctuation">.</span>txt$ git add file2<span class="token punctuation">.</span>txt file3<span class="token punctuation">.</span>txt$ git commit <span class="token operator">-</span>m <span class="token string">"add 3 files."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 查看本地库文件状态</span>$ git status<span class="token comment" spellcheck="true"># 文件当前文件改了什么,查看一下再提交就比较放心</span>$ git <span class="token function">diff</span> readme<span class="token punctuation">.</span>txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul></blockquote><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 回退到上一版</span>$ git reset <span class="token operator">--</span>hard HEAD^<span class="token comment" spellcheck="true"># 回退到上上一版</span>$ git reset <span class="token operator">--</span>hard HEAD^^<span class="token comment" spellcheck="true"># 回退到指定版</span>$ git reset <span class="token operator">--</span>hard commit_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li><li>用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。 </li></ul></blockquote><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><blockquote><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p></blockquote><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><pre class="line-numbers language-powershell"><code class="language-powershell">$ git checkout <span class="token operator">--</span> readme<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">$ git reset HEAD readme<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192" target="_blank" rel="noopener">版本回退</a>一节，不过前提是没有推送到远程库。</p></blockquote><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre class="line-numbers language-powershell"><code class="language-powershell">$ <span class="token function">rm</span> file<span class="token comment" spellcheck="true"># 删除工作区 , 可以直接用用git checkout -- &lt;file> 恢复</span>$ git <span class="token function">rm</span> file<span class="token comment" spellcheck="true"># 不仅删除了工作区文件，而且还添加到了暂存区，需要先git reset HEAD &lt;file>，然后再git checkout -- &lt;file></span>&amp; git <span class="token function">rm</span> file&amp; git commit <span class="token operator">-</span>m <span class="token string">"说明注释"</span><span class="token comment" spellcheck="true"># 彻底删除 , 先删除工作区和暂存区,再提交到master分支(仓库)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout – <file>就可以 2.如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout – <file> 3.如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了 </file></file></file></p></blockquote><h1 id="本地仓库总结"><a href="#本地仓库总结" class="headerlink" title="本地仓库总结"></a>本地仓库总结</h1><blockquote><p>Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)</p><p>工作区&gt;&gt;&gt;&gt;暂存区&gt;&gt;&gt;&gt;仓库</p><p>git add把文件从工作区&gt;&gt;&gt;&gt;暂存区，git commit把文件从暂存区&gt;&gt;&gt;&gt;仓库，</p><p>git diff查看工作区和暂存区差异，</p><p>git diff –cached查看暂存区和仓库差异，</p><p>git diff HEAD 查看工作区和仓库的差异，</p><p>git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p>git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。</p></blockquote><blockquote><p><strong>新建git本地仓库：</strong></p><p><code>git init</code> </p><p>新建一个.git文件，有这个文件就是一个git仓库</p><p><strong>git本地仓库分三个区来区别操作（这个思路太重要了）：</strong> </p><p><strong>工作区：</strong> 就是一个多了.git文件的文件夹，不要想太多，就按Linux操作文件夹的方法正常操作 </p><p><strong>暂存区：</strong> 暂时讲了两种操作暂存区的方法：</p><p> 1.存入暂存区:</p><p><code>git add filename</code>  //添加文件</p><p><code>git rm filename</code>   //删除文件</p><p> 这两条都是修改暂存区 </p><p>2.递交暂存区</p><p> <code>git commit -m &quot;log说明一般写改动是什么&quot;</code> </p><p>别忘了正常来说一般对暂存区修改以后一定要commit一下<br><strong>版本库：</strong><code>git commit</code>以后的最终版本存入地方，git最重要的一个地方，因为只有版本库的修改才可以跟踪</p><p>另外有几个命令查看状态也很重要： </p><p><code>git status</code></p><p>查看当前git仓库与上一次commit之后的版本库的一切修改，包括工作区的修改和暂存区的修改（这种信息是不详细的） 很人性化的是，<code>git status</code>会提示你下一步可能会做的事，比如你对工作区做了修改，他可能会提示下一步要git add或者</p><p><code>git checkout  filename</code></p><p>， 你刚执行完git add以后，git status跟踪的暂存区的修改，他又会提示你下一步可能要提交git commit或者</p><p><code>git reset HEAD &lt; filename &gt;</code> </p><p><code>git diff filename</code></p><p>这个命令返回的是你对工作区的修改，别想太多，和什么对比并不重要，你只要知道什么时候他会有信息返回，返回什么信息！什么时候有返回呢！你对工作区已经存在的文件修改<!--（但是没有存入暂存区，也就是说没有git add或者git rm，所以一定要纠结的话，他比较的的确是暂存区和工作区的区别）-->的话有返回<strong>（新建文件git diff看不到）</strong>，返回什么，返回修改的详细信息，+是新添的行-是删去的行</p><p> <code>git diff --cached filename</code></p><p>这个命令是查看你对暂存区的修改，也就是你<code>git add</code>或者<code>git rm</code>以后，<code>git diff</code>的返回信息就用<code>git diff --cached</code>来用了（这也是为什么这两个命令一样，只有参数不一样的原因，因为其实干的都是一件事，只是<code>git diff</code>针对的对象是工作区，<code>git diff --cached</code>针对的对象是暂存区） </p><p><code>git log</code></p><p><strong>当前版本之前</strong>的commit日志记录，也就是说当前版本是回退回来的版本的话，当前版本之后的提交与回退都看不到（有个很重要的commit ID）</p><p><code>git reflog</code></p><p>包括版本回退、版本提交的日志，信息相较于<code>git log</code>会比较简单 </p><p><strong>这样把命令的针对对象分为三个区来理解，现在看撤销操作就很容易了：</strong></p><p> 1.针对工作区的撤销（必须保证没有git add/git rm之前）： </p><p><code>git checkout -- filename</code> </p><p>2.针对暂存区的撤销（必须是git add/git rm以后才行） </p><p><code>git reset HEAD filename</code> </p><p>顺便想起git reset的另一种用法，参数不一样啦，那肯定也是撤销操作，当然就是撤销提交，回退版本啦</p><p><code>git reset --hard （HEAD^^^^）/commit id</code></p></blockquote><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><blockquote><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。 </p></blockquote><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 提供Git仓库托管服务 , 注册一个GitHub账号，就可以免费获得Git远程仓库 ,自行点击链接注册</p><blockquote><p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 ,所以需要设置下SSH Key</p></blockquote><blockquote><p>第1步：<strong>创建SSH Key</strong>。在用户主目录下<code>C:\Users\zl</code><!--用户主目录在windows中就是 C:\Users\Administrator\，或者你新建了一个用户，那就是 C:\Users\用户名\--> ，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">$ ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“<strong>Add SSH Key”</strong>，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p></blockquote><h2 id="本地文件添加到远程仓库"><a href="#本地文件添加到远程仓库" class="headerlink" title="本地文件添加到远程仓库"></a>本地文件添加到远程仓库</h2><ul><li>找到“Create a new repo”按钮，创建一个新的仓库： </li><li>在Repository name填入名称</li><li>其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 </li></ul><p>在本地的<code>learngit</code>仓库下运行命令：</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ git remote add origin git@github<span class="token punctuation">.</span>com:michaelliao<span class="token operator">/</span>learngit<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">$ git push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样 </p></blockquote><blockquote><p>从现在起，只要本地作了提交，就可以通过命令：</p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">$ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="克隆别人的Git远程仓库到自己的仓库"><a href="#克隆别人的Git远程仓库到自己的仓库" class="headerlink" title="克隆别人的Git远程仓库到自己的仓库"></a>克隆别人的Git远程仓库到自己的仓库</h2><ul><li>在本地新建文件夹克隆下来</li><li>删除<code>.git</code>文件</li><li>然后在自己的GitHub上新建一个仓库</li><li>在本地仓库执行</li></ul><pre class="line-numbers language-powershell"><code class="language-powershell">$ git init$ git remote add origin 新建的仓库地址$ git add <span class="token punctuation">.</span>$ git commit <span class="token operator">-</span>m <span class="token string">"提交全部"</span>$ git push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h2><blockquote><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><pre><code>The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.RSA key fingerprint is xx.xx.xx.xx.xx.Are you sure you want to continue connecting (yes/no)?</code></pre><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><pre><code>Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</code></pre><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/" target="_blank" rel="noopener">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p></blockquote><blockquote><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p></blockquote><h2 id="从远程库克隆到本地"><a href="#从远程库克隆到本地" class="headerlink" title="从远程库克隆到本地"></a>从远程库克隆到本地</h2><ul><li>第一步<ul><li>新建一个仓库,勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件： </li></ul></li><li>第二步<ul><li><code>$ git clone 仓库的URL</code></li></ul></li></ul><blockquote><p>URL我们一般选取SSH 相较于 http 而言 方便不用每次都输入用户名密码,而且传输速度快</p><p>除非公司只支持 http 才会选用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue文档风格的Typora主题</title>
      <link href="/2020/01/21/vue-wen-dang-feng-ge-de-typora-zhu-ti/"/>
      <url>/2020/01/21/vue-wen-dang-feng-ge-de-typora-zhu-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/ThirtyZhang/ypora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a>是 Typora Markdown 文档编辑器中一款类似<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格的主题。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。<strong>typora-vue-theme就是参考了Vue文档风格而开发的一个 Typora 自定义主题</strong>。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol><li>下载本主题<strong><a href="https://github.com/ThirtyZhang/ypora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a></strong>中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li><li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li><li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li><li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyHexo博客框架</title>
      <link href="/2020/01/21/easyhexo-bo-ke-kuang-jia/"/>
      <url>/2020/01/21/easyhexo-bo-ke-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h2 id="认识-Hexo"><a href="#认识-Hexo" class="headerlink" title="认识 Hexo"></a>认识 Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架，可以让你快速建立一个博客。</p></blockquote><blockquote><p>Hexo 使用 Node.js 编写。得益于 Node.js，使得 Hexo 生成上百个页面游刃有余。</p></blockquote><blockquote><p>Hexo 支持 GFM (GitHub Flavored Markdown) 的大部分功能。如果你不喜欢 Markdown ，你还可以换一个 Hexo 渲染插件。</p></blockquote><blockquote><p>Hexo 有许多插件，可以进行各种操作。</p></blockquote><h2 id="学习-Hexo-之前，你需要有："><a href="#学习-Hexo-之前，你需要有：" class="headerlink" title="学习 Hexo 之前，你需要有："></a>学习 Hexo 之前，你需要有：</h2><ul><li>Node.js 基本知识</li><li>Git 基本知识</li><li>Markdown 基本知识</li><li>Html、css、JavaScript 基本知识</li><li>······</li></ul><p>当然了，你可别被吓跑了。除了 Markdown ，其他都不用熟练掌握（事实上如果你不注意排版连 Markdown 都不用掌握，但最好还是学学吧 : <strong><a href="https://thirtyzhang.github.io/2020/01/21/markdown-yu-fa/">Markdown语法 </a></strong>）。如果你完全不会以上划线部分的知识，也没关系。只是简单地建个可以发文章的博客就好了。如果你要更上一层楼，那么以上被划掉的知识就是必备的啦~</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在安装 Hexo 之前，你需要安装以下两个工具：</p><ul><li><strong><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></strong></li><li><strong><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></strong></li></ul><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li><li>Linux (Arch 系列)：<code>sudo pacman -S git</code></li></ul><p>提醒</p><p>由于墙的原因，从上面的链接下载 git for windows 最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p><p>提醒</p><p>如果你是 CentOS 服务器上的，可以直接使用 <a href="https://github.com/PasserByJia/HexoOneClickInstallation" target="_blank" rel="noopener">HexoOneClickInstallation</a> 这个脚本快速安装 Hexo。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p><p>cURL:</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ curl https:<span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>creationix<span class="token operator">/</span>nvm<span class="token operator">/</span>v0<span class="token punctuation">.</span>33<span class="token punctuation">.</span>11<span class="token operator">/</span>install<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Wget:</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ wget <span class="token operator">-</span>qO<span class="token operator">-</span> https:<span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>creationix<span class="token operator">/</span>nvm<span class="token operator">/</span>v0<span class="token punctuation">.</span>33<span class="token punctuation">.</span>11<span class="token operator">/</span>install<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><pre class="line-numbers language-powershell"><code class="language-powershell">$ nvm install stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><h2 id="安装-Hexo-1"><a href="#安装-Hexo-1" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>安装好后，即可使用 npm 完成 Hexo 的安装。</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 下面这两个命令好像是一样的效果,任选一个就可以了</span>$ npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span><span class="token function">cli</span>$ npm install hexo<span class="token operator">-</span><span class="token function">cli</span> <span class="token operator">-</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="建立网站"><a href="#建立网站" class="headerlink" title="建立网站"></a>建立网站</h2><p>安装好 Hexo 后即可建立你的网站。</p><p>首先建立一个文件夹。</p><pre class="line-numbers language-powershell"><code class="language-powershell">mkdir &lt;your_blog_name>  <span class="token comment" spellcheck="true"># 建立你的网站根目录，名字可以自己修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后往这个文件夹里安装 Hexo。</p><pre class="line-numbers language-powershell"><code class="language-powershell">hexo init &lt;your_blog_name><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就建立好网站了！</p><h1 id="主题链接"><a href="#主题链接" class="headerlink" title="主题链接"></a>主题链接</h1><p><a href="https://github.com/ThirtyZhang/hexo-theme-matery" target="_blank" rel="noopener">自己克隆的</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">原版的</a></p><h1 id="收藏博客"><a href="#收藏博客" class="headerlink" title="收藏博客"></a>收藏博客</h1><p><a href="https://blinkfox.github.io/" target="_blank" rel="noopener">闪烁之狐</a></p><p><a href="https://godweiyang.com/" target="_blank" rel="noopener">韦阳的博客</a></p><h1 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h1><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p><p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后</p><p>，最后<code>git push origin hexo</code>提交就行了。</p><p>来源: 韦阳的博客</p><p>作者: 韦阳</p><p>链接: </p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-12" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-12</a></p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-10</a> </p>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub国内访问加速</title>
      <link href="/2020/01/21/github-guo-nei-fang-wen-jia-su/"/>
      <url>/2020/01/21/github-guo-nei-fang-wen-jia-su/</url>
      
        <content type="html"><![CDATA[<h1 id="Github加速"><a href="#Github加速" class="headerlink" title="Github加速"></a>Github加速</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>修改系统hosts文件的办法，绕过国内dns解析，直接访问GitHub的CDN节点</p><p>访问网址时先搜索hosts文件，如果由网址对应的ip则不需要dns域名解析，因此可以将网址的ip配成静态ip，减少解析过程，提高访问速度。 </p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><strong>修改hosts</strong></p><blockquote><p>hosts文件最下面增加（win10的位置为C:\Windows\System32\drivers\etc，先拷到其他地方修改后再覆盖该文件夹hosts文件）：</p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Github加速</span>192<span class="token punctuation">.</span>30<span class="token punctuation">.</span>253<span class="token punctuation">.</span>113     github<span class="token punctuation">.</span>com185<span class="token punctuation">.</span>199<span class="token punctuation">.</span>108<span class="token punctuation">.</span>153    github<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io151<span class="token punctuation">.</span>101<span class="token punctuation">.</span>72<span class="token punctuation">.</span>133     assets<span class="token operator">-</span>cdn<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com151<span class="token punctuation">.</span>101<span class="token punctuation">.</span>185<span class="token punctuation">.</span>194    github<span class="token punctuation">.</span>global<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>fastly<span class="token punctuation">.</span>net<span class="token comment" spellcheck="true"># Github加速结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新系统DNS缓存 <em>**</em></p><blockquote><p>打开<code>cmd console:</code></p><blockquote><p><code>Windows+X</code> 打开系统命令行（管理员身份）或 PowerShell </p></blockquote></blockquote><blockquote><p>执行：<code>ipconfig /flushdns</code></p></blockquote><p>到这里就完成了,下面介绍下获取最新地址方法</p><h2 id="获取GitHub官方CDN地址"><a href="#获取GitHub官方CDN地址" class="headerlink" title="获取GitHub官方CDN地址"></a>获取GitHub官方CDN地址</h2><p><strong>打开:</strong><a href="https://www.ipaddress.com/" target="_blank" rel="noopener"><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> </a></p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Github加速</span>192<span class="token punctuation">.</span>30<span class="token punctuation">.</span>253<span class="token punctuation">.</span>113     github<span class="token punctuation">.</span>com185<span class="token punctuation">.</span>199<span class="token punctuation">.</span>108<span class="token punctuation">.</span>153    github<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io151<span class="token punctuation">.</span>101<span class="token punctuation">.</span>72<span class="token punctuation">.</span>133     assets<span class="token operator">-</span>cdn<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com151<span class="token punctuation">.</span>101<span class="token punctuation">.</span>185<span class="token punctuation">.</span>194    github<span class="token punctuation">.</span>global<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>fastly<span class="token punctuation">.</span>net<span class="token comment" spellcheck="true"># Github加速结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询上述IP后面的网址,更新前面的IP地址,并重新修改<code>hosts</code>文件</p>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2020/01/21/markdown-yu-fa/"/>
      <url>/2020/01/21/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<div align="middle"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28892385&auto=1&height=66"></iframe></div><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><table><thead><tr><th align="center"><strong>语法</strong></th></tr></thead><tbody><tr><td align="center"><code>#</code>一级标题</td></tr><tr><td align="center"><code>##</code>二级标题</td></tr><tr><td align="center"><code>###</code>三级标题</td></tr><tr><td align="center"><code>####</code>四级标题</td></tr><tr><td align="center"><code>#####</code>五级标题</td></tr><tr><td align="center"><code>######</code>六级标题</td></tr></tbody></table><p><img src="2.png" alt="png"></p><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p><code>*斜体*</code>  <em>斜体</em></p><p><code>_斜体_</code>  _斜体_</p><p><code>**粗体**</code>  <strong>粗体</strong></p><p><code>***加粗斜体***</code><strong><em>加粗斜体</em></strong></p><p><code>~~删除线~~</code>  <del>删除线</del></p><h2 id="插入图片或连接"><a href="#插入图片或连接" class="headerlink" title="插入图片或连接"></a>插入图片或连接</h2><p><code>[描述](图片路径或者URL)</code>  描述可以不写</p><h2 id="分割线三种方式"><a href="#分割线三种方式" class="headerlink" title="分割线三种方式"></a>分割线三种方式</h2><p>你可以在一行中用三个以上的星号<code>*</code>、减号<code>-</code>、底线<code>_</code>来建立一个分隔线，行内不能有其他东西。 </p><p><code>---</code></p><hr><p><code>***</code></p><hr><p><code>___</code></p><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p><strong>行内式</strong>：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键） </p><p>`用两个反引号` <code>行内/单行代码块</code></p><p><strong>多行代码块与语法高亮</strong>：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹 </p><p>```js</p><p>三个反引号可以表明代码语言,这里写的js</p><p>````</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是js代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在被引用的文本前加上<code>&gt;</code>符号，以及一个空格就可以了，如一个<code>&gt;</code>符号会产生一次缩进</p><p><code>&gt;引用</code> </p><blockquote><p>引用</p></blockquote><p><code>&gt;&gt;引用</code></p><blockquote><blockquote><p>引用</p></blockquote></blockquote><p><code>&gt;&gt;&gt;引用</code></p><blockquote><blockquote><blockquote><p>引用</p></blockquote></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>无序列表</strong></p><p>使用 *，+，- 都可以表示无序列表。任意选用一个即可, 注意：符号后面一定要有一个空格，起到缩进的作用。 </p><p><code>- 无序列表</code>- </p><p><code>* 无序列表</code></p><p><code>+ 无序列表</code></p><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><p><strong>有序列表</strong></p><p>使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 </p><p><code>1.有序列表</code></p><p><code>2.有序列表</code></p><p><code>3.有序列表</code></p><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符\"></a>转义字符<code>\</code></h2><p>如果在使用符号时与Markdown语法冲突,可以在符号前面加上<code>\</code>即可正常显示</p><p>如在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><code>|姓名|性别|分数|</code></p><p><code>|:-:|:-:|:-:|</code></p><p><code>|小明|男|100|</code></p><p><code>|小明|男|100|</code></p><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中 </p><table><thead><tr><th align="center">姓名</th><th align="center">性别</th><th align="center">分数</th></tr></thead><tbody><tr><td align="center">小明</td><td align="center">男</td><td align="center">100</td></tr><tr><td align="center">小明</td><td align="center">男</td><td align="center">100</td></tr></tbody></table><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>Markdown语法学到这里日常已经够用了,下面介绍一款实时预览的 Markdown 文本编辑器</p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。 </p><p>点击下载:<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></p><h2 id="GFM-标准"><a href="#GFM-标准" class="headerlink" title="GFM 标准"></a>GFM 标准</h2><p> <a href="https://github.github.com/gfm/" target="_blank" rel="noopener">GFM 标准</a>，它是由著名代码托管网站 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href="http://support.typora.io/Strict-Mode/" target="_blank" rel="noopener">这篇文档</a> 中查看。</p><h2 id="设置图片"><a href="#设置图片" class="headerlink" title="设置图片"></a>设置图片</h2><p>Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p><p><img src="3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预习路线</title>
      <link href="/2020/01/20/yu-xi-lu-xian/"/>
      <url>/2020/01/20/yu-xi-lu-xian/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66"></iframe></div><h1 id="预习路线"><a href="#预习路线" class="headerlink" title="预习路线"></a>预习路线</h1><ul><li>ajax  —  node  —  vue  — 小程序 — react </li></ul><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p><strong><a href="https://www.bilibili.com/video/av15657082" target="_blank" rel="noopener">Part1</a></strong>不看php可以从第37个视频开始看</p><p><strong><a href="https://www.bilibili.com/video/av15866060/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener">Part2</a></strong></p><p><a href="https://pan.baidu.com/s/1w-lcQCMTNLuSEg0e_hpKuQ" target="_blank" rel="noopener">课件网盘链接</a> – 提取码:mc10</p><p>这个ajax的视频比较老了,,,</p><p>又另外找了一个备看</p><p><a href="https://www.bilibili.com/video/av22807707/?spm_id_from=333.788.videocard.4" target="_blank" rel="noopener">李南江亲授-jQuery+Ajax从放弃到知根知底</a></p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><a href="https://www.bilibili.com/video/av81455397" target="_blank" rel="noopener">NodeJs全套视频教程</a></p><p><a href="https://pan.baidu.com/s/1DuXusxfxaiUscfvDb0a9LA" target="_blank" rel="noopener">课件网盘链接</a> – 提取码: nzys </p><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><p><strong><a href="https://www.bilibili.com/video/av75420619/?spm_id_from=333.788.videocard.2" target="_blank" rel="noopener">Pink 老师推荐-Vue.js快速入门课程</a></strong> </p><p><strong><a href="https://www.bilibili.com/video/av50680998" target="_blank" rel="noopener">Vue-黑马程序员视频</a></strong> —&gt;p1–p199是2018经典vue基础+项目实战教程—p200至最后是2019年最新的vue全家桶(包含了比较流行的新技术)+项目实战教程</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://thirtyzhang.github.io/git">Git</a></p><p><a href="https://naotu.baidu.com/" target="_blank" rel="noopener">百度脑图</a></p><p><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></p><p><a href="https://www.html.cn/doc/underscore/#throttle" target="_blank" rel="noopener">Underscore.js (1.9.1) 中文文档 </a></p><p><a href="https://aui.github.io/art-template/zh-cn/" target="_blank" rel="noopener">模板引擎</a></p><p><a href="https://www.bypass.cn/" target="_blank" rel="noopener">Bypass-分流抢票</a></p><h2 id="学习站点"><a href="#学习站点" class="headerlink" title="学习站点"></a>学习站点</h2><p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a></p><p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a></p><p>git - 典型错误</p><p><img src="1.png" alt="png"></p><h2 id="手动封装数组方法"><a href="#手动封装数组方法" class="headerlink" title="手动封装数组方法"></a>手动封装数组方法</h2><pre class="line-numbers language-js"><code class="language-js">        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">myForEach</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//循环调用回调函数,遍历数组中的值</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myForEach<span class="token punctuation">)</span><span class="token punctuation">;</span>        Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myForEach <span class="token operator">=</span> myForEach<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把函数添加为Array的原型方法</span>        <span class="token comment" spellcheck="true">//调用</span>        arr<span class="token punctuation">.</span><span class="token function">myForEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h2><p><strong>npm install</strong> 的时候出现错误：</p><p>npm ERR! Unexpected end of JSON input while parsing near ‘…”,”webpack-dev-server’<br>1<br>解决方案：</p><p>第一步：</p><p>npm cache clean –force<br>1<br>第二步：（再安装）</p><p>npm install</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/2018/01/22/2017-conclusion/"/>
      <url>/2018/01/22/2017-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
